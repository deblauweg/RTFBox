<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2018r1.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="498593937">
 <ObjName>clsRTFBox</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>Canvas</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <HookInstance>
  <ItemName>Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1176498175</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Paint(g As Graphics, areas() As REALbasic.Rect)</SourceLine>
   <SourceLine>#Pragma Unused areas</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim dScaleBase As Double</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsNull(m_pic) Then</SourceLine>
   <SourceLine>GetImage</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>GetScaleFactor(iScale, dScaleBase)</SourceLine>
   <SourceLine>If (m_pic.Width &lt;&gt; Round(Self.Width * dScaleBase * iScale) Or _</SourceLine>
   <SourceLine>m_pic.Height &lt;&gt; Round(Self.Height * dScaleBase * iScale)) Then</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>GetImage</SourceLine>
   <SourceLine>ElseIf m_iRedrawFromPos &gt;= 0 Then</SourceLine>
   <SourceLine>GetImage</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.DrawPicture(m_pic, 0, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>GotFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1037803519</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GotFocus()</SourceLine>
   <SourceLine>m_bGotFocus = True</SourceLine>
   <SourceLine>m_bCursorVisible = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ShowRTFTouchbar(True)</SourceLine>
   <SourceLine>GotFocus</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>LostFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1171982335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LostFocus()</SourceLine>
   <SourceLine>m_bGotFocus = False</SourceLine>
   <SourceLine>ShowRTFTouchbar(False)</SourceLine>
   <SourceLine>LostFocus</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1299949567</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseDown(X As Integer, Y As Integer) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim mnuBase As MenuItem</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim mnuSub As MenuItem</SourceLine>
   <SourceLine>Dim clp As Clipboard</SourceLine>
   <SourceLine>Dim strArrSplit() As String</SourceLine>
   <SourceLine>Dim clColor As Color</SourceLine>
   <SourceLine>Dim strFunctie As String</SourceLine>
   <SourceLine>Dim strCmd As String</SourceLine>
   <SourceLine>Dim iPosClicked As Integer</SourceLine>
   <SourceLine>Dim bAdded As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32 </SourceLine>
   <SourceLine>strCmd = "ctrl-"</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>strCmd = "cmd-"</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Not MouseDown(X, Y) Then</SourceLine>
   <SourceLine>If IsContextualClick Then</SourceLine>
   <SourceLine>'Rightclick</SourceLine>
   <SourceLine>If Y &gt; m_iTopText And _</SourceLine>
   <SourceLine>X &lt; Self.Width - 17 Then</SourceLine>
   <SourceLine>iPosClicked = InsertionPosAtXY(X, Y)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPosClicked = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>clp = New Clipboard</SourceLine>
   <SourceLine>mnuBase = New MenuItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Bold    (" + strCmd + "b)"</SourceLine>
   <SourceLine>mnu.Tag = "Bold"</SourceLine>
   <SourceLine>mnu.Checked = IsBold</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Italic    (" + strCmd + "i)"</SourceLine>
   <SourceLine>mnu.Tag = "Italic"</SourceLine>
   <SourceLine>mnu.Checked = IsItalic</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_EXTRALINESTYLES</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Underline"</SourceLine>
   <SourceLine>mnu.Tag = "Underline"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If (Not IsUnderline Or IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE)) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Single Line    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Single Line"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineStandard"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_WORD) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Word Underline    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Word Underline"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineWord"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_WORD)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DASH) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Dashed    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Dashed"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineDash"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DASH)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DOT) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Dotted    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Dotted"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineDot"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DOT)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DOUBLE) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Double Line    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Double Line"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineDouble"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_DOUBLE)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_THICK) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Thick Line    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Thick Line"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineThick"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_THICK)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>If IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_WAVE) Then</SourceLine>
   <SourceLine>mnuSub.Text = "Waved    (" + strCmd + "u)"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuSub.Text = "Waved"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuSub.Tag = "UnderlineWave"</SourceLine>
   <SourceLine>mnuSub.Checked = IsUnderline(clsRTFBox_Data.STYLE_UNDERLINE_WAVE)</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "StrikeThrough"</SourceLine>
   <SourceLine>mnu.Tag = "StrikeThrough"</SourceLine>
   <SourceLine>mnu.Checked = IsStrikeThrough</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Shadow"</SourceLine>
   <SourceLine>mnu.Tag = "Shadow"</SourceLine>
   <SourceLine>mnu.Checked = IsShadow</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Invisible"</SourceLine>
   <SourceLine>mnu.Tag = "Invisible"</SourceLine>
   <SourceLine>mnu.Checked = IsInvisible</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Underline    (" + strCmd + "u)"</SourceLine>
   <SourceLine>mnu.Tag = "UnderlineStandard"</SourceLine>
   <SourceLine>mnu.Checked = IsUnderline</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(GetFontMenu)</SourceLine>
   <SourceLine>mnuBase.Append(GetFontSizeMenu)</SourceLine>
   <SourceLine>mnuBase.Append(GetColorMenu("COLOR", GetColor))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine>bAdded = False</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_PAGEBREAK </SourceLine>
   <SourceLine>If m_iSelLen = 0 And _</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell &lt; 0 Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "PageBreak (" + strCmd + "ENTER)"</SourceLine>
   <SourceLine>mnu.Tag = "pagebreak"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_CHECKBOX </SourceLine>
   <SourceLine>If m_iSelLen = 0 Then 'And _</SourceLine>
   <SourceLine>'m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell &lt; 0 Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Checkbox"</SourceLine>
   <SourceLine>mnu.Tag = "checkbox"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_HYPERLINKS</SourceLine>
   <SourceLine>If m_iSelLen = 0 Then</SourceLine>
   <SourceLine>If m_rtf.GetHyperlink(iPosClicked).Len &gt; 0 Or _</SourceLine>
   <SourceLine>(iPosClicked &gt; 0 And m_rtf.GetHyperlink(iPosClicked - 1).Len &gt; 0) Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Update Hyperlink"</SourceLine>
   <SourceLine>mnu.Tag = "hyperlink"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Hyperlink"</SourceLine>
   <SourceLine>mnu.Tag = "hyperlink"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_PICTURES </SourceLine>
   <SourceLine>If iPosClicked &gt;= 0 And m_rtf.m_cpArr(iPosClicked).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Resize Picture"</SourceLine>
   <SourceLine>mnu.Tag = "ResizePicture"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Picture"</SourceLine>
   <SourceLine>mnu.Tag = "InsertPicture"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_TABLES</SourceLine>
   <SourceLine>mnu = GetTableMenu(X, Y)</SourceLine>
   <SourceLine>If Not IsNull(mnu) Then</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bAdded Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(GetFunctionsMenu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_rtf.HasUsedFunctions Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Update Functions"</SourceLine>
   <SourceLine>mnu.Tag = "UpdateFunctions"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_EMBEDDEDHTML</SourceLine>
   <SourceLine>If m_iSelLen = 0 Then</SourceLine>
   <SourceLine>If m_rtf.GetEmbeddedHtmlCode(iPosClicked).Len &gt; 0 Or _</SourceLine>
   <SourceLine>(iPosClicked &gt; 0 And m_rtf.GetEmbeddedHtmlCode(iPosClicked - 1).Len &gt; 0) Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Update Embedded Html"</SourceLine>
   <SourceLine>mnu.Tag = "embeddedhtml"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Embedded Html"</SourceLine>
   <SourceLine>mnu.Tag = "embeddedhtml"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAdded = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = GetSpellCheckerMenu(iPosClicked)</SourceLine>
   <SourceLine>If Not IsNull(mnu) Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If mnuBase.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Copy    (" + strCmd + "c)"</SourceLine>
   <SourceLine>mnu.Tag = "Copy"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Cut    (" + strCmd + "x)"</SourceLine>
   <SourceLine>mnu.Tag = "Cut"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If clp.TextAvailable Or _</SourceLine>
   <SourceLine>(clsRTFBox_Data.ALLOW_PICTURES And clp.PictureAvailable) Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Paste    (" + strCmd + "v)"</SourceLine>
   <SourceLine>mnu.Tag = "Paste"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Not m_bReadOnly And _</SourceLine>
   <SourceLine>(clp.TextAvailable Or (clsRTFBox_Data.ALLOW_PICTURES And clp.PictureAvailable)) Then</SourceLine>
   <SourceLine>If mnuBase.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Paste    (" + strCmd + "v)"</SourceLine>
   <SourceLine>mnu.Tag = "Paste"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If mnuBase.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Layout bar"</SourceLine>
   <SourceLine>mnu.Tag = "Layoutbar"</SourceLine>
   <SourceLine>mnu.Checked = m_bLayoutBar</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Select All    (" + strCmd + "a)"</SourceLine>
   <SourceLine>mnu.Tag = "SelectAll"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly And IsUndoPossible Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(MenuItem.TextSeparator))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Undo    (" + strCmd + "z)"</SourceLine>
   <SourceLine>mnu.Tag = "Undo"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = mnuBase.PopUp</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(mnu) Then</SourceLine>
   <SourceLine>m_bAutoScroll = True</SourceLine>
   <SourceLine>If mnu.Tag = "Bold" Then</SourceLine>
   <SourceLine>ActionBold</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Italic" Then</SourceLine>
   <SourceLine>ActionItalic </SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineStandard" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineWord" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_WORD</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineDash" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_DASH</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineDot" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_DOT</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineDouble" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_DOUBLE</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineThick" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_THICK</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UnderlineWave" Then</SourceLine>
   <SourceLine>ActionUnderline clsRTFBox_Data.STYLE_UNDERLINE_WAVE</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "StrikeThrough" Then</SourceLine>
   <SourceLine>ActionStrikeThrough</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Shadow" Then</SourceLine>
   <SourceLine>ActionShadow</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Invisible" Then</SourceLine>
   <SourceLine>ActionInvisible</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Copy" Then</SourceLine>
   <SourceLine>ActionCopy</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Cut" Then</SourceLine>
   <SourceLine>ActionCut</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Paste" Then</SourceLine>
   <SourceLine>ActionPaste</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Layoutbar" Then</SourceLine>
   <SourceLine>ActionLayoutBar</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Spellchecker" Then</SourceLine>
   <SourceLine>ActionSpellCheck</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "pagebreak" Then</SourceLine>
   <SourceLine>ActionInsertPagebreak</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "checkbox" Then</SourceLine>
   <SourceLine>ActionInsertCheckBox</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "hyperlink" Then</SourceLine>
   <SourceLine>ActionHyperlink(iPosClicked)</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "embeddedhtml" Then</SourceLine>
   <SourceLine>ActionHTMLCode(iPosClicked)</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "UpdateFunctions" Then</SourceLine>
   <SourceLine>ActionUpdateFunctions</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "SelectAll" Then</SourceLine>
   <SourceLine>ActionSelectAll</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "Undo" Then</SourceLine>
   <SourceLine>ActionUndo</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "InsertPicture" Then</SourceLine>
   <SourceLine>ActionInsertPicture</SourceLine>
   <SourceLine>ElseIf mnu.Tag = "ResizePicture" Then</SourceLine>
   <SourceLine>ActionResizePicture(m_rtf.m_cpArr(iPosClicked).iPicture)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(5) = "FONT." Then</SourceLine>
   <SourceLine>ActionFont(mnu.Text)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(9) = "FONTSIZE." Then</SourceLine>
   <SourceLine>ActionFontSize(Val(mnu.Text))</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(6) = "COLOR." Then</SourceLine>
   <SourceLine>strArrSplit = mnu.Tag.StringValue.Mid(7).Split(".")</SourceLine>
   <SourceLine>clColor = RGB(Val(strArrSplit(0)), Val(strArrSplit(1)), Val(strArrSplit(2)))</SourceLine>
   <SourceLine>ActionColor(clColor)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(9) = "FUNCTION." Then</SourceLine>
   <SourceLine>strFunctie = mnu.Tag.StringValue.Mid(10)</SourceLine>
   <SourceLine>ActionInsertFunctie(strFunctie)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(4) = "TBL." Then</SourceLine>
   <SourceLine>strFunctie = mnu.Tag.StringValue.Mid(5)</SourceLine>
   <SourceLine>ActionTable(strFunctie, X, Y)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(3) = "SC." Then</SourceLine>
   <SourceLine>strFunctie = mnu.Tag.StringValue.Mid(4)</SourceLine>
   <SourceLine>ActionSpellCheck_Action(strFunctie, mnu.Text, iPosClicked)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Y &lt;= m_iTopText Then</SourceLine>
   <SourceLine>'Menubar</SourceLine>
   <SourceLine>If Y &gt; 21 Then</SourceLine>
   <SourceLine>ActionTabstop(X - 2)</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSFONT) And X &lt;= GetLayoutStopPos(CTRLPOSFONT) Then</SourceLine>
   <SourceLine>mnuBase = GetFontMenu</SourceLine>
   <SourceLine>mnu = mnuBase.PopUp(Self.Window.Left + Self.Left + GetLayoutStartPos(CTRLPOSFONT), Self.Window.Top + Self.Top + 20)</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSFONTSIZE) And X &lt;= GetLayoutStopPos(CTRLPOSFONTSIZE) Then</SourceLine>
   <SourceLine>mnuBase = GetFontSizeMenu</SourceLine>
   <SourceLine>mnu = mnuBase.PopUp(Self.Window.Left + Self.Left + GetLayoutStartPos(CTRLPOSFONTSIZE), Self.Window.Top + Self.Top + 20)</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSBOLD) And X &lt;= GetLayoutStopPos(CTRLPOSBOLD) Then</SourceLine>
   <SourceLine>ActionBold</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSITALIC) And X &lt;= GetLayoutStopPos(CTRLPOSITALIC) Then</SourceLine>
   <SourceLine>ActionItalic</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSUNDERLINE) And X &lt;= GetLayoutStopPos(CTRLPOSUNDERLINE) Then</SourceLine>
   <SourceLine>ActionUnderline</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSALIGNLEFT) And X &lt;= GetLayoutStopPos(CTRLPOSALIGNLEFT) Then</SourceLine>
   <SourceLine>ActionAlignLeft</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSALIGNCENTER) And X &lt;= GetLayoutStopPos(CTRLPOSALIGNCENTER) Then</SourceLine>
   <SourceLine>ActionAlignCenter</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSALIGNRIGHT) And X &lt;= GetLayoutStopPos(CTRLPOSALIGNRIGHT) Then</SourceLine>
   <SourceLine>ActionAlignRight</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSJUMPOUT) And X &lt;= GetLayoutStopPos(CTRLPOSJUMPOUT) Then</SourceLine>
   <SourceLine>ActionJumpOut</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSJUMPIN) And X &lt;= GetLayoutStopPos(CTRLPOSJUMPIN) Then</SourceLine>
   <SourceLine>ActionJumpIn</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSUNDO) And X &lt;= GetLayoutStopPos(CTRLPOSUNDO) Then</SourceLine>
   <SourceLine>ActionUndo</SourceLine>
   <SourceLine>ElseIf X &gt;= GetLayoutStartPos(CTRLPOSCOLOR) And X &lt;= GetLayoutStopPos(CTRLPOSCOLOR) Then</SourceLine>
   <SourceLine>mnuBase = GetColorMenu("COLOR", GetColor)</SourceLine>
   <SourceLine>mnu = mnuBase.PopUp(Self.Window.Left + Self.Left + GetLayoutStartPos(CTRLPOSCOLOR), Self.Window.Top + Self.Top + 20)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(mnu) Then</SourceLine>
   <SourceLine>If mnu.Tag.StringValue.Left(5) = "FONT." Then</SourceLine>
   <SourceLine>ActionFont(mnu.Text)</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(9) = "FONTSIZE." Then </SourceLine>
   <SourceLine>ActionFontSize(Val(mnu.Text))</SourceLine>
   <SourceLine>ElseIf mnu.Tag.StringValue.Left(6) = "COLOR." Then</SourceLine>
   <SourceLine>strArrSplit = mnu.Tag.StringValue.Mid(7).Split(".")</SourceLine>
   <SourceLine>clColor = RGB(Val(strArrSplit(0)), Val(strArrSplit(1)), Val(strArrSplit(2)))</SourceLine>
   <SourceLine>ActionColor(clColor)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf (m_bMinActive Or m_bPlusActive) And X &gt;= Self.Width - 17 Then</SourceLine>
   <SourceLine>'The user clicked in the vertical scrollbar</SourceLine>
   <SourceLine>m_bAutoScroll = False</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>If Y &lt;= (m_iTopText + 10) Then</SourceLine>
   <SourceLine>If m_iScrollValue &gt; 0 Then </SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollValue - 10</SourceLine>
   <SourceLine>If m_iScrollValue &lt; 0 Then</SourceLine>
   <SourceLine>m_iScrollValue = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Y &gt;= Self.Height - 10 Then</SourceLine>
   <SourceLine>If m_iScrollValue &lt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollValue + 10</SourceLine>
   <SourceLine>If m_iScrollValue &gt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollMaximum</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iScrollValue = Round((m_iScrollMaximum * (Y - (m_iTopText + 11)) / (Self.Height - (m_iTopText + 22))))</SourceLine>
   <SourceLine>If m_iScrollValue &lt; 0 Then</SourceLine>
   <SourceLine>m_iScrollValue = 0</SourceLine>
   <SourceLine>ElseIf m_iScrollValue &gt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollMaximum</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Text</SourceLine>
   <SourceLine>m_iKlikStart = InsertionPosAtXY(X, Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iKlikStart &gt;= 0 Then</SourceLine>
   <SourceLine>'Start live selecting</SourceLine>
   <SourceLine>m_iSelectingCurrentStop = m_iKlikStart</SourceLine>
   <SourceLine>If Not IsNull(Self.Window) Then</SourceLine>
   <SourceLine>'We need this to compare the mouseposition to the position inside</SourceLine>
   <SourceLine>'this control</SourceLine>
   <SourceLine>m_iSelectingXDiff = (Self.Window.Left + Self.Left)</SourceLine>
   <SourceLine>m_iSelectingYDiff = (Self.Window.Top + Self.Top)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>342507519</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MouseUp(X As Integer, Y As Integer)</SourceLine>
   <SourceLine>Dim iStop As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim bRefresh As Boolean</SourceLine>
   <SourceLine>Dim strHyperLink As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bGotFocus Then</SourceLine>
   <SourceLine>Self.SetFocus</SourceLine>
   <SourceLine>ElseIf m_iKlikStart &gt;= 0 Then</SourceLine>
   <SourceLine>iStop = InsertionPosAtXY(X, Y)</SourceLine>
   <SourceLine>System.DebugLog "MouseDown: " + Format(m_iKlikStart, "0") + " MouseUp: " + Format(iStop, "0")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (m_iKlikStart - iStop) &lt; 5 And Abs(m_iTicksTripleClick - Ticks) &lt;= 40 Then 'Tripleklik</SourceLine>
   <SourceLine>If Asc(m_rtf.m_chArr(iStop)) &gt; 32 Then</SourceLine>
   <SourceLine>t = iStop - 1</SourceLine>
   <SourceLine>While t &gt;= 0 And Asc(m_rtf.m_chArr(t)) &lt;&gt; 10</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>If t &lt; 0 Then t = 0</SourceLine>
   <SourceLine>m_iSelP1 = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iStop + 1</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And Asc(m_rtf.m_chArr(t)) &lt;&gt; 13</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>m_iSelP2 = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = m_iSelP1</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRefresh = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iTicksTripleClick = m_iTicksDoubleClick</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf (m_iKlikStart - iStop) &lt; 5 And Abs(m_iTicksDoubleClick - Ticks) &lt;= 20 Then 'Dubbelklik</SourceLine>
   <SourceLine>If Asc(m_rtf.m_chArr(iStop)) &gt; 32 Then</SourceLine>
   <SourceLine>t = iStop - 1</SourceLine>
   <SourceLine>While t &gt;= 0 And Asc(m_rtf.m_chArr(t)) &gt; 32</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>If t &lt; 0 Then t = 0</SourceLine>
   <SourceLine>m_iSelP1 = t</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>t = iStop + 1</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And Asc(m_rtf.m_chArr(t)) &gt; 32</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>m_iSelP2 = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = m_iSelP1</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRefresh = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iTicksTripleClick = m_iTicksDoubleClick</SourceLine>
   <SourceLine>ElseIf m_iKlikStart = iStop And m_rtf.GetHyperlink(iStop).Len &gt; 0 Then</SourceLine>
   <SourceLine>strHyperLink = m_rtf.GetHyperlink(iStop)</SourceLine>
   <SourceLine>If Not ShowURL(strHyperLink) Then</SourceLine>
   <SourceLine>ShowURL strHyperLink</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Not m_bReadOnly And m_iKlikStart = iStop And _</SourceLine>
   <SourceLine>(((m_rtf.m_cpArr(iStop).btAscSpecial = 0 Or m_rtf.m_cpArr(iStop).btAscSpecial = 9 Or m_rtf.m_cpArr(iStop).btAscSpecial &gt;= 32) And _</SourceLine>
   <SourceLine>m_rtf.m_cpArr(iStop).iFunctie &gt; 0 And m_rtf.ClickOnFunction(iStop)) Or _</SourceLine>
   <SourceLine>(iStop &gt; 0 And m_rtf.m_cpArr(iStop - 1).iFunctie &gt; 0 And X &lt; m_rtf.m_cpArr(iStop).iScreenX And m_rtf.ClickOnFunction(iStop - 1))) Then</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(iStop).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = iStop</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = iStop - 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iRedrawFromPos + 2</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRefresh = (m_iSelLen &gt; 0)</SourceLine>
   <SourceLine>If Not bRefresh And m_bCursorVisible Then</SourceLine>
   <SourceLine>DrawCursorAndMakeUndoPointIfNecessary</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iKlikStart &lt;= iStop Then</SourceLine>
   <SourceLine>m_iSelP1 = m_iKlikStart</SourceLine>
   <SourceLine>m_iSelP2 = iStop</SourceLine>
   <SourceLine>m_iSelStart = iStop</SourceLine>
   <SourceLine>m_iSelLen = iStop - m_iKlikStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelP1 = iStop</SourceLine>
   <SourceLine>m_iSelP2 = m_iKlikStart</SourceLine>
   <SourceLine>m_iSelStart = iStop</SourceLine>
   <SourceLine>m_iSelLen = m_iKlikStart - iStop</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bRefresh = bRefresh Or (m_iSelLen &gt; 0)</SourceLine>
   <SourceLine>If Not bRefresh Then</SourceLine>
   <SourceLine>DrawCursorAndMakeUndoPointIfNecessary</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iTicksDoubleClick = Ticks</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iKlikStart = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bRefresh Then</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>KeyDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1383614463</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function KeyDown(Key As String) As Boolean</SourceLine>
   <SourceLine>Dim bLeft As Boolean</SourceLine>
   <SourceLine>Dim bRight As Boolean</SourceLine>
   <SourceLine>Dim bUp As Boolean</SourceLine>
   <SourceLine>Dim bDown As Boolean</SourceLine>
   <SourceLine>Dim bTab As Boolean</SourceLine>
   <SourceLine>Dim bEnter As Boolean</SourceLine>
   <SourceLine>Dim bEsc As Boolean</SourceLine>
   <SourceLine>Dim bBackSpace As Boolean</SourceLine>
   <SourceLine>Dim bDelete As Boolean</SourceLine>
   <SourceLine>Dim bHome As Boolean</SourceLine>
   <SourceLine>Dim bEnd As Boolean</SourceLine>
   <SourceLine>Dim iAsc As Integer</SourceLine>
   <SourceLine>Dim bAsc As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim bCtrl As Boolean</SourceLine>
   <SourceLine>Dim strDescription As String</SourceLine>
   <SourceLine>Dim strKey As String</SourceLine>
   <SourceLine>Dim iX As Integer</SourceLine>
   <SourceLine>Dim iY As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iNewPos As Integer </SourceLine>
   <SourceLine>Dim iClosestPos As Integer</SourceLine>
   <SourceLine>Dim iClosestDiffX As Integer</SourceLine>
   <SourceLine>Dim iCurrentBottom As Integer</SourceLine>
   <SourceLine>Dim bKaptje As Boolean</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim bRequestRefresh As Boolean</SourceLine>
   <SourceLine>Dim iSelStart As Integer</SourceLine>
   <SourceLine>Dim iSelStop As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strKey = Key</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Special key?</SourceLine>
   <SourceLine>bTab = (iAsc = 9)</SourceLine>
   <SourceLine>bEnter = (iAsc = 13) Or Keyboard.AsyncKeyDown(&amp;h4C)</SourceLine>
   <SourceLine>bBackSpace = (iAsc = 8)</SourceLine>
   <SourceLine>bEsc = Keyboard.AsyncKeyDown(&amp;h35) And (iAsc = 27)</SourceLine>
   <SourceLine>bHome = Keyboard.AsyncKeyDown(&amp;h73) And (iAsc = 1)</SourceLine>
   <SourceLine>bEnd = Keyboard.AsyncKeyDown(&amp;h77) And (iAsc = 4)</SourceLine>
   <SourceLine>bDelete = Keyboard.AsyncKeyDown(&amp;h75) And (iAsc = 127)</SourceLine>
   <SourceLine>bLeft = Keyboard.AsyncKeyDown(&amp;h7B) And (iAsc = 28)</SourceLine>
   <SourceLine>bRight = Keyboard.AsyncKeyDown(&amp;h7C) And (iAsc = 29)</SourceLine>
   <SourceLine>bUp = Keyboard.AsyncKeyDown(&amp;h7E) And (iAsc = 30)</SourceLine>
   <SourceLine>bDown = Keyboard.AsyncKeyDown(&amp;h7D) And (iAsc = 31)</SourceLine>
   <SourceLine>bAsc = (iAsc &gt;= 32 And Not bDelete)</SourceLine>
   <SourceLine>bKaptje = Keyboard.AsyncKeyDown(33) And (iAsc = 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Ctrl combination?</SourceLine>
   <SourceLine>bCtrl = False</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>'On windows we work with the controlkey</SourceLine>
   <SourceLine>If Keyboard.ControlKey Then</SourceLine>
   <SourceLine>bCtrl = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'On windows ctrl combination don't always come in as the key itself, so we scan the keyboard for it</SourceLine>
   <SourceLine>If Keyboard.AsyncKeyDown(&amp;h00) Then</SourceLine>
   <SourceLine>strKey = "a"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h0B) Then</SourceLine>
   <SourceLine>strKey = "b"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h08) Then</SourceLine>
   <SourceLine>strKey = "c"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>'ElseIf Keyboard.AsyncKeyDown(&amp;h03) Then</SourceLine>
   <SourceLine>'strKey = "f"</SourceLine>
   <SourceLine>'iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h22) Then</SourceLine>
   <SourceLine>strKey = "i"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>'ElseIf Keyboard.AsyncKeyDown(&amp;h0C) Then</SourceLine>
   <SourceLine>'strKey = "p"</SourceLine>
   <SourceLine>'iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h20) Then</SourceLine>
   <SourceLine>strKey = "u"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h01) Then</SourceLine>
   <SourceLine>strKey = "s"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h09) Then</SourceLine>
   <SourceLine>strKey = "v"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h07) Then</SourceLine>
   <SourceLine>strKey = "x"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h06) Then</SourceLine>
   <SourceLine>strKey = "z"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h45) Then</SourceLine>
   <SourceLine>strKey = "+"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>ElseIf Keyboard.AsyncKeyDown(&amp;h4E) Or Keyboard.AsyncKeyDown(&amp;h1B) Then</SourceLine>
   <SourceLine>strKey = "-"</SourceLine>
   <SourceLine>iAsc = Asc(strKey)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If it wasn't 1 of the keys we are going to handle =&gt; just reset it</SourceLine>
   <SourceLine>If iAsc &gt;= 32 Then</SourceLine>
   <SourceLine>If (iAsc &gt;= Asc("a") And iAsc &lt;= Asc("z")) Or (iAsc &gt;= Asc("A") And iAsc &lt;= Asc("Z")) Or _</SourceLine>
   <SourceLine>(iAsc &gt;= 48 And iAsc &lt;= 57) Or iAsc = Asc("-") Or iAsc = Asc("+") Or bEnter Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bCtrl = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>If Keyboard.CommandKey Then</SourceLine>
   <SourceLine>'On OSX we work with the commandkey</SourceLine>
   <SourceLine>bCtrl = True</SourceLine>
   <SourceLine>m_bAddPuntjesToNextKeydown = False</SourceLine>
   <SourceLine>m_bAddKaptjeToNextKeydown = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bKaptje Then</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>m_bAddPuntjesToNextKeydown = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_bAddKaptjeToNextKeydown = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_bAddPuntjesToNextKeydown Then</SourceLine>
   <SourceLine>If bAsc Then</SourceLine>
   <SourceLine>If StrComp(strKey, "a", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ä"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "A", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ä"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "e", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ë"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "E", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ë"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "i", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ï"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "I", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ï"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "o", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ö"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "O", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ö"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "u", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ü"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "U", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ü"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "y", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ÿ"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "Y", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ÿ"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_bAddPuntjesToNextKeydown = False</SourceLine>
   <SourceLine>m_bAddKaptjeToNextKeydown = False</SourceLine>
   <SourceLine>ElseIf m_bAddKaptjeToNextKeydown Then</SourceLine>
   <SourceLine>If bAsc Then</SourceLine>
   <SourceLine>If StrComp(strKey, "a", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "â"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "A", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Â"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "e", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ê"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "E", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ê"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "i", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "î"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "I", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Î"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "o", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "ô"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "O", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Ô"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "u", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "û"</SourceLine>
   <SourceLine>ElseIf StrComp(strKey, "U", 0) = 0 Then</SourceLine>
   <SourceLine>strKey = "Û"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_bAddPuntjesToNextKeydown = False</SourceLine>
   <SourceLine>m_bAddKaptjeToNextKeydown = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Debugcode</SourceLine>
   <SourceLine>strDescription = ""</SourceLine>
   <SourceLine>If iAsc &lt;&gt; 0 Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Asc(" + Format(iAsc, "0") + ")" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bTab Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Tab" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bEnter Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Enter" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bBackSpace Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Backspace" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bEsc Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Esc" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bHome Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Home" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bEnd Then</SourceLine>
   <SourceLine>strDescription = strDescription + "End" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bDelete Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Delete" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bLeft Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Left" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bRight Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Right" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bUp Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Up" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bDown Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Down" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Shift-Key" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bCtrl Then</SourceLine>
   <SourceLine>strDescription = strDescription + "Ctrl-Key" + EndOfLine</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'System.DebugLog strDescription</SourceLine>
   <SourceLine>'End of debugcode</SourceLine>
   <SourceLine>m_bAutoScroll = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If KeyDown(strKey) Then</SourceLine>
   <SourceLine>'The user handled this key so we don't handle it anymore</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>ElseIf bCtrl Then</SourceLine>
   <SourceLine>'Its a controlkey</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If strKey = "a" Then</SourceLine>
   <SourceLine>ActionSelectAll</SourceLine>
   <SourceLine>ElseIf strKey = "b" Then</SourceLine>
   <SourceLine>ActionBold</SourceLine>
   <SourceLine>ElseIf strKey = "c" Then</SourceLine>
   <SourceLine>ActionCopy</SourceLine>
   <SourceLine>ElseIf strKey = "i" Then</SourceLine>
   <SourceLine>ActionItalic</SourceLine>
   <SourceLine>ElseIf strKey = "s" And Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>m_rtf.ExportMemoryMap ""</SourceLine>
   <SourceLine>ElseIf strKey = "u" Then</SourceLine>
   <SourceLine>ActionUnderline</SourceLine>
   <SourceLine>ElseIf strKey = "v" Then</SourceLine>
   <SourceLine>ActionPaste</SourceLine>
   <SourceLine>ElseIf strKey = "x" Then</SourceLine>
   <SourceLine>ActionCut</SourceLine>
   <SourceLine>ElseIf strKey = "z" Then</SourceLine>
   <SourceLine>ActionUndo</SourceLine>
   <SourceLine>ElseIf strKey = "+" Then </SourceLine>
   <SourceLine>ActionZoomIn</SourceLine>
   <SourceLine>ElseIf strKey = "-" Then</SourceLine>
   <SourceLine>ActionZoomOut</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bEnter Then</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_TABLES</SourceLine>
   <SourceLine>If m_iSelLen = 0 Then</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>ActionTable("addcell", -1, -1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ActionTable("addrow", -1, -1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_PAGEBREAK</SourceLine>
   <SourceLine>ActionInsertPageBreak</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bHome Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>'Select from this position to the beginning</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Goto the beginning</SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>m_iSelP2 = 0</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bEnd Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>'Select from this position to the end</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine>m_iSelStart = m_iSelP2</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>'Goto the end</SourceLine>
   <SourceLine>m_iSelP1 = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelP1</SourceLine>
   <SourceLine>m_iSelStart = m_iSelP1</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bLeft Or bRight Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>t = m_iSelStart</SourceLine>
   <SourceLine>If bLeft Then</SourceLine>
   <SourceLine>'Find the end of the previous word</SourceLine>
   <SourceLine>While t &gt; 0 And Asc(m_rtf.m_chArr(t - 1)) &lt;= 32</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>'Find the beginning of that previous word</SourceLine>
   <SourceLine>While t &gt; 0 And Asc(m_rtf.m_chArr(t - 1)) &gt; 32</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Find the beginning of the next word</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And Asc(m_rtf.m_chArr(t + 1)) &lt;= 32</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>'Find the beginning of that previous word</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And Asc(m_rtf.m_chArr(t + 1)) &gt; 32</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &lt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iNewPos = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>ChangeSelectionBy(iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ChangeCursorBy(iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bEnter Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>InsertChar(m_iSelStart, Chr(13), False)</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bTab Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>If m_iSelLen = 0 And iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iNewPos = m_iSelStart </SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound </SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>Do </SourceLine>
   <SourceLine>iNewPos = iNewPos - 1</SourceLine>
   <SourceLine>Loop Until iNewPos &lt;= 0 Or m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(iNewPos).iParagraph).TableCell &lt;&gt; iCell</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Do </SourceLine>
   <SourceLine>iNewPos = iNewPos + 1</SourceLine>
   <SourceLine>Loop Until iNewPos &gt;= iLast Or m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(iNewPos).iParagraph).TableCell &lt;&gt; iCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(iNewPos).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>While iNewPos &lt; iLast And _</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(iNewPos + 1).iParagraph).TableCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(iNewPos).iParagraph).TableCell</SourceLine>
   <SourceLine>iNewPos = iNewPos + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ChangeCursorBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>ElseIf Not m_bReadOnly Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>InsertChar(m_iSelStart, Chr(9), False)</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1 </SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bAsc Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>InsertChar(m_iSelStart, strKey, False)</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bDelete Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen = 0 And m_iSelStart &lt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>ChangeSelectionBy 1 </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>If m_iSelStart &gt; 0 Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelStart - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart + 1</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bBackSpace Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bRequestRefresh = False</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 And m_iSelP2 &gt; m_iSelStart Then</SourceLine>
   <SourceLine>iSelStart = m_iSelStart</SourceLine>
   <SourceLine>iSelStop = m_iSelP2</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iSelStart = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If RunUndoBulletProcedure Then</SourceLine>
   <SourceLine>bRequestRefresh = True</SourceLine>
   <SourceLine>If iSelStart &gt;= 0 Then</SourceLine>
   <SourceLine>m_iSelP1 = iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = iSelStop</SourceLine>
   <SourceLine>m_iSelStart = iSelStart</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_iSelLen = 0 And m_iSelStart &gt; 0 Then </SourceLine>
   <SourceLine>ChangeSelectionBy -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>If m_iSelStart &gt; 0 Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelStart - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart + 1</SourceLine>
   <SourceLine>bRequestRefresh = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bRequestRefresh Then</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bUp Then</SourceLine>
   <SourceLine>iX = m_rtf.m_cpArr(m_iSelStart).iLeft + 2</SourceLine>
   <SourceLine>iY = m_rtf.m_cpArr(m_iSelStart).iBottom</SourceLine>
   <SourceLine>t = m_iSelStart</SourceLine>
   <SourceLine>While t &gt; 0 And iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &lt; 0 Then </SourceLine>
   <SourceLine>t = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>iClosestPos = t</SourceLine>
   <SourceLine>iClosestDiffX = Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX)</SourceLine>
   <SourceLine>While t &gt; 0 And iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>If Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX) &lt; iClosestDiffX Then</SourceLine>
   <SourceLine>iClosestPos = t</SourceLine>
   <SourceLine>iClosestDiffX = Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = iClosestPos</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iNewPos = t </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>ChangeSelectionBy(iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ChangeCursorBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bDown Then</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>iX = m_rtf.m_cpArr(m_iSelStart).iLeft + 2</SourceLine>
   <SourceLine>iY = m_rtf.m_cpArr(m_iSelStart).iBottom</SourceLine>
   <SourceLine>t = m_iSelStart</SourceLine>
   <SourceLine>While t &lt;= iLast And iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; iLast Then</SourceLine>
   <SourceLine>t = iLast</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>iClosestPos = t</SourceLine>
   <SourceLine>iClosestDiffX = Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX)</SourceLine>
   <SourceLine>While t &lt; iLast And iY = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>If Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX) &lt; iClosestDiffX Then</SourceLine>
   <SourceLine>iClosestPos = t</SourceLine>
   <SourceLine>iClosestDiffX = Abs(m_rtf.m_cpArr(t).iLeft + 2 - iX)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = iClosestPos</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iNewPos = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>ChangeSelectionBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ChangeCursorBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bHome Or bEnd Then</SourceLine>
   <SourceLine>If bHome Then</SourceLine>
   <SourceLine>t = m_iSelStart</SourceLine>
   <SourceLine>iCurrentBottom = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>While t &gt; 0 And m_rtf.m_cpArr(t - 1).iBottom = iCurrentBottom</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; 0 Then t = t + 1</SourceLine>
   <SourceLine>iNewPos = t</SourceLine>
   <SourceLine>ElseIf bEnd Then</SourceLine>
   <SourceLine>t = m_iSelStart</SourceLine>
   <SourceLine>iCurrentBottom = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And m_rtf.m_cpArr(t + 1).iBottom = iCurrentBottom</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iNewPos = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>ChangeSelectionBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ChangeCursorBy (iNewPos - m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bLeft Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>'Select the previous character on top of the allready selected text</SourceLine>
   <SourceLine>If m_iSelStart &gt; 0 Then</SourceLine>
   <SourceLine>ChangeSelectionBy -1</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_iSelStart &gt; 0 Then</SourceLine>
   <SourceLine>'Goto the previous position</SourceLine>
   <SourceLine>ChangeCursorBy -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bRight Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>If Keyboard.ShiftKey Then</SourceLine>
   <SourceLine>'Select the next character on top of the allready selected text</SourceLine>
   <SourceLine>If m_iSelStart &lt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>ChangeSelectionBy 1</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_iSelStart &lt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>'Goto the next position</SourceLine>
   <SourceLine>ChangeCursorBy 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <HookInstance>
  <ItemName>MouseWheel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>755777535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function MouseWheel(X As Integer, Y As Integer, deltaX as Integer, deltaY as Integer) As Boolean</SourceLine>
   <SourceLine>#Pragma Unused X</SourceLine>
   <SourceLine>#Pragma Unused Y</SourceLine>
   <SourceLine>#Pragma Unused deltaX</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim iOldValue As Integer</SourceLine>
   <SourceLine>Dim iNewValue As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iOldValue = m_iScrollValue</SourceLine>
   <SourceLine>iNewValue = iOldValue + (deltaY * 10)</SourceLine>
   <SourceLine>If iNewValue &lt; 0 Then</SourceLine>
   <SourceLine>iNewValue = 0</SourceLine>
   <SourceLine>ElseIf iNewValue &gt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>iNewValue = m_iScrollMaximum</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOldValue &lt;&gt; iNewValue Then</SourceLine>
   <SourceLine>m_bAutoScroll = False</SourceLine>
   <SourceLine>m_iScrollValue = iNewValue</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </HookInstance>
 <Method>
  <ItemName>GetImage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>347027455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetImage()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim iMaxWidth As Integer</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iCurrentPos As Integer</SourceLine>
   <SourceLine>Dim iMaxPos As Integer</SourceLine>
   <SourceLine>Dim iMinPos As Integer</SourceLine>
   <SourceLine>Dim dMSStart As Double</SourceLine>
   <SourceLine>Dim dMSTussenStop As Double</SourceLine>
   <SourceLine>Dim iPicHeight As Integer</SourceLine>
   <SourceLine>Dim iPicWidth As Integer</SourceLine>
   <SourceLine>Dim picRtf As Picture</SourceLine>
   <SourceLine>Dim iFrom As Integer</SourceLine>
   <SourceLine>Dim iTo As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iFirstCharacter As Integer</SourceLine>
   <SourceLine>Dim bResizedPictures As Boolean</SourceLine>
   <SourceLine>Dim wnd As Window</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine>Dim dScaleBase As Double</SourceLine>
   <SourceLine>Dim dScaleOriginalX As Double</SourceLine>
   <SourceLine>Dim dScaleOriginalY As Double</SourceLine>
   <SourceLine>Dim tXY As Integer</SourceLine>
   <SourceLine>Dim iX1 As Integer</SourceLine>
   <SourceLine>Dim iX2 As Integer</SourceLine>
   <SourceLine>Dim iY As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMSStart = Microseconds</SourceLine>
   <SourceLine>iPicHeight = Self.Height</SourceLine>
   <SourceLine>iPicWidth = Self.Width</SourceLine>
   <SourceLine>CheckSelectionBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>wnd = Window</SourceLine>
   <SourceLine>GetScaleFactor(iScale, dScaleBase)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPicWidth &lt;= 0 Or iPicHeight &lt;= 0 Then</SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>m_pic = wnd.BitmapForCaching(1, 1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_pic = New Picture(1, 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If IsNull(m_pic) Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>m_pic = wnd.BitmapForCaching(iPicWidth, iPicHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_pic = New Picture(iPicWidth, iPicHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g = m_pic.Graphics</SourceLine>
   <SourceLine>g.AntiAlias = m_rtf.AntiAlias</SourceLine>
   <SourceLine>dScaleOriginalX = g.ScaleX</SourceLine>
   <SourceLine>dScaleOriginalY = g.ScaleY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>g.DrawRect(0, 0, iPicWidth, iPicHeight)</SourceLine>
   <SourceLine>'Draw layoutcontrols</SourceLine>
   <SourceLine>If m_bLayoutBar And Not m_bReadOnly Then</SourceLine>
   <SourceLine>m_iTopText = 29</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iTopText = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rtf.NextRedrawFull Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>bResizedPictures = False</SourceLine>
   <SourceLine>iMaxWidth = iPicWidth - 20</SourceLine>
   <SourceLine>If iMaxWidth &lt; 22 Then</SourceLine>
   <SourceLine>iMaxWidth = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.CheckEnMeetRTF(iMaxWidth, m_iRedrawFromPos, m_iRedrawToPos, False)</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>'How much ScrollBar do we need?</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>If iLast &lt; 0 Or (m_rtf.m_cpArr(iLast).iBottom + 5) &lt;= (iPicHeight - m_iTopText) Then</SourceLine>
   <SourceLine>m_iScrollMaximum = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iScrollMaximum = (m_rtf.m_cpArr(iLast).iBottom + 5) - (iPicHeight - m_iTopText)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iScrollValue &gt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollMaximum</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iScrollMaximum &gt; 0 And m_bAutoScroll Then</SourceLine>
   <SourceLine>iMinPos = m_iTopText + m_rtf.m_cpArr(m_iSelStart).iHeight</SourceLine>
   <SourceLine>iMaxPos = iPicHeight - 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentPos = m_rtf.m_cpArr(m_iSelStart).iBottom - (2 + m_iScrollValue) + m_iTopText</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iCurrentPos = iCurrentPos + m_rtf.m_tcArr(iCell).iTop </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCurrentPos &gt; iMaxPos Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollValue + (iCurrentPos - iMaxPos)</SourceLine>
   <SourceLine>If m_iScrollValue &gt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollMaximum</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>ElseIf iCurrentPos &lt; iMinPos Then</SourceLine>
   <SourceLine>m_iScrollValue = m_iScrollValue - (iMinPos - iCurrentPos)</SourceLine>
   <SourceLine>If m_iScrollValue &lt; 0  Then</SourceLine>
   <SourceLine>m_iScrollValue = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'System.DebugLog "CurrentY: " + Format(iCurrentPos, "0") + "  Max Y: " + Format(iMaxPos, "0") + "   Min Y: " + Format(iMinPos, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Draw the visible RTF Part</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>iFrom = -1</SourceLine>
   <SourceLine>iTo = iLast</SourceLine>
   <SourceLine>iFirstCharacter = -1</SourceLine>
   <SourceLine>Dim iBottomLastPossibleVisibleLine As Integer</SourceLine>
   <SourceLine>iBottomLastPossibleVisibleLine = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To iLast </SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_rtf.m_tcArr.Ubound Then</SourceLine>
   <SourceLine>If iFirstCharacter &lt; 0 Then</SourceLine>
   <SourceLine>iFirstCharacter = t - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_rtf.m_tcArr(iCell).iTop &gt; m_iScrollValue + iPicHeight Then</SourceLine>
   <SourceLine>iTo = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>ElseIf iFrom = -1 And m_rtf.m_tcArr(iCell).iTop + m_rtf.m_tcArr(iCell).iHeight &gt;= m_iScrollValue Then</SourceLine>
   <SourceLine>iFrom = iFirstCharacter</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFirstCharacter = -1</SourceLine>
   <SourceLine>If iBottomLastPossibleVisibleLine = 0 Then</SourceLine>
   <SourceLine>If (m_rtf.m_cpArr(t).iBottom - m_rtf.m_cpArr(t).iHeight) &gt; m_iScrollValue + iPicHeight Then</SourceLine>
   <SourceLine>iBottomLastPossibleVisibleLine = m_rtf.m_cpArr(t).iBottom</SourceLine>
   <SourceLine>ElseIf iFrom = -1 And m_rtf.m_cpArr(t).iBottom &gt;= m_iScrollValue Then</SourceLine>
   <SourceLine>iFrom = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_rtf.m_cpArr(t).iBottom &lt;&gt; iBottomLastPossibleVisibleLine Then</SourceLine>
   <SourceLine>iTo = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>System.DebugLog "GetImage.RequestDrawRTF executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iFrom &gt;= 0 And iTo &gt;= 0 Then</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>picRtf = m_rtf.DrawRTF(iPicWidth - 17, iPicHeight - (2 + m_iTopText), _</SourceLine>
   <SourceLine>iFrom, iTo, m_iScrollValue, m_iSelP1, m_iSelP2, _</SourceLine>
   <SourceLine>False, m_bReadOnly, (256 * 256 * 256), bResizedPictures, Window, Nil)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_bCursorVisible = False</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>g.FillRect(1, m_iTopText + 1, iPicWidth - 17, iPicHeight - (2 + m_iTopText))</SourceLine>
   <SourceLine>g.DrawPicture(picRtf, 1, m_iTopText)</SourceLine>
   <SourceLine>m_iCurrentDrawingSpeed = Round(((Microseconds - dMSTussenStop) / 1000.0))</SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRtf executed in " + Format(m_iCurrentDrawingSpeed, "0") + " ms"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Draw ScrollBar</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>'If m_bScrollbar And (m_iScrollMaximum &gt; 0 Or Not m_bReadOnly) Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE </SourceLine>
   <SourceLine>g.FillRect(iPicWidth - 17, m_iTopText + 1, 16, iPicHeight - (2 + m_iTopText))</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>If m_bScrollbar And m_iScrollMaximum &gt; 0 Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>g.DrawRect(iPicWidth - 17, m_iTopText + 1, 16, iPicHeight - (2 + m_iTopText))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iScrollValue &gt; 0 Then</SourceLine>
   <SourceLine>m_bMinActive = True</SourceLine>
   <SourceLine>g.ForeColor = &amp;c222222</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tXY = 0 To (4 * iScale)</SourceLine>
   <SourceLine>iX1 = (iPicWidth * iScale) - ((13 * iScale) - tXY)</SourceLine>
   <SourceLine>iY = ((m_iTopText + 8) * iScale) - tXY</SourceLine>
   <SourceLine>iX2 = (iPicWidth * iScale) - ((5 * iScale) + tXY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawLine(iX1, iY, iX2, iY)</SourceLine>
   <SourceLine>Next tXY </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>g.DrawLine((iPicWidth - 17) * iScale, (m_iTopText + 11) * iScale, _</SourceLine>
   <SourceLine>(iPicWidth - 2) * iScale, (m_iTopText + 11) * iScale)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iScrollValue &lt; m_iScrollMaximum Then</SourceLine>
   <SourceLine>m_bPlusActive = True</SourceLine>
   <SourceLine>g.ForeColor = &amp;c222222</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tXY = 0 To (4 * iScale)</SourceLine>
   <SourceLine>iX1 = (iPicWidth * iScale) - ((13 * iScale) - tXY)</SourceLine>
   <SourceLine>iY = (iPicHeight * iScale) - (((4 * iScale) - tXY) + (4 * iScale))</SourceLine>
   <SourceLine>iX2 = (iPicWidth * iScale) - ((5 * iScale) + tXY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawLine(iX1, iY, iX2, iY)</SourceLine>
   <SourceLine>Next tXY </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>g.DrawLine((iPicWidth - 17) * iScale, (iPicHeight - 11) * iScale, _</SourceLine>
   <SourceLine>(iPicWidth - 2) * iScale, (iPicHeight - 11) * iScale)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cAAAAAA</SourceLine>
   <SourceLine>iPos = 13 + m_iTopText + (((iPicHeight - (28 + m_iTopText)) * m_iScrollValue) / m_iScrollMaximum)</SourceLine>
   <SourceLine>g.FillOval((iPicWidth - 11) * iScale, (iPos * iScale), (5 * iScale), (3 * iScale))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawScrollbar executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Draw layoutbar</SourceLine>
   <SourceLine>If m_bLayoutBar And Not m_bReadOnly Then</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>DrawLayoutBar(g)</SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawLayoutBar executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'UpdateTouchbar</SourceLine>
   <SourceLine>UpdateRTFTouchbar</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Loop Until Not bResizedPictures</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iRedrawFromPos = -1</SourceLine>
   <SourceLine>m_iRedrawToPos = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetImage executed in " + Format(Round(((Microseconds - dMsStart) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>Catch err As OutOfBoundsException</SourceLine>
   <SourceLine>System.DebugLog "OutOfBoundsException on RTF_GetImage: " + err.Message</SourceLine>
   <SourceLine>If iPicWidth &lt;= 0 Or iPicHeight &lt;= 0 Then</SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>m_pic = Window.BitmapForCaching(1, 1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_pic = New Picture(1, 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>m_pic = Window.BitmapForCaching(iPicWidth, iPicHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_pic = New Picture(iPicWidth, iPicHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iRedrawFromPos = -1</SourceLine>
   <SourceLine>m_iRedrawToPos = -1</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>395812863</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>// Calling the overridden superclass constructor.</SourceLine>
   <SourceLine>m_rtf = New clsRTFBox_Data</SourceLine>
   <SourceLine>Super.Constructor</SourceLine>
   <SourceLine>AddHandler m_rtf.FillFunctionValue, AddressOf Event_FillFunctionValue</SourceLine>
   <SourceLine>AddHandler m_rtf.GetDefaultStyle, AddressOf Event_GetDefaultStyle</SourceLine>
   <SourceLine>AddHandler m_rtf.ShowURL, AddressOf Event_ShowURL</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iKlikStart = -1</SourceLine>
   <SourceLine>m_bScrollbar = True</SourceLine>
   <SourceLine>LoadLayoutWidth(True)</SourceLine>
   <SourceLine>m_iIndex = AddMySelf(Self)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4096</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddMySelf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>817743871</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function AddMySelf(rtf As clsRTFBox) As Integer</SourceLine>
   <SourceLine>If IsNull(m_tmr) Then</SourceLine>
   <SourceLine>m_tmr = New Timer</SourceLine>
   <SourceLine>AddHandler m_tmr.Action, AddressOf TimerAction</SourceLine>
   <SourceLine>'Beetje mee moosten om de responsiveness te testen van grote testen</SourceLine>
   <SourceLine>m_tmr.Period = 100</SourceLine>
   <SourceLine>m_tmr.Enabled = True</SourceLine>
   <SourceLine>m_tmr.Mode = m_tmr.ModeMultiple</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtfArr.Append(rtf)</SourceLine>
   <SourceLine>m_iLastRTFId = m_iLastRTFId + 1</SourceLine>
   <SourceLine>m_iArrRTFId.Append(m_iLastRTFId)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_iLastRTFId</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>rtf As clsRTFBox</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>TimerAction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1371834367</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub TimerAction(tmr As Timer)</SourceLine>
   <SourceLine>#Pragma Unused tmr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_rtfArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_rtfArr(t).m_bRequestRefresh Then</SourceLine>
   <SourceLine>m_rtfArr(t).m_bRequestRefresh = False</SourceLine>
   <SourceLine>m_rtfArr(t).Refresh</SourceLine>
   <SourceLine>ElseIf m_rtfArr(t).m_iSelectingCurrentStop &gt;= 0 Then</SourceLine>
   <SourceLine>If System.MouseDown Then</SourceLine>
   <SourceLine>m_rtfArr(t).SelectionChanging</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtfArr(t).m_iSelectingCurrentStop = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf (m_rtfArr(t).m_bGotFocus Or m_rtfArr(t).m_bCursorVisible) And (Ticks - m_iTicksLastCursorUpdate) &gt; CURSORTICKS Then</SourceLine>
   <SourceLine>m_rtfArr(t).DrawCursorAndMakeUndoPointIfNecessary</SourceLine>
   <SourceLine>m_iTicksLastCursorUpdate = Ticks</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>tmr As Timer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawCursorAndMakeUndoPointIfNecessary</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>203278335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawCursorAndMakeUndoPointIfNecessary(bWithRefresh As Boolean = True)</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim strRtf As String</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iX As Integer</SourceLine>
   <SourceLine>Dim iY1 As Integer</SourceLine>
   <SourceLine>Dim iY2 As Integer</SourceLine>
   <SourceLine>Dim iCurPos As Integer</SourceLine>
   <SourceLine>Dim bRunning As Boolean</SourceLine>
   <SourceLine>Dim bErrors As Boolean</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine>Dim dScaleBase As Double</SourceLine>
   <SourceLine>Dim dOriginalScaleX As Double</SourceLine>
   <SourceLine>Dim dOriginalScaleY As Double</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(m_pic) Then</SourceLine>
   <SourceLine>GetScaleFactor(iScale, dScaleBase)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g = m_pic.Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelStart &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>m_iSelP2 = 0</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>ElseIf m_iSelStart &gt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_bCursorVisible Then</SourceLine>
   <SourceLine>If IsInvisible Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCFF</SourceLine>
   <SourceLine>ElseIf m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>g.ForeColor = m_rtf.Table_GetCellColor(m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iSelStart &lt;= 0 And m_rtf.m_cpArr.Ubound &lt;= 0 Then</SourceLine>
   <SourceLine>iX = 3</SourceLine>
   <SourceLine>iY1 = 4 + m_iTopText - m_iScrollValue</SourceLine>
   <SourceLine>iY2 = iY1 + GetFontSize + 2</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCurPos = m_iSelStart</SourceLine>
   <SourceLine>iX = m_rtf.m_cpArr(m_iSelStart).iLeft</SourceLine>
   <SourceLine>iY1 = (2 + m_iTopText - m_iScrollValue + m_rtf.m_cpArr(m_iSelStart).iBottom) - m_rtf.m_cpArr(m_iSelStart).iHeight</SourceLine>
   <SourceLine>iY2 = (1 + m_iTopText - m_iScrollValue + m_rtf.m_cpArr(m_iSelStart).iBottom)</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>iX = iX + m_rtf.GetTableCellLeft(m_iSelStart)</SourceLine>
   <SourceLine>iY1 = iY1 + m_rtf.GetTableCellTop(m_iSelStart)</SourceLine>
   <SourceLine>iY2 = iY2 + m_rtf.GetTableCellTop(m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>dOriginalScaleX = g.ScaleX</SourceLine>
   <SourceLine>dOriginalScaleY = g.ScaleY</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.AntiAlias = False</SourceLine>
   <SourceLine>For t = 1 To iScale</SourceLine>
   <SourceLine>g.DrawLine((iX * iScale) + (t - 1), iY1 * iScale, (iX * iScale) + (t - 1), iY2 * iScale)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>g.AntiAlias = AntiAlias</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dOriginalScaleX</SourceLine>
   <SourceLine>g.ScaleY = dOriginalScaleY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly And m_bLayoutBar Then</SourceLine>
   <SourceLine>DrawLayoutBar(g)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bWithRefresh Then</SourceLine>
   <SourceLine>Super.Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_bCursorVisible = Not m_bCursorVisible</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_bChangedSinceUndo And (Ticks - m_iTicksLastUndo) &gt; 900 And (Ticks - m_iTicksLastDirtyAction) &gt; 90 Then</SourceLine>
   <SourceLine>'Changed</SourceLine>
   <SourceLine>strRtf = m_rtf.GetRTF(False)</SourceLine>
   <SourceLine>If m_strArrUndoRTF.Ubound &gt; 2 Then</SourceLine>
   <SourceLine>m_strArrUndoRTF.Remove(0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_strArrUndoRTF.Append(strRtf)</SourceLine>
   <SourceLine>m_bChangedSinceUndo = False</SourceLine>
   <SourceLine>m_iTicksLastUndo = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ActionSpellCheck</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.GetSpellCheckStatus(bRunning, bErrors)</SourceLine>
   <SourceLine>If Not bRunning And bErrors Then</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bWithRefresh As Boolean = True</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertionPosAtXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>303497215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function InsertionPosAtXY(iX As Integer, iY As Integer) As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iFirst As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iClosestDiffX As Integer</SourceLine>
   <SourceLine>Dim iDiff As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iFirstTablePos As Integer</SourceLine>
   <SourceLine>Dim iLastTablePos As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>iFirst = 0</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>iCell = m_rtf.GetTableCellOnXY(iX, iY - m_iTopText + m_iScrollValue)</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iFirstTablePos = m_rtf.Table_GetFirstCharacterInThisTableCell(iCell)</SourceLine>
   <SourceLine>iLastTablePos = m_rtf.Table_GetLastCharacterInThisTableCell(iCell)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFirstTablePos = -1</SourceLine>
   <SourceLine>iLastTablePos = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iY = iY - m_iTopText</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &gt;= 0 And iFirstTablePos &gt;= 0 And iLastTablePos &gt;= 0 Then</SourceLine>
   <SourceLine>iFirst = iFirstTablePos</SourceLine>
   <SourceLine>iLast = iLastTablePos</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While iLast &gt;= 0 And m_rtf.m_cpArr(iLast).iScreenX = 0 And m_rtf.m_cpArr(iLast).iScreenY = 0 </SourceLine>
   <SourceLine>iLast = iLast - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>While iFirst &lt;= iLast And m_rtf.m_cpArr(iFirst).iScreenX = 0 And m_rtf.m_cpArr(iFirst).iScreenY = 0 </SourceLine>
   <SourceLine>iFirst = iFirst + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iLast &gt;= 0 And iFirst &lt;= iLast Then</SourceLine>
   <SourceLine>If iY &gt; m_rtf.m_cpArr(iLast).iScreenY Then</SourceLine>
   <SourceLine>If iLast = m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iRtVal = iLast</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>For t = iFirst To iLast</SourceLine>
   <SourceLine>If iY &lt;= m_rtf.m_cpArr(t).iScreenY + 2 And _</SourceLine>
   <SourceLine>iY &gt;= m_rtf.m_cpArr(t).iScreenY - (m_rtf.m_cpArr(t).iHeight + 1) Then</SourceLine>
   <SourceLine>If iX &gt;= m_rtf.m_cpArr(t).iScreenX - (m_rtf.m_cpArr(t).iWidth / 4) And _</SourceLine>
   <SourceLine>iX &lt;= m_rtf.m_cpArr(t).iScreenX + (m_rtf.m_cpArr(t).iWidth * 3 / 4) Then</SourceLine>
   <SourceLine>iRtVal = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iDiff = Abs(iX - (m_rtf.m_cpArr(t).iScreenX- (m_rtf.m_cpArr(t).iWidth / 4)))</SourceLine>
   <SourceLine>If iRtVal = 0 Or iDiff &lt; iClosestDiffX Then</SourceLine>
   <SourceLine>iRtVal = t</SourceLine>
   <SourceLine>iClosestDiffX = iDiff</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iRtVal &gt; iLast Then</SourceLine>
   <SourceLine>iRtVal = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 And m_iSelStart = m_iSelP1 Then</SourceLine>
   <SourceLine>CorrectPositionDownIfFunction(iRtVal)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>CorrectPositionUpIfFunction(iRtVal)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'System.DebugLog "InsertionPosAtXY(" + Format(iX, "0") + "-" + Format(iY + m_iScrollValue, "0") + "), " + _</SourceLine>
   <SourceLine>'"Cell(" + Format(iCell, "-0") + ", " + Format(iFirstTablePos, "0") + ", " + Format(iLastTablePos, "0") + ") " + _</SourceLine>
   <SourceLine>'"Returns position " + Format(iRtVal, "0")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iX As Integer, iY As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1482070015</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertChar(ByRef iPos As Integer, strKey As String, bWithRefresh As Boolean)</SourceLine>
   <SourceLine>ReDim m_iArrChangedBullets(-1)</SourceLine>
   <SourceLine>m_strBullet = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, strKey)</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelStart</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart + 1</SourceLine>
   <SourceLine>If strKey = Chr(13) Then</SourceLine>
   <SourceLine>RunBulletProcedure(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bWithRefresh Then</SourceLine>
   <SourceLine>Super.Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer, strKey As String, bWithRefresh As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>70236159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRTF() As String</SourceLine>
   <SourceLine>Return m_rtf.GetRTF</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>SelectionChanging</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>695128063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SelectionChanging()</SourceLine>
   <SourceLine>Dim iStop As Integer</SourceLine>
   <SourceLine>Dim iX As Integer</SourceLine>
   <SourceLine>Dim iY As Integer</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>Dim dMsStop As Double</SourceLine>
   <SourceLine>Dim dMs As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMs = Microseconds</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iX = System.MouseX - m_iSelectingXDiff</SourceLine>
   <SourceLine>iY = System.MouseY - m_iSelectingYDiff</SourceLine>
   <SourceLine>If iX &lt; 2 Then </SourceLine>
   <SourceLine>iX = 2</SourceLine>
   <SourceLine>ElseIf iX &gt; Self.Width - 2 Then</SourceLine>
   <SourceLine>iX = Self.Width - 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iStop = InsertionPosAtXY(iX, iY)</SourceLine>
   <SourceLine>If iStop &lt;&gt; m_iSelectingCurrentStop Then</SourceLine>
   <SourceLine>System.DebugLog "X: " + Format(iX, "-0") + "    Y: " + Format(iY, "-0") + "    =&gt; " + Format(iStop, "0")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelectingCurrentStop = iStop</SourceLine>
   <SourceLine>'m_iSelP1 = m_iKlikStart</SourceLine>
   <SourceLine>'m_iSelP2 = iStop</SourceLine>
   <SourceLine>If m_iKlikStart &lt;= iStop Then</SourceLine>
   <SourceLine>m_iSelP1 = m_iKlikStart</SourceLine>
   <SourceLine>m_iSelP2 = iStop</SourceLine>
   <SourceLine>m_iSelStart = iStop</SourceLine>
   <SourceLine>m_iSelLen = iStop - m_iKlikStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelP1 = iStop</SourceLine>
   <SourceLine>m_iSelP2 = m_iKlikStart</SourceLine>
   <SourceLine>m_iSelStart = iStop</SourceLine>
   <SourceLine>m_iSelLen = m_iKlikStart - iStop</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RefreshWithoutRecalculate(True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>dMsStop = Microseconds</SourceLine>
   <SourceLine>'System.DebugLog "SelectionChanging finished in: " + Format(Round(((dMsStop - dMs) / 1000)), "0") + " ms"</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChangeSelectionBy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>337407999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ChangeSelectionBy(iChange As Integer)</SourceLine>
   <SourceLine>Dim iStop As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelStart = m_iSelP2 Then</SourceLine>
   <SourceLine>iStop = m_iSelP1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iStop = m_iSelP2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelStart + iChange &gt;= 0 And m_iSelStart + iChange &lt;= m_rtf.m_chArr.Ubound And m_rtf.m_chArr(m_iSelStart + iChange) = Chr(10) Then</SourceLine>
   <SourceLine>If iChange &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + iChange</SourceLine>
   <SourceLine>If m_iSelStart &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>ElseIf m_iSelStart &gt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iChange &lt; 0 Then</SourceLine>
   <SourceLine>CorrectPositionDownIfFunction(m_iSelStart)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>CorrectPositionUpIfFunction(m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iStop = m_iSelP2 Then</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_iSelP2 &lt; m_iSelP1 Then</SourceLine>
   <SourceLine>iStop = m_iSelP1</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelP2</SourceLine>
   <SourceLine>m_iSelP2 = iStop</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iChange As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DeleteCurrentSelection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>561151999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DeleteCurrentSelection()</SourceLine>
   <SourceLine>Dim bSkipNext As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>CheckSelectionBounds</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>bSkipNext = False</SourceLine>
   <SourceLine>If m_iSelP1 &lt;= 0 And m_iSelP2 &gt;= m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>m_rtf.DeleteAllAndSetStartData(m_iSelStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>m_iSelP2 = 0</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>ElseIf m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_rtf.m_chArr(m_iSelP2) = Chr(10) Then</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelP2 - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While m_iSelP2 &gt; m_iSelP1</SourceLine>
   <SourceLine>If m_rtf.m_chArr(m_iSelP2) = Chr(10) And m_rtf.m_chArr(m_iSelP2 - 1) = Chr(13) And _</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelP2).iParagraph).TableCell &lt;&gt; m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelP2 - 1).iParagraph).TableCell  Then</SourceLine>
   <SourceLine>bSkipNext = True</SourceLine>
   <SourceLine>ElseIf bSkipNext Then</SourceLine>
   <SourceLine>bSkipNext = False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelP2 - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If Not bSkipNext Then</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iSelP2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelStart = m_iSelP1</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelP1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionSelectAll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1977139199</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionSelectAll()</SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>m_iSelP2 = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1802463231</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionBold()</SourceLine>
   <SourceLine>Dim bBold As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bBold = Not IsBold</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetBold(t) = bBold</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextBold(m_iSelStart, bBold)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1859350527</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionUnderline(iStyle As Integer = 0)</SourceLine>
   <SourceLine>Dim bUnderline As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bUnderline = Not IsUnderline(iStyle)</SourceLine>
   <SourceLine>If iStyle = 0 Then</SourceLine>
   <SourceLine>iStyle = clsRTFBox_Data.STYLE_UNDERLINE</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If bUnderline Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetUnderline(t) = iStyle</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetUnderline(t) = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>ElseIf bUnderline Then</SourceLine>
   <SourceLine>m_rtf.SetNextUnderline(m_iSelStart, iStyle)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextUnderline(m_iSelStart, 0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iStyle As Integer = 0</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1934170111</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionItalic()</SourceLine>
   <SourceLine>Dim bItalic As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bItalic = Not IsItalic</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetItalic(t) = bItalic</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextItalic(m_iSelStart, bItalic)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RefreshWithoutRecalculate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>661618687</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RefreshWithoutRecalculate(bHard As Boolean = False)</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iRedrawFromPos</SourceLine>
   <SourceLine>If bHard Then</SourceLine>
   <SourceLine>m_bRequestRefresh = False</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>RequestRefresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bHard As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionCopy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>910544895</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionCopy()</SourceLine>
   <SourceLine>Dim strText As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim clp As Clipboard</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>strText = ""</SourceLine>
   <SourceLine>For t = m_iSelP1 To m_iSelP2 - 1</SourceLine>
   <SourceLine>If m_rtf.m_chArr(t) &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>strText = strText + m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>If m_rtf.m_chArr(t) = Chr(13) Then</SourceLine>
   <SourceLine>strText = strText + Chr(10)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>clp = New Clipboard</SourceLine>
   <SourceLine>clp.Text = strText</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionPaste</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1789657087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionPaste()</SourceLine>
   <SourceLine>Dim strText As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim clp As Clipboard</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>clp = New Clipboard</SourceLine>
   <SourceLine>If clp.TextAvailable Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strText = clp.Text</SourceLine>
   <SourceLine>If strText.Left(6) = "{\rtf1" And strText.Right(1) = "}" Then</SourceLine>
   <SourceLine>m_rtf.InsertRTF(m_iSelStart, strText)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.InsertText(m_iSelStart, strText)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'strText = strText.ReplaceAll(Chr(13) + Chr(10), Chr(13)).ReplaceAll(Chr(10), Chr(13))</SourceLine>
   <SourceLine>'For t = 1 To strText.Len</SourceLine>
   <SourceLine>'m_rtf.InsertChar(m_iSelStart, strText.Mid(t, 1))</SourceLine>
   <SourceLine>'m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>'Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>ElseIf clsRTFBox_Data.ALLOW_PICTURES And clp.PictureAvailable Then</SourceLine>
   <SourceLine>InsertPicture(clp.Picture)</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionCut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>389138431</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionCut()</SourceLine>
   <SourceLine>Dim strText As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim clp As Clipboard</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 And Not m_bReadOnly Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>strText = ""</SourceLine>
   <SourceLine>For t = m_iSelP1 To m_iSelP2 - 1</SourceLine>
   <SourceLine>If m_rtf.m_chArr(t) &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>strText = strText + m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>If m_rtf.m_chArr(t) = Chr(13) Then</SourceLine>
   <SourceLine>strText = strText + Chr(10)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>clp = New Clipboard</SourceLine>
   <SourceLine>clp.Text = strText</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = iRefreshFrom + 1</SourceLine>
   <SourceLine>Super.Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionLayoutBar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1284179967</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionLayoutBar()</SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>m_bLayoutBar = (Not m_bLayoutBar)</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawLayoutBar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>279982079</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawLayoutBar(g As Graphics)</SourceLine>
   <SourceLine>Dim iRelief As Integer</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine>Dim dFontSize As Double</SourceLine>
   <SourceLine>Dim clTextColor As Color</SourceLine>
   <SourceLine>Dim iAlign As Integer</SourceLine>
   <SourceLine>Dim iArrTabstops() As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iTS As Integer</SourceLine>
   <SourceLine>Dim iFactor As Integer</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine>Dim dScaleBase As Double</SourceLine>
   <SourceLine>Dim dScaleOriginalX As Double</SourceLine>
   <SourceLine>Dim dScaleOriginalY As Double</SourceLine>
   <SourceLine>Dim tXY As Integer</SourceLine>
   <SourceLine>Dim iStartPos As Integer</SourceLine>
   <SourceLine>Dim iX1 As Integer</SourceLine>
   <SourceLine>Dim iX2 As Integer</SourceLine>
   <SourceLine>Dim iY1 As Integer</SourceLine>
   <SourceLine>Dim iY2 As Integer</SourceLine>
   <SourceLine>Dim iMinus As Integer</SourceLine>
   <SourceLine>Dim tScale As Integer</SourceLine>
   <SourceLine>Dim bCheckWithTimes As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetScaleFactor(iScale, dScaleBase)</SourceLine>
   <SourceLine>dScaleOriginalX = g.ScaleX</SourceLine>
   <SourceLine>dScaleOriginalY = g.ScaleY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>LoadLayoutWidth</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>g.FillRect(1, 1, Self.Width - 2, m_iTopText - 1)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>g.DrawRect(0, 21, Self.Width, m_iTopText - 20)</SourceLine>
   <SourceLine>g.DrawRect(0, 0, Self.Width, m_iTopText + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Tabstops</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cBBBBBB</SourceLine>
   <SourceLine>iFactor = m_rtf.ChRTFOriginalToScale(5, False)</SourceLine>
   <SourceLine>For t = Floor(Self.Width / m_rtf.ChRTFOriginalToScale(5)) * iFactor To iFactor Step (0 - iFactor)</SourceLine>
   <SourceLine>For tXY = iScale - 1 To 0 Step -1</SourceLine>
   <SourceLine>g.DrawLine((t * iScale) + tXY, (27 * iScale) + (iScale - 1), (t * iScale) + tXY, (28 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iArrTabstops = GetTabstops</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iArrTabstops.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If iArrTabstops(t) &lt;&gt; 0 Then</SourceLine>
   <SourceLine>If iArrTabstops(t) &lt; 0 Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c999999</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iTS = m_rtf.ChRTFOriginalToScale(Abs(iArrTabstops(t))) * iScale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tXY = 0 To ((3 * iScale) - 1)</SourceLine>
   <SourceLine>iX1 = tXY</SourceLine>
   <SourceLine>iX2 = (2 * ((3 * iScale) - 1)) - tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawLine(iX1 + iTS, (23 * iScale) + (2 * tXY), _</SourceLine>
   <SourceLine>iX2 + iTS, (23 * iScale) + (2 * tXY))</SourceLine>
   <SourceLine>g.DrawLine(iX1 + iTS, (23 * iScale) + (2 * tXY) + 1, _</SourceLine>
   <SourceLine>iX2 + iTS, (23 * iScale) + (2 * tXY) + 1)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSFONT) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSFONT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSFONTSIZE) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSFONTSIZE) * iScale, 20 * iScale)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Font</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>strFont = GetFont</SourceLine>
   <SourceLine>g.TextFont = m_rtf.GetRTFFont(strFont)</SourceLine>
   <SourceLine>g.TextSize = 10</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>g.Underline = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>bCheckWithTimes = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iWidth = g.StringWidth(strFont)</SourceLine>
   <SourceLine>If iWidth = 0 Then</SourceLine>
   <SourceLine>If bCheckWithTimes Then</SourceLine>
   <SourceLine>iWidth = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bCheckWithTimes = True</SourceLine>
   <SourceLine>g.TextFont = "Times New Roman"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iWidth &gt; m_iLayoutCtrlWidth(CTRLPOSFONT) - 15 Then</SourceLine>
   <SourceLine>strFont = strFont.Left(strFont.Len - 1)</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until iWidth &gt; 0</SourceLine>
   <SourceLine>g.DrawString(strFont, GetLayoutStartPos(CTRLPOSFONT) + 2, 14)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Fontsize</SourceLine>
   <SourceLine>g.TextFont = "Arial"</SourceLine>
   <SourceLine>dFontSize = GetFontSize</SourceLine>
   <SourceLine>If dFontSize = Round(dFontSize) Then</SourceLine>
   <SourceLine>strFont = Format(dFontSize, "0")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strFont = Format(dFontSize, "0.0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.DrawString(strFont, GetLayoutStartPos(CTRLPOSFONTSIZE) + 2, 14)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.TextSize = 16</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Bold</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsBold Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSBOLD) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSBOLD) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSBOLD) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSBOLD) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.Bold = True</SourceLine>
   <SourceLine>g.Underline = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>g.DrawString("B", GetLayoutStartPos(CTRLPOSBOLD) + 4 + iRelief, 17 + iRelief)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Italic</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsItalic Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSITALIC) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSITALIC) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSITALIC) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSITALIC) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>g.Underline = False</SourceLine>
   <SourceLine>g.Italic = True</SourceLine>
   <SourceLine>g.DrawString("I", GetLayoutStartPos(CTRLPOSITALIC) + 6 + iRelief, 17 + iRelief)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Underline</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsUnderline Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSUNDERLINE) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSUNDERLINE) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSUNDERLINE) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSUNDERLINE) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>g.Underline = True</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>g.DrawString("U", GetLayoutStartPos(CTRLPOSUNDERLINE) + 4 + iRelief, 17 + iRelief)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Knopje textcolor</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>clTextColor = GetColor</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSCOLOR) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSCOLOR) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.ForeColor = clTextColor</SourceLine>
   <SourceLine>g.Bold = True</SourceLine>
   <SourceLine>g.Underline = True</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>g.DrawString("C", GetLayoutStartPos(CTRLPOSCOLOR) + 4, 17)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Alignment</SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleBase</SourceLine>
   <SourceLine>g.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iAlign = GetAlignment</SourceLine>
   <SourceLine>If iAlign = clsRTFBox_Data.ALIGNLEFT Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNLEFT) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNLEFT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNLEFT) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNLEFT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = 1 To 5</SourceLine>
   <SourceLine>iX1 = (GetLayoutStartPos(CTRLPOSALIGNLEFT) + 2) * iScale</SourceLine>
   <SourceLine>iY1 = (1 + (t * 3)) * iScale</SourceLine>
   <SourceLine>If t = 1 Or t = 5 Then</SourceLine>
   <SourceLine>iX2 = iX1 + (14 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 2 Then</SourceLine>
   <SourceLine>iX2 = iX1 + (8 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 3 Then</SourceLine>
   <SourceLine>iX2 = iX1 + (10 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 4 Then</SourceLine>
   <SourceLine>iX2 = iX1 + (6 * iScale)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iY2 = iY1</SourceLine>
   <SourceLine>For tScale = 1 To iScale</SourceLine>
   <SourceLine>g.DrawLine(iX1, iY1 + tScale - 1, iX2, iY2 + tScale - 1)</SourceLine>
   <SourceLine>Next tScale</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iAlign = clsRTFBox_Data.ALIGNCENTER Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNCENTER) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNCENTER) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNCENTER) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNCENTER) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = 1 To 5</SourceLine>
   <SourceLine>iX1 = (GetLayoutStartPos(CTRLPOSALIGNCENTER) + 10) * iScale</SourceLine>
   <SourceLine>iY1 = (1 + (t * 3)) * iScale</SourceLine>
   <SourceLine>iX2 = iX1</SourceLine>
   <SourceLine>iY2 = iY1</SourceLine>
   <SourceLine>If t = 1 Or t = 5 Then</SourceLine>
   <SourceLine>iX1 = iX1 - (7 * iScale)</SourceLine>
   <SourceLine>iX2 = iX2 + (7 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 2 Then</SourceLine>
   <SourceLine>iX1 = iX1 - (4 * iScale)</SourceLine>
   <SourceLine>iX2 = iX2 + (4 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 3 Then</SourceLine>
   <SourceLine>iX1 = iX1 - (5 * iScale)</SourceLine>
   <SourceLine>iX2 = iX2 + (5 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 4 Then</SourceLine>
   <SourceLine>iX1 = iX1 - (3 * iScale)</SourceLine>
   <SourceLine>iX2 = iX2 + (3 * iScale)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For tScale = 1 To iScale</SourceLine>
   <SourceLine>g.DrawLine(iX1, iY1 + tScale - 1, iX2, iY2 + tScale - 1)</SourceLine>
   <SourceLine>Next tScale</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iAlign = clsRTFBox_Data.ALIGNRIGHT Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c444444</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNRIGHT) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNRIGHT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>iRelief = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSALIGNRIGHT) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNRIGHT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iRelief = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = 1 To 5</SourceLine>
   <SourceLine>iX1 = (GetLayoutStartPos(CTRLPOSALIGNRIGHT) + 18) * iScale</SourceLine>
   <SourceLine>iY1 = (1 + (t * 3)) * iScale</SourceLine>
   <SourceLine>If t = 1 Or t = 5 Then</SourceLine>
   <SourceLine>iX2 = iX1 - (14 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 2 Then</SourceLine>
   <SourceLine>iX2 = iX1 - (8 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 3 Then</SourceLine>
   <SourceLine>iX2 = iX1 - (10 * iScale)</SourceLine>
   <SourceLine>ElseIf t = 4 Then</SourceLine>
   <SourceLine>iX2 = iX1 - (6 * iScale)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iY2 = iY1</SourceLine>
   <SourceLine>For tScale = 1 To iScale</SourceLine>
   <SourceLine>g.DrawLine(iX1, iY1 + tScale - 1, iX2, iY2 + tScale - 1)</SourceLine>
   <SourceLine>Next tScale</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Inspringen</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSJUMPIN) * iScale, iScale, m_iLayoutCtrlWidth(CTRLPOSJUMPIN) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>If iAlign = clsRTFBox_Data.ALIGNLEFT Or iAlign = clsRTFBox_Data.ALIGNRIGHT Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c0000CC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c888888</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iStartPos = GetLayoutStartPos(CTRLPOSJUMPIN) * iScale</SourceLine>
   <SourceLine>For tXY = (3 * iScale) To ((4 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + tXY, 6 * iScale, iStartPos + tXY, 14 * iScale)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (4 * iScale) To ((8 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (10 * iScale), tXY, iStartPos + (6 * iScale) + tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (9 * iScale) To ((10 * iScale) + (iScale - 2))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (4 * iScale), tXY, iStartPos + (6 * iScale) + tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (11 * iScale) - 1 To ((11 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (4 * iScale), tXY, iStartPos + ((26 * iScale) + (iScale - 1)) - tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (12 * iScale) To ((16 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (10 * iScale), tXY, iStartPos + ((26 * iScale) + (iScale - 1)) - tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Uitspringen</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSJUMPOUT) * iScale, iScale, m_iLayoutCtrlWidth(CTRLPOSJUMPOUT) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>If m_rtf.GetIndent(m_iSelStart) &gt; 0 Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c0000CC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c888888</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iStartPos = GetLayoutStartPos(CTRLPOSJUMPOUT) * iScale</SourceLine>
   <SourceLine>For tXY = (15 * iScale) To ((16 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + tXY, 6 * iScale, iStartPos + tXY, 14 * iScale)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (4 * iScale) To ((8 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (10 * iScale), tXY, iStartPos + (14 * iScale) - tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (9 * iScale) To ((10 * iScale) + (iScale - 2))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (15 * iScale), tXY, iStartPos + (14 * iScale) - tXY, tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (11 * iScale) - 1 To ((11 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (15 * iScale), tXY, iStartPos + (tXY - ((6 * iScale) + (iScale - 1))), tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine>For tXY = (12 * iScale) To ((16 * iScale) + (iScale - 1))</SourceLine>
   <SourceLine>g.DrawLine(iStartPos + (10 * iScale), tXY, iStartPos + (tXY - ((6 * iScale) + (iScale - 1))), tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Undo</SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(GetLayoutStartPos(CTRLPOSUNDO) * iScale, iScale, _</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSUNDO) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>If IsUndoPossible Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c0000CC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c888888</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iStartPos = GetLayoutStartPos(CTRLPOSUNDO) * iScale</SourceLine>
   <SourceLine>g.PenWidth = iScale * 2</SourceLine>
   <SourceLine>g.PenHeight = iScale * 2</SourceLine>
   <SourceLine>iX1 = iStartPos + (6 * iScale)</SourceLine>
   <SourceLine>iY1 = (7 * iScale)</SourceLine>
   <SourceLine>g.DrawOval(iX1, iY1, (12 * iScale), (8 * iScale))</SourceLine>
   <SourceLine>g.PenWidth = 1</SourceLine>
   <SourceLine>g.PenHeight = 1</SourceLine>
   <SourceLine>iY1 = iY1 + (4 * iScale) + 1 </SourceLine>
   <SourceLine>g.ForeColor = &amp;cEEEEEE</SourceLine>
   <SourceLine>g.FillRect(iX1, iY1, (12 * iScale), (4 * iScale))</SourceLine>
   <SourceLine>If IsUndoPossible Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c0000CC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.ForeColor = &amp;c888888</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iX2 = iX1 + (2 * iScale)</SourceLine>
   <SourceLine>iX1 = iX1 - (iScale * 2) - 1</SourceLine>
   <SourceLine>iX2 = iX2 + (iScale * 2)</SourceLine>
   <SourceLine>iMinus = 0</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>g.DrawLine(iX1 + iMinus, iY1 + iMinus, iX2 - iMinus, iY1 + iMinus)</SourceLine>
   <SourceLine>iMinus = iMinus + 1</SourceLine>
   <SourceLine>Loop Until iX2 - iMinus &lt; iX1 + iMinus</SourceLine>
   <SourceLine>iMinus = iMinus - 1</SourceLine>
   <SourceLine>g.DrawLine(iX1, iY1, iX1 + iMinus, iY1 + iMinus)</SourceLine>
   <SourceLine>g.DrawLine(iX2, iY1, iX2 - iMinus, iY1 + iMinus)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Piekje Font</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>iStartPos = GetLayoutStopPos(CTRLPOSFONT) * iScale</SourceLine>
   <SourceLine>For tXY = (8 * iScale) To (11 * iScale) + (iScale - 1)</SourceLine>
   <SourceLine>g.DrawLine(iStartPos - ((6 * iScale) - (((11 * iScale) + (iScale - 1)) - tXY)), tXY, _</SourceLine>
   <SourceLine>iStartPos - ((6 * iScale) + (((11 * iScale) + (iScale - 1)) - tXY)), tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Piekje Fontsize</SourceLine>
   <SourceLine>iStartPos = GetLayoutStopPos(CTRLPOSFONTSIZE) * iScale</SourceLine>
   <SourceLine>For tXY = (8 * iScale) To (11 * iScale) + (iScale - 1)</SourceLine>
   <SourceLine>g.DrawLine(iStartPos - ((6 * iScale) - (((11 * iScale) + (iScale - 1)) - tXY)), tXY, _</SourceLine>
   <SourceLine>iStartPos - ((6 * iScale) + (((11 * iScale) + (iScale - 1)) - tXY)), tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Piekje Textcolor</SourceLine>
   <SourceLine>iStartPos = GetLayoutStopPos(CTRLPOSCOLOR) * iScale</SourceLine>
   <SourceLine>For tXY = (8 * iScale) To (11 * iScale) + (iScale - 1)</SourceLine>
   <SourceLine>g.DrawLine(iStartPos - ((6 * iScale) - (((11 * iScale) + (iScale - 1)) - tXY)), tXY, _</SourceLine>
   <SourceLine>iStartPos - ((6 * iScale) + (((11 * iScale) + (iScale - 1)) - tXY)), tXY)</SourceLine>
   <SourceLine>Next tXY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Lijntjes tussen de knoppen</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>For t = 1 To CTRLPOSAAA_LAST</SourceLine>
   <SourceLine>g.DrawLine(GetLayoutStopPos(t) * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>GetLayoutStopPos(t) * iScale, 20 * iScale)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale &lt;&gt; 1 Or dScaleBase &lt;&gt; 1 Then</SourceLine>
   <SourceLine>g.ScaleX = dScaleOriginalX</SourceLine>
   <SourceLine>g.ScaleY = dScaleOriginalY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g As Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetFontMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1082390527</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFontMenu() As MenuItem</SourceLine>
   <SourceLine>Dim mnuBase As New MenuItem</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim mnu0C As MenuItem</SourceLine>
   <SourceLine>Dim mnuDG As MenuItem</SourceLine>
   <SourceLine>Dim mnuHK As MenuItem</SourceLine>
   <SourceLine>Dim mnuLO As MenuItem</SourceLine>
   <SourceLine>Dim mnuPS As MenuItem</SourceLine>
   <SourceLine>Dim mnuTW As MenuItem</SourceLine>
   <SourceLine>Dim mnuXZ As MenuItem</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim bSort As Boolean</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim strCurrentFont As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Text = "Font"</SourceLine>
   <SourceLine>strCurrentFont = GetFont</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strArrVoorkeurFonts.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>For t = 0 To FontCount - 1</SourceLine>
   <SourceLine>strFont = Font(t)</SourceLine>
   <SourceLine>If strFont = "Arial" Or strFont = "Courier New" Or strFont = "Times New Roman" Or strFont = "Century Gothic" Or _</SourceLine>
   <SourceLine>m_rtf.IsFontUsed(strFont) Then</SourceLine>
   <SourceLine>m_strArrVoorkeurFonts.Append(strFont)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_strarrFonts.Append(Font(t))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_strArrFonts.Sort</SourceLine>
   <SourceLine>m_strArrVoorkeurFonts.Sort</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bSort = False</SourceLine>
   <SourceLine>For t = m_strArrFonts.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_rtf.IsFontUsed(m_strArrFonts(t)) Then</SourceLine>
   <SourceLine>m_strArrVoorkeurFonts.Append(m_strArrFonts(t))</SourceLine>
   <SourceLine>m_strArrFonts.Remove(t)</SourceLine>
   <SourceLine>bSort = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If bSort Then</SourceLine>
   <SourceLine>m_strArrVoorkeurFonts.Sort</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_strArrVoorkeurFonts.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = m_strArrVoorkeurFonts(t)</SourceLine>
   <SourceLine>mnu.Tag = "FONT." + m_strArrVoorkeurFonts(t)</SourceLine>
   <SourceLine>mnu.Checked = (m_strArrVoorkeurFonts(t) = strCurrentFont)</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>If iLast &gt; 0 Then</SourceLine>
   <SourceLine>If mnuBase.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(New MenuItem(mnuBase.TextSeparator))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu0C = New MenuItem("0-9 A-B-C")</SourceLine>
   <SourceLine>mnuDG = New MenuItem("D-E-F-G")</SourceLine>
   <SourceLine>mnuHK = New MenuItem("H-I-J-K")</SourceLine>
   <SourceLine>mnuLO = New MenuItem("L-M-N-O")</SourceLine>
   <SourceLine>mnuPS = New MenuItem("P-Q-R-S")</SourceLine>
   <SourceLine>mnuTW = New MenuItem("T-U-V-W")</SourceLine>
   <SourceLine>mnuXZ = New MenuItem("X-Y-Z")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>strFont = m_strArrFonts(t)</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = strFont</SourceLine>
   <SourceLine>mnu.Tag = "FONT." + strFont</SourceLine>
   <SourceLine>ch = strFont.Left(1).Uppercase</SourceLine>
   <SourceLine>If ch &gt;= "0" And ch &lt;= "9" Or ch = "A" Or ch = "B" Or ch = "C" Then </SourceLine>
   <SourceLine>mnu0C.Append(mnu)</SourceLine>
   <SourceLine>ElseIf ch = "D" Or ch = "E" Or ch = "F" Or ch = "G" Then</SourceLine>
   <SourceLine>mnuDG.Append(mnu)</SourceLine>
   <SourceLine>ElseIf ch = "H" Or ch = "I" Or ch = "J" Or ch = "K" Then</SourceLine>
   <SourceLine>mnuHK.Append(mnu)</SourceLine>
   <SourceLine>ElseIf ch = "L" Or ch = "M" Or ch = "N" Or ch = "O" Then</SourceLine>
   <SourceLine>mnuLO.Append(mnu)</SourceLine>
   <SourceLine>ElseIf ch = "P" Or ch = "Q" Or ch = "R" Or ch = "S" Then</SourceLine>
   <SourceLine>mnuPS.Append(mnu)</SourceLine>
   <SourceLine>ElseIf ch = "T" Or ch = "U" Or ch = "V" Or ch = "W" Then</SourceLine>
   <SourceLine>mnuTW.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuXZ.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If mnu0C.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnu0C)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuDG.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuDG)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuHK.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuHK)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuLO.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuLO)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuPS.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuPS)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuTW.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuTW)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If mnuXZ.Count &gt; 0 Then</SourceLine>
   <SourceLine>mnuBase.Append(mnuXZ)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFontSizeMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>891525119</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFontSizeMenu() As MenuItem</SourceLine>
   <SourceLine>Dim mnuBase As New MenuItem</SourceLine>
   <SourceLine>Dim dCurrentSize As Double</SourceLine>
   <SourceLine>Dim iSize As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Text = "FontSize"</SourceLine>
   <SourceLine>dCurrentSize = GetFontSize</SourceLine>
   <SourceLine>iSize = Ceil(dCurrentSize)</SourceLine>
   <SourceLine>If iSize &lt;&gt; Floor(dCurrentSize) Then</SourceLine>
   <SourceLine>iSize = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 5, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 6, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 7, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 8, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 9, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 10, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 11, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 12, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 13, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 14, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 16, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 18, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 20, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 22, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 24, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 26, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 28, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 32, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 36, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 40, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 44, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 48, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 54, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 60, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 66, iSize)</SourceLine>
   <SourceLine>GetFontSizeMenu_AddSize(mnuBase, 72, iSize)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFontSizeMenu_AddSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1111185407</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetFontSizeMenu_AddSize(ByRef mnuBase As MenuItem, iSize As Integer, iCurrentSize As Integer)</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = Format(iSize, "0")</SourceLine>
   <SourceLine>mnu.Tag = "FONTSIZE." + mnu.Text</SourceLine>
   <SourceLine>mnu.Checked = (iSize = iCurrentSize)</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef mnuBase As MenuItem, iSize As Integer, iCurrentSize As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2116399103</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionFont(strFont As String)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetFont(t) = strFont</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextFont(m_iSelStart, strFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strFont As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionFontSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>87193599</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionFontSize(iSize As Integer)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetFontSize(t) = iSize</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextFontSize(m_iSelStart, iSize)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iSize As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>181503999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsItalic() As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsItalic(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsItalic(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsItalic(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1492295679</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsBold() As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsBold(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsBold(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsBold(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1445109759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsUnderline(iStyle As Integer = 0) As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>' 0 = any style</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsUnderline(m_iSelP1, False, iStyle)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsUnderline(m_iSelP2 - 1, False, iStyle)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsUnderline(m_iSelStart, True, iStyle)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iStyle As Integer = 0</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>904560639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFont() As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>strRtVal = m_rtf.GetFont(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = m_rtf.GetFont(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = m_rtf.GetFont(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFontSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>332974079</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFontSize() As Double</SourceLine>
   <SourceLine>Dim dRtVal As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>dRtVal = m_rtf.GetFontSize(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dRtVal = m_rtf.GetFontSize(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dRtVal = m_rtf.GetFontSize(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Round((dRtVal * 10) / 10)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>GetColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1019772927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetColor() As Color</SourceLine>
   <SourceLine>Dim clRtVal As Color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>clRtVal = m_rtf.GetColor(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clRtVal = m_rtf.GetColor(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clRtVal = m_rtf.GetColor(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return clRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Color</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2128496639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionColor(clColor As Color)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetColor(t) = clColor</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextColor(m_iSelStart, clColor)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>clColor As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetColorMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1551908863</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetColorMenu(strTag As String, clCurrentColor As Color) As MenuItem</SourceLine>
   <SourceLine>Dim mnuBase As New MenuItem</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Text = "Color"</SourceLine>
   <SourceLine>mnuBase.Tag = strTag</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Zwart</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c000000, clCurrentColor)</SourceLine>
   <SourceLine>'Grijs</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c444444, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c888888, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cCCCCCC, clCurrentColor)</SourceLine>
   <SourceLine>'Rood</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c880000, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF0000, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF8888, clCurrentColor)</SourceLine>
   <SourceLine>'Oranje</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c884400, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF8800, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF8844, clCurrentColor)</SourceLine>
   <SourceLine>'Geel</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c888800, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFFFF00, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFFFF88, clCurrentColor)</SourceLine>
   <SourceLine>'Groen</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c008800, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c00FF00, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c88FF88, clCurrentColor)</SourceLine>
   <SourceLine>'Cyaan</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c008888, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c00FFFF, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c88FFFF, clCurrentColor)</SourceLine>
   <SourceLine>'Blauw</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c000088, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c0000FF, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c8888FF, clCurrentColor)</SourceLine>
   <SourceLine>'Paars</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;c880088, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF00FF, clCurrentColor)</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFF88FF, clCurrentColor)</SourceLine>
   <SourceLine>'Wit</SourceLine>
   <SourceLine>GetColorMenu_AddColor(mnuBase, &amp;cFFFFFF, clCurrentColor)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strTag As String, clCurrentColor As Color</ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>GetColorMenu_AddColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>895035391</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetColorMenu_AddColor(ByRef mnuBase As MenuItem, clColor As Color, clCurrentColor As Color)</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine>Dim dScaleBase As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>GetScaleFactor(iScale, dScaleBase)</SourceLine>
   <SourceLine>If IsNull(Window) Or (iScale = 1 And dScaleBase = 1) Then</SourceLine>
   <SourceLine>pic = New Picture(10, 10)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>pic = Window.BitmapForCaching(10, 10)</SourceLine>
   <SourceLine>pic.Graphics.ScaleX = dScaleBase</SourceLine>
   <SourceLine>pic.Graphics.ScaleY = dScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic.Graphics.ForeColor = clColor</SourceLine>
   <SourceLine>pic.Graphics.FillRoundRect(1 * iScale, 1 * iScale, _</SourceLine>
   <SourceLine>8 * iScale, 8 * iScale, _</SourceLine>
   <SourceLine>2 * iScale, 2 * iScale)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu.Icon = pic</SourceLine>
   <SourceLine>mnu.Checked = (clColor = clCurrentColor)</SourceLine>
   <SourceLine>mnu.Tag = mnuBase.Tag + "." + Format(clColor.Red, "0") + "." + Format(clColor.Green, "0") + "." + Format(clColor.Blue, "0")</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef mnuBase As MenuItem, clColor As Color, clCurrentColor As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetAlignment</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1069936639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetAlignment() As Integer</SourceLine>
   <SourceLine>Return m_rtf.GetAlignment(m_iSelStart)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionAlignLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1597960191</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionAlignLeft()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetAlignment(t, clsRTFBox_Data.ALIGNLEFT)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetAlignment(m_iSelStart, clsRTFBox_Data.ALIGNLEFT)</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionAlignCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1560928255</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionAlignCenter()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetAlignment(t, clsRTFBox_Data.ALIGNCENTER)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetAlignment(m_iSelStart, clsRTFBox_Data.ALIGNCENTER)</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionAlignRight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1227792383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionAlignRight()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetAlignment(t, clsRTFBox_Data.ALIGNRIGHT)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetAlignment(m_iSelStart, clsRTFBox_Data.ALIGNRIGHT)</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetTabstops</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>444440575</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTabstops() As Integer()</SourceLine>
   <SourceLine>Return m_rtf.GetTabstops(m_iSelStart, Self.Width)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Integer()</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionTabstop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>24225791</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionTabstop(iTabstopPos As Integer)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine>Dim bTabStop As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iTabstopPos = m_rtf.ChRTFScaleToOriginal(iTabstopPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bTabstop = (Not m_rtf.IsTabStop(m_iSelStart, iTabstopPos))</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetTabstop(t, iTabstopPos, bTabStop)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetTabstop(m_iSelStart, iTabstopPos, bTabStop) </SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iTabstopPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetLayoutStartPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>159066111</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetLayoutStartPos(iCtrl As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>For t = 0 To iCtrl - 1</SourceLine>
   <SourceLine>iRtVal = iRtVal + m_iLayoutCtrlWidth(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCtrl As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>LoadLayoutWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>69218303</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LoadLayoutWidth(bInitial As Boolean = False)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iTotal As Integer</SourceLine>
   <SourceLine>Dim iRest As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bInitial Then</SourceLine>
   <SourceLine>ReDim m_iLayoutCtrlWidth(CTRLPOSAAA_LAST)</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(0) = 1</SourceLine>
   <SourceLine>For t = 1 To CTRLPOSAAA_LAST</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(t) = 5</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSBOLD) = 20</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSITALIC) = 20</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSUNDERLINE) = 20</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNLEFT) = 20</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNCENTER) = 20</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSALIGNRIGHT) = 20</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSJUMPIN) = 20</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSJUMPOUT) = 20</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSUNDO) = 20</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSCOLOR) = 30</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSFONTSIZE) = 30</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSFONT) = 120</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iTotal = 0 - m_iLayoutCtrlWidth(CTRLPOSFONT)</SourceLine>
   <SourceLine>For t = 0 To CTRLPOSAAA_LAST</SourceLine>
   <SourceLine>iTotal = iTotal + m_iLayoutCtrlWidth(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iRest = Self.Width - iTotal</SourceLine>
   <SourceLine>If iRest &lt; 120 Then </SourceLine>
   <SourceLine>iRest = 120</SourceLine>
   <SourceLine>ElseIf iRest &gt; 250 Then</SourceLine>
   <SourceLine>iRest = 250</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iLayoutCtrlWidth(CTRLPOSFONT) = iRest</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bInitial As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetLayoutStopPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>489822207</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetLayoutStopPos(iCtrl As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>For t = 0 To iCtrl </SourceLine>
   <SourceLine>iRtVal = iRtVal + m_iLayoutCtrlWidth(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCtrl As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionJumpIn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>347033599</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionJumpIn()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine>Dim iIndent As Integer</SourceLine>
   <SourceLine>Dim iNewIndent As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetIndent(m_iSelStart)</SourceLine>
   <SourceLine>iNewIndent = m_rtf.GetNextInsprong(m_iSelStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNewIndent &lt;&gt; iIndent Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetIndent(t, iNewIndent)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetIndent(m_iSelStart, iNewIndent)</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionJumpOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>957112319</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionJumpOut()</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMinBegin As Integer</SourceLine>
   <SourceLine>Dim iBeginParagraph As Integer</SourceLine>
   <SourceLine>Dim iIndent As Integer</SourceLine>
   <SourceLine>Dim iNewIndent As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetIndent(m_iSelStart)</SourceLine>
   <SourceLine>iNewIndent = m_rtf.GetPreviousInsprong(m_iSelStart)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNewIndent &lt;&gt; iIndent Then</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>iMinBegin = m_iSelP2</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>iBeginParagraph = m_rtf.SetIndent(t, iNewIndent)</SourceLine>
   <SourceLine>If iBeginParagraph &lt; iMinBegin Then</SourceLine>
   <SourceLine>iMinBegin = iBeginParagraph</SourceLine>
   <SourceLine>t = iMinBegin</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iMinBegin</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_rtf.SetIndent(m_iSelStart, iNewIndent)</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RunBulletProcedure</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>170033151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RunBulletProcedure(ByRef iPos As Integer)</SourceLine>
   <SourceLine>Dim strPreviousPossibleBullet As String</SourceLine>
   <SourceLine>Dim iStartPosPreviousPossibleBullet As Integer</SourceLine>
   <SourceLine>Dim strNextPossibleBullet As String</SourceLine>
   <SourceLine>Dim iStartPosNextPossibleBullet As Integer</SourceLine>
   <SourceLine>Dim strBullet As String</SourceLine>
   <SourceLine>Dim strBulletTerminator As String</SourceLine>
   <SourceLine>Dim strBulletPrefix As String</SourceLine>
   <SourceLine>Dim strNextBullet As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim bStepOut As Boolean</SourceLine>
   <SourceLine>Dim iPosInsert As Integer</SourceLine>
   <SourceLine>Dim iPosRtVal As Integer</SourceLine>
   <SourceLine>Dim bBulletIsFunctie As Boolean</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iPosOtherBullets As Integer</SourceLine>
   <SourceLine>Dim iIndent As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell &lt; 0 Then</SourceLine>
   <SourceLine>'Geen bulletprocedure in een tablecel</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strPreviousPossibleBullet = ""</SourceLine>
   <SourceLine>bBulletIsFunctie = False</SourceLine>
   <SourceLine>iStartPosPreviousPossibleBullet = -1</SourceLine>
   <SourceLine>t = iPos - 2</SourceLine>
   <SourceLine>While t &gt;= 0 And m_rtf.m_chArr(t) &lt;&gt; Chr(10)</SourceLine>
   <SourceLine>ch = m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>If ch = " " Or ch = Chr(9) Then</SourceLine>
   <SourceLine>strPreviousPossibleBullet = ""</SourceLine>
   <SourceLine>m_strPreviousSeperateBulletFromTextWith = ch</SourceLine>
   <SourceLine>iStartPosPreviousPossibleBullet = -1</SourceLine>
   <SourceLine>bBulletIsFunctie = False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strPreviousPossibleBullet = ch + strPreviousPossibleBullet</SourceLine>
   <SourceLine>iStartPosPreviousPossibleBullet = t</SourceLine>
   <SourceLine>bBulletIsFunctie = (m_rtf.m_cpArr(t).iFunctie &gt; 0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bBulletIsFunctie Then</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_CHECKBOX </SourceLine>
   <SourceLine>If strPreviousPossibleBullet = clsRTFBox_Data.CHECKBOX_CHECKED Or _</SourceLine>
   <SourceLine>strPreviousPossibleBullet = clsRTFBox_Data.CHECKBOX_UNCHECKED Then</SourceLine>
   <SourceLine>m_strPreviousBullet = strPreviousPossibleBullet</SourceLine>
   <SourceLine>m_strBullet = clsRTFBox_Data.CHECKBOX_UNCHECKED</SourceLine>
   <SourceLine>m_iArrChangedBullets.Append(iPos + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ActionInsertCheckBox</SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strPreviousPossibleBullet = "*" Or strPreviousPossibleBullet = "•" Then</SourceLine>
   <SourceLine>m_strPreviousBullet = strPreviousPossibleBullet</SourceLine>
   <SourceLine>m_strBullet = "•"</SourceLine>
   <SourceLine>If strPreviousPossibleBullet &lt;&gt; m_strBullet Then</SourceLine>
   <SourceLine>m_iArrChangedBullets.Append(iStartPosPreviousPossibleBullet)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iStartPosPreviousPossibleBullet)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iStartPosPreviousPossibleBullet)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosInsert = iStartPosPreviousPossibleBullet</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosInsert, m_strBullet)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rtf.m_chArr(iStartPosPreviousPossibleBullet + 1) = Chr(13) Then</SourceLine>
   <SourceLine>iPosInsert = iStartPosPreviousPossibleBullet + strPreviousPossibleBullet.Len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_rtf.IsInTableCell(iPosInsert) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPosInsert, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPosInsert, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosInsert, Chr(9))</SourceLine>
   <SourceLine>ElseIf m_rtf.m_chArr(iStartPosPreviousPossibleBullet + 1) &lt;&gt; Chr(9) Then</SourceLine>
   <SourceLine>iPosInsert = iStartPosPreviousPossibleBullet + strPreviousPossibleBullet.Len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iPosInsert)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iPosInsert)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_rtf.IsInTableCell(iPosInsert) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPosInsert, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPosInsert, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosInsert, Chr(9))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>m_iArrChangedBullets.Append(iPos)</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, m_strBullet)</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_rtf.IsInTableCell(iPosInsert) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPos, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPos, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, Chr(9))</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_strPreviousBullet = strPreviousPossibleBullet</SourceLine>
   <SourceLine>SplitBullet(strPreviousPossibleBullet, strBulletPrefix, strBullet, strBulletTerminator)</SourceLine>
   <SourceLine>If strBullet.Len &gt; 0 Then</SourceLine>
   <SourceLine>strNextBullet = strBulletPrefix + Format(Val(strBullet) + 1, "0") + strBulletTerminator</SourceLine>
   <SourceLine>m_strBullet = strNextBullet</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosInsert = iStartPosPreviousPossibleBullet + strPreviousPossibleBullet.Len</SourceLine>
   <SourceLine>If m_rtf.m_chArr(iStartPosPreviousPossibleBullet + strPreviousPossibleBullet.Len) = Chr(13) Then</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosInsert, Chr(9))</SourceLine>
   <SourceLine>ElseIf m_rtf.m_chArr(iStartPosPreviousPossibleBullet + strPreviousPossibleBullet.Len) &lt;&gt; Chr(9) Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iPosInsert)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iPosInsert)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosInsert, Chr(9))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not m_rtf.IsInTableCell(iPosInsert) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPosInsert, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPosInsert, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iArrChangedBullets.Append(iPos + 1)</SourceLine>
   <SourceLine>For t = 1 To strNextBullet.Len</SourceLine>
   <SourceLine>ch = strNextBullet.Mid(t, 1)</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, ch)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, Chr(9))</SourceLine>
   <SourceLine>iPosRtVal = iPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bStepOut = False</SourceLine>
   <SourceLine>iPosOtherBullets = iPos</SourceLine>
   <SourceLine>While Not bStepOut</SourceLine>
   <SourceLine>strNextPossibleBullet = ""</SourceLine>
   <SourceLine>t = iPosOtherBullets</SourceLine>
   <SourceLine>If t &lt; (m_rtf.m_chArr.Ubound - 1) Then</SourceLine>
   <SourceLine>iStartPosNextPossibleBullet = -1</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_chArr.Ubound And m_rtf.m_cpArr(t).btAscSpecial &lt;&gt; 13 </SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &lt; m_rtf.m_chArr.Ubound Then</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>While Not bStepOut And t &lt; m_rtf.m_chArr.Ubound And iStartPosNextPossibleBullet &lt; 0</SourceLine>
   <SourceLine>ch = m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(t).btAscSpecial = 13 Then</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>ElseIf m_rtf.m_cpArr(t).btAscSpecial &lt;&gt; 10 Then</SourceLine>
   <SourceLine>iStartPosNextPossibleBullet = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If bStepOut Or iStartPosNextPossibleBullet &lt; 0 Then</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_chArr.Ubound</SourceLine>
   <SourceLine>ch = m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(t).btAscSpecial = 13 Or _</SourceLine>
   <SourceLine>m_rtf.m_cpArr(t).btAscSpecial = 32 Or _</SourceLine>
   <SourceLine>m_rtf.m_cpArr(t).btAscSpecial = 9 Then</SourceLine>
   <SourceLine>t = m_rtf.m_chArr.Ubound</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strNextPossibleBullet = strNextPossibleBullet + ch</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SplitBullet(strNextPossibleBullet, strBulletPrefix, strBullet, strBulletTerminator)</SourceLine>
   <SourceLine>If strBullet.Len &gt; 0 Then</SourceLine>
   <SourceLine>If strBulletPrefix + strBullet + strBulletTerminator = strNextBullet Then</SourceLine>
   <SourceLine>For t = strNextPossibleBullet.Len To 1 Step -1</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iStartPosNextPossibleBullet)</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iStartPosNextPossibleBullet)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>strNextBullet = strBulletPrefix + Format(Val(strBullet) + 1, "0") + strBulletTerminator</SourceLine>
   <SourceLine>m_iArrChangedBullets.Append(iPosOtherBullets)</SourceLine>
   <SourceLine>For t = 1 To strNextBullet.Len</SourceLine>
   <SourceLine>ch = strNextBullet.Mid(t, 1)</SourceLine>
   <SourceLine>iPosOtherBullets = iStartPosNextPossibleBullet + t - 1</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPosOtherBullets, ch)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iPosOtherBullets = iPosOtherBullets + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPos = iPosRtVal</SourceLine>
   <SourceLine>If Not m_rtf.IsInTableCell(iPos) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPos, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPos, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RunUndoBulletProcedure</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1199464447</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function RunUndoBulletProcedure() As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim strThisBullet As String</SourceLine>
   <SourceLine>Dim strBulletPrefix As String</SourceLine>
   <SourceLine>Dim strBulletTerminator As String</SourceLine>
   <SourceLine>Dim strBullet As String</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iParNew As Integer</SourceLine>
   <SourceLine>Dim par As clsRTFBox_Paragraph</SourceLine>
   <SourceLine>Dim bFullRefresh As Boolean</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>If m_strBullet = "•" Then</SourceLine>
   <SourceLine>bFullRefresh = False</SourceLine>
   <SourceLine>If m_iArrChangedBullets.Ubound = 1 Then</SourceLine>
   <SourceLine>If m_rtf.m_chArr(m_iArrChangedBullets(0)) &lt;&gt; m_strPreviousBullet Then</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(0)</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iPos)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, m_strPreviousBullet)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rtf.m_chArr(m_iArrChangedBullets(0) + 1) &lt;&gt; m_strPreviousSeperateBulletFromTextWith Then</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(0) + 1</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(iPos)</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(iPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, m_strPreviousSeperateBulletFromTextWith)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iArrChangedBullets.Remove(0)</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(0)</SourceLine>
   <SourceLine>While iPos &gt; 0 And m_rtf.m_cpArr(iPos).btAscSpecial &lt;&gt; 10 </SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPar = m_rtf.m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If m_rtf.m_rpArrParagraph(iPar).FirstIndent &lt;&gt; 0 Then</SourceLine>
   <SourceLine>par = New clsRTFBox_Paragraph(m_rtf.m_rpArrParagraph(iPar))</SourceLine>
   <SourceLine>par.Indent = par.Indent + par.FirstIndent</SourceLine>
   <SourceLine>par.FirstIndent = 0</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph.Append(par)</SourceLine>
   <SourceLine>iParNew = m_rtf.m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iPos To iLast</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>m_rtf.m_cpArr(t).iParagraph = iParNew</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strBullet = ""</SourceLine>
   <SourceLine>ReDim m_iArrChangedBullets(-1)</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 2</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>If bFullRefresh Then</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf m_strBullet = clsRTFBox_Data.CHECKBOX_UNCHECKED Then</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(0)</SourceLine>
   <SourceLine>While iPos &gt; 0 And m_rtf.m_cpArr(iPos).btAscSpecial &lt;&gt; 10 </SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPar = m_rtf.m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If m_rtf.m_rpArrParagraph(iPar).FirstIndent &lt;&gt; 0 Then</SourceLine>
   <SourceLine>par = New clsRTFBox_Paragraph(m_rtf.m_rpArrParagraph(iPar))</SourceLine>
   <SourceLine>par.Indent = par.Indent + par.FirstIndent</SourceLine>
   <SourceLine>par.FirstIndent = 0</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph.Append(par)</SourceLine>
   <SourceLine>iParNew = m_rtf.m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iPos To iLast</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>m_rtf.m_cpArr(t).iParagraph = iParNew</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strBullet = ""</SourceLine>
   <SourceLine>ReDim m_iArrChangedBullets(-1)</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 2</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf m_strBullet.Len &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iArrChangedBullets.Ubound To 1 Step -1</SourceLine>
   <SourceLine>strThisBullet = ""</SourceLine>
   <SourceLine>While m_rtf.m_chArr.Ubound &gt; m_iArrChangedBullets(t) And _</SourceLine>
   <SourceLine>m_rtf.m_chArr(m_iArrChangedBullets(t)) &lt;&gt; " " And _ </SourceLine>
   <SourceLine>m_rtf.m_chArr(m_iArrChangedBullets(t)) &lt;&gt; Chr(9) And _</SourceLine>
   <SourceLine>m_rtf.m_chArr(m_iArrChangedBullets(t)) &lt;&gt; Chr(13)  </SourceLine>
   <SourceLine>strThisBullet = strThisBullet + m_rtf.m_chArr(m_iArrChangedBullets(t))</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(t))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(t))</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>SplitBullet(strThisBullet, strBulletPrefix, strBullet, strBulletTerminator)</SourceLine>
   <SourceLine>If strBullet.Len &gt; 0 Then</SourceLine>
   <SourceLine>strThisBullet = strBulletPrefix + Format(Val(strBullet) - 1, "0") + strBulletTerminator</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While strThisBullet.Len &gt; 0</SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(t)</SourceLine>
   <SourceLine>m_rtf.InsertChar(iPos, strThisBullet.Right(1))</SourceLine>
   <SourceLine>strThisBullet = strThisBullet.Left(strThisBullet.Len - 1)</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>For t = m_strBullet.Len To 1 Step -1</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_rtf.m_chArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine>m_rtf.m_cpArr.Remove(m_iArrChangedBullets(0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrChangedBullets(0)</SourceLine>
   <SourceLine>While iPos &gt; 0 And m_rtf.m_cpArr(iPos).btAscSpecial &lt;&gt; 10 </SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPar = m_rtf.m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If m_rtf.m_rpArrParagraph(iPar).FirstIndent &lt;&gt; 0 Then</SourceLine>
   <SourceLine>par = New clsRTFBox_Paragraph(m_rtf.m_rpArrParagraph(iPar))</SourceLine>
   <SourceLine>par.Indent = par.Indent + par.FirstIndent</SourceLine>
   <SourceLine>par.FirstIndent = 0</SourceLine>
   <SourceLine>m_rtf.m_rpArrParagraph.Append(par)</SourceLine>
   <SourceLine>iParNew = m_rtf.m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>iLast = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iPos To iLast</SourceLine>
   <SourceLine>If m_rtf.m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>m_rtf.m_cpArr(t).iParagraph = iParNew</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 1</SourceLine>
   <SourceLine>m_strBullet = ""</SourceLine>
   <SourceLine>ReDim m_iArrChangedBullets(-1)</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bRtVal Then</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Catch err As OutOfBoundsException</SourceLine>
   <SourceLine>Break</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SplitBullet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1456805887</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SplitBullet(strPossibleBullet As String, ByRef strBulletPrefix As String, ByRef strBullet As String, ByRef strBulletTerminator As String)</SourceLine>
   <SourceLine>Dim strBulletPart As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strBulletPrefix = ""</SourceLine>
   <SourceLine>strBullet = ""</SourceLine>
   <SourceLine>strBulletTerminator = strPossibleBullet.Right(1)</SourceLine>
   <SourceLine>If strBulletTerminator &lt;&gt; "." And strBulletTerminator &lt;&gt; ")" Then</SourceLine>
   <SourceLine>strBulletTerminator = ""</SourceLine>
   <SourceLine>strBulletPart = strPossibleBullet</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strBulletPart = strPossibleBullet.Left(strPossibleBullet.Len - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If clsRTFBox_Data.NumbersOnly(strBulletPart, ".") = strBulletPart Then</SourceLine>
   <SourceLine>For t = 1 To strBulletPart.Len</SourceLine>
   <SourceLine>ch = strBulletPart.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = "." Then</SourceLine>
   <SourceLine>strBulletPrefix = strBulletPrefix + strBullet + ch</SourceLine>
   <SourceLine>strBullet = ""</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strBullet = strBullet + ch</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strBulletTerminator = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strPossibleBullet As String, ByRef strBulletPrefix As String, ByRef strBullet As String, ByRef strBulletTerminator As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetHtml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>805392383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetHtml() As String</SourceLine>
   <SourceLine>Return m_rtf.GetHtml</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Event_FillFunctionValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1193785343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Event_FillFunctionValue(rtf As clsRTFBox_Data, strFunction As String, ByRef strValue As String) As Boolean</SourceLine>
   <SourceLine>#Pragma Unused rtf</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return FillFunctionValue(strFunction, strValue)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>4129</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rtf As clsRTFBox_Data, strFunction As String, ByRef strValue As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Destructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1927442431</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Destructor()</SourceLine>
   <SourceLine>RemoveMySelf(m_iIndex)</SourceLine>
   <SourceLine>RemoveHandler m_rtf.FillFunctionValue, AddressOf Event_FillFunctionValue</SourceLine>
   <SourceLine>RemoveHandler m_rtf.GetDefaultStyle, AddressOf Event_GetDefaultStyle</SourceLine>
   <SourceLine>RemoveHandler m_rtf.ShowURL, AddressOf Event_ShowURL</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveMySelf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>995143679</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub RemoveMySelf(iIndex As Integer)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_iArrRTFId.IndexOf(iIndex)</SourceLine>
   <SourceLine>If iPos &gt;= 0 Then</SourceLine>
   <SourceLine>m_rtfArr.Remove(iPos)</SourceLine>
   <SourceLine>m_iArrRTFId.Remove(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iArrRTFId.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>If Not IsNull(m_tmr) Then</SourceLine>
   <SourceLine>RemoveHandler m_tmr.Action, AddressOf TimerAction</SourceLine>
   <SourceLine>m_tmr = Nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iLastRTFId = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>iIndex As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionUpdateFunctions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1854666751</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionUpdateFunctions()</SourceLine>
   <SourceLine>If m_rtf.UpdateFunctions Then</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer </SourceLine>
   <SourceLine>Self.Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetFunctionsMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1535088639</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFunctionsMenu() As MenuItem</SourceLine>
   <SourceLine>Dim mnuBase As New MenuItem</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim strArrFunctions() As String</SourceLine>
   <SourceLine>Dim strArrNames() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetFunctions(strArrFunctions, strArrNames)</SourceLine>
   <SourceLine>If strArrFunctions.IndexOf("date") &lt; 0 Then </SourceLine>
   <SourceLine>strArrFunctions.Append("date")</SourceLine>
   <SourceLine>strArrNames.Append("Datum")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strArrFunctions.IndexOf("time") &lt; 0 Then </SourceLine>
   <SourceLine>strArrFunctions.Append("time")</SourceLine>
   <SourceLine>strArrNames.Append("Tijd")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strArrFunctions.IndexOf("counter") &lt; 0 Then </SourceLine>
   <SourceLine>strArrFunctions.Append("counter")</SourceLine>
   <SourceLine>strArrNames.Append("Teller")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strArrNames.SortWith(strArrFunctions)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Text = "Insert Function"</SourceLine>
   <SourceLine>iLast = strArrFunctions.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = strArrNames(t)</SourceLine>
   <SourceLine>mnu.Tag = "FUNCTION." + strArrFunctions(t)</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionInsertFunctie</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>177018879</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionInsertFunctie(strFunctie As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>m_rtf.InsertFunctie(iPos, strFunctie)</SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strFunctie As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CorrectPositionUpIfFunction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1230655487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CorrectPositionUpIfFunction(ByRef iPos As Integer)</SourceLine>
   <SourceLine>If iPos = 0 Or iPos = m_rtf.m_cpArr.Ubound Or m_rtf.m_cpArr(iPos).iFunctie = 0 Or (iPos &gt; 0 And m_rtf.m_cpArr(iPos - 1).iFunctie = 0) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>While iPos &lt; m_rtf.m_cpArr.Ubound And m_rtf.m_cpArr(iPos).iFunctie &lt;&gt; 0</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CorrectPositionDownIfFunction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1873682431</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CorrectPositionDownIfFunction(ByRef iPos As Integer)</SourceLine>
   <SourceLine>If iPos = 0 Or iPos = m_rtf.m_cpArr.Ubound Or m_rtf.m_cpArr(iPos).iFunctie = 0 Or (iPos &gt; 0 And m_rtf.m_cpArr(iPos - 1).iFunctie = 0) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>While iPos &gt; 0 And m_rtf.m_cpArr(iPos - 1).iFunctie &lt;&gt; 0</SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChangeCursorBy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>910864383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ChangeCursorBy(iChange As Integer)</SourceLine>
   <SourceLine>Dim bFullRedraw As Boolean</SourceLine>
   <SourceLine>Dim iCurrentBottom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>bFullRedraw = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bFullRedraw = False</SourceLine>
   <SourceLine>iCurrentBottom = m_rtf.m_cpArr(m_iSelStart).iBottom</SourceLine>
   <SourceLine>If m_bCursorVisible Then</SourceLine>
   <SourceLine>DrawCursorAndMakeUndoPointIfNecessary</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelStart + iChange &gt;= 0 And m_iSelStart + iChange &lt;= m_rtf.m_chArr.Ubound And m_rtf.m_chArr(m_iSelStart + iChange) = Chr(10) Then</SourceLine>
   <SourceLine>If iChange &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + iChange</SourceLine>
   <SourceLine>If m_iSelStart &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelStart = 0</SourceLine>
   <SourceLine>ElseIf m_iSelStart &gt; m_rtf.m_cpArr.Ubound Then</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iChange &lt; 0 Then</SourceLine>
   <SourceLine>CorrectPositionDownIfFunction(m_iSelStart)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>CorrectPositionUpIfFunction(m_iSelStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bFullRedraw And m_rtf.m_cpArr(m_iSelStart).iBottom &lt;&gt; iCurrentBottom Then</SourceLine>
   <SourceLine>bFullRedraw = ((m_rtf.m_cpArr(m_iSelStart).iBottom - m_rtf.m_cpArr(m_iSelStart).iHeight) &lt; m_iScrollValue Or _</SourceLine>
   <SourceLine>m_rtf.m_cpArr(m_iSelStart).iBottom &gt; (m_iScrollValue + Self.Height - m_iTopText))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bFullRedraw Then</SourceLine>
   <SourceLine>m_rtf.SetNextRedrawWithMask</SourceLine>
   <SourceLine>RefreshWithoutRecalculate</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>DrawCursorAndMakeUndoPointIfNecessary</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iChange As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetDirty</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>497162239</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetDirty()</SourceLine>
   <SourceLine>If Not m_bChangedSinceUndo Then</SourceLine>
   <SourceLine>m_iTicksLastUndo = Ticks</SourceLine>
   <SourceLine>m_bChangedSinceUndo = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iTicksLastDirtyAction = Ticks</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsUndoPossible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1982099455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsUndoPossible() As Boolean</SourceLine>
   <SourceLine>Return (m_bChangedSinceUndo Or m_strArrUndoRTF.Ubound &gt; 0)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>302901247</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionUndo()</SourceLine>
   <SourceLine>Dim strRtf As String</SourceLine>
   <SourceLine>Dim iSelStart As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsUndoPossible And Not m_bReadOnly Then</SourceLine>
   <SourceLine>iSelStart = m_iSelStart</SourceLine>
   <SourceLine>If m_bChangedSinceUndo Then</SourceLine>
   <SourceLine>strRtf = m_strArrUndoRTF(m_strArrUndoRTF.Ubound)</SourceLine>
   <SourceLine>m_bChangedSinceUndo = False</SourceLine>
   <SourceLine>m_iTicksLastUndo = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtf = m_strArrUndoRTF(m_strArrUndoRTF.Ubound - 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strArrUndoRTF.Remove(m_strArrUndoRTF.Ubound)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.SetRTF(strRtf)</SourceLine>
   <SourceLine>m_iSelStart = iSelStart</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_chArr.Ubound </SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RequestRefresh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>272803839</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RequestRefresh()</SourceLine>
   <SourceLine>If m_iCurrentDrawingSpeed &gt; 100 Then</SourceLine>
   <SourceLine>m_bRequestRefresh = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Super.Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Event_GetDefaultStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>339304447</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Event_GetDefaultStyle(rtf As clsRTFBox_Data, ByRef strFont As String, ByRef iFontSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean)</SourceLine>
   <SourceLine>#Pragma Unused rtf</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GetDefaultStyle(strFont, iFontSize, bBold, bItalic, bUnderline)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rtf As clsRTFBox_Data, ByRef strFont As String, ByRef iFontSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CheckSelectionBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>858058751</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CheckSelectionBounds()</SourceLine>
   <SourceLine>If m_iSelP1 &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelP1 = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelP2 &lt; 0 Then</SourceLine>
   <SourceLine>m_iSelP2 = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelP2 &gt; m_rtf.m_chArr.Ubound Then</SourceLine>
   <SourceLine>m_iSelP2 = m_rtf.m_chArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelP1 &gt; m_iSelP2 Then</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelP2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelStart &lt; m_iSelP1 Then</SourceLine>
   <SourceLine>m_iSelStart = m_iSelP1</SourceLine>
   <SourceLine>ElseIf m_iSelStart &gt; m_iSelP2 Then</SourceLine>
   <SourceLine>m_iSelStart = m_iSelP2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelLen = m_iSelP2 - m_iSelP1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionShadow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>911468543</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionShadow()</SourceLine>
   <SourceLine>Dim bShadow As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bShadow = Not IsShadow</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetShadow(t) = bShadow</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextShadow(m_iSelStart, bShadow)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionStrikeThrough</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1741119487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionStrikeThrough()</SourceLine>
   <SourceLine>Dim bStrikeThrough As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bStrikeThrough = Not IsStrikeThrough</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetStrikeThrough(t) = bStrikeThrough</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextStrikeThrough(m_iSelStart, bStrikeThrough)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsShadow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2119999487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsShadow() As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsShadow(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsShadow(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsShadow(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsStrikeThrough</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1485926399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsStrikeThrough() As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsStrikeThrough(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsStrikeThrough(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsStrikeThrough(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionZoomIn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>539394047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionZoomIn()</SourceLine>
   <SourceLine>If m_rtf.SetScale(m_rtf.GetScale + 0.25) Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionZoomOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1884778495</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionZoomOut()</SourceLine>
   <SourceLine>If m_rtf.SetScale(m_rtf.GetScale - 0.25) Then</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1146058751</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetText() As String</SourceLine>
   <SourceLine>Return m_rtf.GetText</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionInsertPageBreak</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>293904383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionInsertPageBreak()</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>m_rtf.InsertFunctie(iPos, "page")</SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetTableMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2008121343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTableMenu(iX As Integer, iY As Integer) As MenuItem</SourceLine>
   <SourceLine>Dim mnuBase As MenuItem</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim strCmd As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if TargetWin32 </SourceLine>
   <SourceLine>strCmd = "ctrl-"</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>strCmd = "cmd-"</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase = New MenuItem</SourceLine>
   <SourceLine>mnuBase.Text = "Table"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP1 To m_iSelP2</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then </SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Border"</SourceLine>
   <SourceLine>If m_rtf.m_tcArr(iCell).bBorder Then</SourceLine>
   <SourceLine>mnu.Checked = True</SourceLine>
   <SourceLine>mnu.Tag = "tbl.hideborder"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu.Tag = "tbl.showborder"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>mnuBase.Append(GetColorMenu("TBL.COLOR", m_rtf.Table_GetCellColor(iCell)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = m_iSelP2 + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCell = m_rtf.GetTableCellOnXY(iX, iY - m_iTopText + m_iScrollValue)</SourceLine>
   <SourceLine>'iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>'If iCell &gt; m_rtf.m_tcArr.Ubound Then</SourceLine>
   <SourceLine>'m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell = -1</SourceLine>
   <SourceLine>'iCell = -1</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Row    (" + strCmd + "ENTER)"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.addrow"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Cell    (" + strCmd + "Shift-ENTER)"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.addcell"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Border"</SourceLine>
   <SourceLine>If m_rtf.m_tcArr(iCell).bBorder Then</SourceLine>
   <SourceLine>mnu.Checked = True</SourceLine>
   <SourceLine>mnu.Tag = "tbl.hideborder"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu.Tag = "tbl.showborder"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>mnuBase.Append(GetColorMenu("TBL.COLOR", m_rtf.Table_GetCellColor(iCell)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Delete Cell"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.delcell"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Delete Row"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.delrow"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Delete Table"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.deltable"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Insert Table"</SourceLine>
   <SourceLine>mnu.Tag = "tbl.addrow"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If mnuBase.Count = 0 Then</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iX As Integer, iY As Integer</ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1573335039</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionTable(strAction As String, iX As Integer, iY As Integer)</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine>Dim bFullRefresh As Boolean</SourceLine>
   <SourceLine>Dim bPartialRefresh As Boolean</SourceLine>
   <SourceLine>Dim bBorder As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim strArrSplit() As String</SourceLine>
   <SourceLine>Dim clColor As Color</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bFullRefresh = False </SourceLine>
   <SourceLine>bPartialRefresh = False</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If strAction = "showborder" Or strAction = "hideborder" Then</SourceLine>
   <SourceLine>bBorder = (strAction = "showborder")</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>For t = m_iSelP1 To m_iSelP2</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>If iCell &lt;&gt; iLastCell Then</SourceLine>
   <SourceLine>m_rtf.m_tcArr(iCell).bBorder = bBorder</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLastCell = iCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>ElseIf strAction.Left(6) = "COLOR." Then</SourceLine>
   <SourceLine>strArrSplit = strAction.Mid(7).Split(".")</SourceLine>
   <SourceLine>clColor = RGB(Val(strArrSplit(0)), Val(strArrSplit(1)), Val(strArrSplit(2)))</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>For t = m_iSelP1 To m_iSelP2</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>If iCell &lt;&gt; iLastCell Then</SourceLine>
   <SourceLine>m_rtf.Table_SetCellColor(iCell, clColor)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLastCell = iCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iX &gt;= 0 And iY &gt;= 0 Then</SourceLine>
   <SourceLine>iCell = m_rtf.GetTableCellOnXY(iX, iY - m_iTopText + m_iScrollValue)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strAction = "addrow" Then</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iPos = m_rtf.Table_GetFirstCharacterInThisTableCell(iCell)</SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.Table_AddRow(iPos)</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.Table_AddRow(m_iSelStart)</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iCell = -1 Then</SourceLine>
   <SourceLine>iCell = m_rtf.m_rpArrParagraph(m_rtf.m_cpArr(m_iSelStart).iParagraph).TableCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>If strAction = "showborder" Then</SourceLine>
   <SourceLine>m_rtf.m_tcArr(iCell).bBorder = True</SourceLine>
   <SourceLine>bPartialRefresh = True</SourceLine>
   <SourceLine>ElseIf strAction = "hideborder" Then</SourceLine>
   <SourceLine>m_rtf.m_tcArr(iCell).bBorder = False</SourceLine>
   <SourceLine>bPartialRefresh = True</SourceLine>
   <SourceLine>ElseIf strAction.Left(6) = "COLOR." Then</SourceLine>
   <SourceLine>strArrSplit = strAction.Mid(7).Split(".")</SourceLine>
   <SourceLine>clColor = RGB(Val(strArrSplit(0)), Val(strArrSplit(1)), Val(strArrSplit(2)))</SourceLine>
   <SourceLine>m_rtf.Table_SetCellColor(iCell, clColor)</SourceLine>
   <SourceLine>bPartialRefresh = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPos = m_rtf.Table_GetFirstCharacterInThisTableCell(iCell)</SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strAction = "addcell" Then</SourceLine>
   <SourceLine>m_iSelStart = m_rtf.Table_AddCell(iPos)</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>ElseIf strAction = "delcell" Then</SourceLine>
   <SourceLine>m_rtf.Table_DelCell(iPos, False) </SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>ElseIf strAction = "delrow" Then</SourceLine>
   <SourceLine>m_rtf.Table_DelCell(iPos, True) </SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>ElseIf strAction = "deltable" Then</SourceLine>
   <SourceLine>m_rtf.Table_DelTable(iPos) </SourceLine>
   <SourceLine>bFullRefresh = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Break</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bFullRefresh Then</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>ElseIf bPartialRefresh Then</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelStart</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart</SourceLine>
   <SourceLine>TextChanged </SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strAction As String, iX As Integer, iY As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawRTF_GetArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>442310655</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DrawRTF_GetArray(iWidth As Integer, iHeightFirstPage As Integer, iHeightOtherPages As Integer) As Picture()</SourceLine>
   <SourceLine>Return m_rtf.DrawRTF_GetArray(iWidth, iHeightFirstPage, iHeightOtherPages, (256 * 256 * 256), Nil, 0) </SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iWidth As Integer, iHeightFirstPage As Integer, iHeightOtherPages As Integer</ItemParams>
  <ItemResult>Picture()</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionInsertPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1311051775</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionInsertPicture()</SourceLine>
   <SourceLine>Dim dlg As OpenDialog</SourceLine>
   <SourceLine>Dim fi As FolderItem</SourceLine>
   <SourceLine>Dim ftJPG As FileType</SourceLine>
   <SourceLine>Dim ftPNG As FileType</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim iPictureFormat As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>dlg = New OpenDialog</SourceLine>
   <SourceLine>#If TargetLinux Then</SourceLine>
   <SourceLine>dlg.InitialDirectory = SpecialFolder.Home</SourceLine>
   <SourceLine>#Else </SourceLine>
   <SourceLine>dlg.InitialDirectory = SpecialFolder.Documents</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine>ftJPG = New FileType</SourceLine>
   <SourceLine>ftJPG.Name = "image/jpeg"</SourceLine>
   <SourceLine>ftJPG.MacType = "JPEG"</SourceLine>
   <SourceLine>ftJPG.Extensions = "jpg;jpeg"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ftPNG = New FileType</SourceLine>
   <SourceLine>ftPNG.Name = "image/png"</SourceLine>
   <SourceLine>ftPNG.MacType = "PNG"</SourceLine>
   <SourceLine>ftPNG.Extensions = "png"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dlg.Filter = ftJPG + ftPNG</SourceLine>
   <SourceLine>fi = dlg.ShowModal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(fi) And fi.Exists And Not fi.Directory Then</SourceLine>
   <SourceLine>pic = Picture.Open(fi)</SourceLine>
   <SourceLine>If fi.Type = "image/png" Or fi.Name.Right(4) = ".png" Then</SourceLine>
   <SourceLine>iPictureFormat = clsRTFBox_Data.PICFORMAT_PNG</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPictureFormat = clsRTFBox_Data.PICFORMAT_JPG</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Self.SetFocus</SourceLine>
   <SourceLine>InsertPicture(pic, iPictureFormat)</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>744245247</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertPicture(pic As Picture, iPictureFormat As Integer = 0)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(pic) Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>m_rtf.InsertPicture(iPos, pic, iPictureFormat)</SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>pic As Picture, iPictureFormat As Integer = 0</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionResizePicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>851277823</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionResizePicture(iPicture As Integer)</SourceLine>
   <SourceLine>Dim bAuto As Boolean</SourceLine>
   <SourceLine>Dim iOriginalWidth As Integer</SourceLine>
   <SourceLine>Dim iOriginalHeight As Integer</SourceLine>
   <SourceLine>Dim iSizeWidth As Integer</SourceLine>
   <SourceLine>Dim iSizeHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bAuto = m_rtf.m_rpicArr(iPicture - 1).ResizedAutomatic</SourceLine>
   <SourceLine>iOriginalWidth = m_rtf.m_rpicArr(iPicture - 1).m_pic.Width</SourceLine>
   <SourceLine>iOriginalHeight = m_rtf.m_rpicArr(iPicture - 1).m_pic.Height</SourceLine>
   <SourceLine>If bAuto Then</SourceLine>
   <SourceLine>iSizeWidth = m_rtf.m_rpicArr(iPicture - 1).m_picResized.Width</SourceLine>
   <SourceLine>iSizeHeight = m_rtf.m_rpicArr(iPicture - 1).m_picResized.Height</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iSizeWidth = m_rtf.m_rpicArr(iPicture - 1).m_iMaxWidth</SourceLine>
   <SourceLine>iSizeHeight = m_rtf.m_rpicArr(iPicture - 1).m_iMaxHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If wndRTFPictureResize.ShowResize(iOriginalWidth, iOriginalHeight, bAuto, iSizeWidth, iSizeHeight) Then</SourceLine>
   <SourceLine>If bAuto Then</SourceLine>
   <SourceLine>m_rtf.m_rpicArr(iPicture - 1).m_iMaxWidth = m_rtf.m_rpicArr(iPicture - 1).m_pic.Width</SourceLine>
   <SourceLine>m_rtf.m_rpicArr(iPicture - 1).m_iMaxHeight = m_rtf.m_rpicArr(iPicture - 1).m_pic.Height</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.m_rpicArr(iPicture - 1).m_iMaxWidth = iSizeWidth</SourceLine>
   <SourceLine>m_rtf.m_rpicArr(iPicture - 1).m_iMaxHeight = iSizeHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.SetFocus</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPicture As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionInsertCheckBox</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>662943743</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionInsertCheckBox()</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine>Dim iIndent As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>iRefreshFrom = m_iSelP1</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPos = m_iSelStart</SourceLine>
   <SourceLine>m_rtf.InsertFunctie(iPos, "checkbox")</SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_rtf.m_cpArr(iPos - 3).btAscSpecial = 10 And Not m_rtf.IsInTableCell(iPos - 3) Then</SourceLine>
   <SourceLine>iIndent = m_rtf.GetNextTabstop(iPos - 2, 0)</SourceLine>
   <SourceLine>iPar = m_rtf.SetIndent(iPos - 2, iIndent, (0 - iIndent))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ShowRTFTouchbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1743190015</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ShowRTFTouchbar(bShow As Boolean)</SourceLine>
   <SourceLine>#if not TargetWin32 And clsRTFBox_Data.ALLOW_NSTOUCHBAR</SourceLine>
   <SourceLine>Dim tb As RTF_NSTouchBarMBS</SourceLine>
   <SourceLine>Dim strArrButtons() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_touchbar = Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bShow And Not m_bTouchbarUnavailable Then</SourceLine>
   <SourceLine>#Pragma BreakOnExceptions Off</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>tb = New RTF_NSTouchBarMBS</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsBold Then</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Bold1"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Bold0"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsItalic Then</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Italic1"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Italic0"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsUnderline Then</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Underlined1"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrButtons.Append "RTF_Underlined0"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>tb.setDefaultItemIdentifiers strArrButtons</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tb.AssignToWindow Self.Window</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_touchbar = tb</SourceLine>
   <SourceLine>Catch err As FunctionNotFoundException</SourceLine>
   <SourceLine>m_touchbar = Nil</SourceLine>
   <SourceLine>m_bTouchbarUnavailable = True</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>#Pragma BreakOnExceptions Default</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>m_touchbar = Nil</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bShow As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateRTFTouchbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1089857535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UpdateRTFTouchbar()</SourceLine>
   <SourceLine>If Not IsNull(m_touchbar) Then</SourceLine>
   <SourceLine>ShowRTFTouchbar(True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetScaleFactor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>339787775</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetScaleFactor(ByRef iScale As Integer, ByRef dScaleBase As Double)</SourceLine>
   <SourceLine>Dim dScale As Double</SourceLine>
   <SourceLine>Dim iScaleBase As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If App.SupportsHiDPI Then</SourceLine>
   <SourceLine>If IsNull(Window) Then</SourceLine>
   <SourceLine>dScale = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dScale = Window.ScaleFactor</SourceLine>
   <SourceLine>If dScale &lt; 1 Then</SourceLine>
   <SourceLine>dScale = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dScale = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iScale = Round(dScale * 100)</SourceLine>
   <SourceLine>iScaleBase = 100</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScale Mod 100 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 100</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 100</SourceLine>
   <SourceLine>ElseIf iScale Mod 50 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 50</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 50</SourceLine>
   <SourceLine>ElseIf iScale Mod 25 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 25</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 25</SourceLine>
   <SourceLine>ElseIf iScale Mod 20 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 20</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 20</SourceLine>
   <SourceLine>ElseIf iScale Mod 10 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 10</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 10</SourceLine>
   <SourceLine>ElseIf iScale Mod 5 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 5</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 5</SourceLine>
   <SourceLine>ElseIf iScale Mod 4 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 4</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 4</SourceLine>
   <SourceLine>ElseIf iScale Mod 2 = 0 Then</SourceLine>
   <SourceLine>iScale = iScale / 2</SourceLine>
   <SourceLine>iScaleBase = iScaleBase / 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iScaleBase = 1 Then</SourceLine>
   <SourceLine>dScaleBase = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dScaleBase = 1 / iScaleBase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iScale As Integer, ByRef dScaleBase As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>410097663</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionInvisible()</SourceLine>
   <SourceLine>Dim bInvisible As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>bInvisible = Not IsInvisible</SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>For t = m_iSelP2 - 1 To m_iSelP1 Step -1</SourceLine>
   <SourceLine>m_rtf.SetInvisible(t) = bInvisible</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = m_iSelP1</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rtf.SetNextInvisible(m_iSelStart, bInvisible)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>278771711</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsInvisible() As Boolean</SourceLine>
   <SourceLine>Dim bValue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_iSelLen &gt; 0 Then</SourceLine>
   <SourceLine>If m_iSelP1 = m_iSelStart Then</SourceLine>
   <SourceLine>bValue = m_rtf.IsInvisible(m_iSelP1, False)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsInvisible(m_iSelP2 - 1, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValue = m_rtf.IsInvisible(m_iSelStart, True)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionSpellCheck</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>209790975</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionSpellCheck()</SourceLine>
   <SourceLine>m_rtf.SpellCheck(Language)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetSpellCheckerMenu</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>599707647</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetSpellCheckerMenu(iPos As Integer) As MenuItem</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim mnuBase As MenuItem</SourceLine>
   <SourceLine>Dim mnu As MenuItem</SourceLine>
   <SourceLine>Dim mnuSub As MenuItem</SourceLine>
   <SourceLine>Dim strWord As String</SourceLine>
   <SourceLine>Dim iStartWord As Integer</SourceLine>
   <SourceLine>Dim iLengthWord As Integer</SourceLine>
   <SourceLine>Dim strArrSuggest() As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim bks As BKSSpellChecker</SourceLine>
   <SourceLine>Dim oBks As Object</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>oBks = m_rtf.GetSpellChecker(Language)</SourceLine>
   <SourceLine>If Not IsNull(oBks) And oBks IsA BKSSpellChecker Then</SourceLine>
   <SourceLine>bks = BKSSpellChecker(oBks)</SourceLine>
   <SourceLine>mnuBase = New MenuItem</SourceLine>
   <SourceLine>mnuBase.Text = "Spellchecker"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Check now"</SourceLine>
   <SourceLine>mnu.Tag = "Spellchecker"</SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strWord = GetWord(iPos, iStartWord, iLengthWord)</SourceLine>
   <SourceLine>If iLengthWord &gt; 0 And Not IsNull(bks.CheckSpelling(strWord)) Then</SourceLine>
   <SourceLine>strArrSuggest = bks.SuggestionsForWord(strWord)</SourceLine>
   <SourceLine>If strArrSuggest.Ubound &gt; 0 Then</SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Suggestions"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To strArrSuggest.Ubound</SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = strArrSuggest(t)</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.Replace." + Format(t, "0")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnu = New MenuItem</SourceLine>
   <SourceLine>mnu.Text = "Language"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Deutsch"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.DE"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "DE")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "English"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.EN"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "EN")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Español"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.ES"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "ES")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Français"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.FR"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "FR")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Italiano"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.IT"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "IT")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Nederlands"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.NL"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "NL")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuSub = New MenuItem</SourceLine>
   <SourceLine>mnuSub.Text = "Polski"</SourceLine>
   <SourceLine>mnuSub.Tag = "SC.PL"</SourceLine>
   <SourceLine>mnuSub.Checked = (m_strLanguage = "PL")</SourceLine>
   <SourceLine>mnu.Append(mnuSub)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mnuBase.Append(mnu)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>mnuBase = Nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mnuBase</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>MenuItem</ItemResult>
 </Method>
 <Method>
  <ItemName>ActionSpellCheck_Action</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1633071103</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionSpellCheck_Action(strFunction As String, strText As String, iPosClicked As Integer)</SourceLine>
   <SourceLine>#if clsRTFBox_Data.ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>Dim bIgnore As Boolean</SourceLine>
   <SourceLine>Dim strLanguage As String</SourceLine>
   <SourceLine>Dim iStartWord As Integer</SourceLine>
   <SourceLine>Dim iLengthWord As Integer</SourceLine>
   <SourceLine>Dim strWord As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strFunction.Len = 2 Then</SourceLine>
   <SourceLine>strLanguage = strFunction</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strLanguage &lt;&gt; m_strLanguage Then</SourceLine>
   <SourceLine>Language = strLanguage</SourceLine>
   <SourceLine>If Language = strLanguage And Not IsNull(m_rtf.GetSpellChecker(Language)) Then</SourceLine>
   <SourceLine>m_rtf.SpellCheck(Language)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strFunction.Left(8) = "Replace." And strText.Len &gt; 0 And iPosClicked &gt;= 0 Then</SourceLine>
   <SourceLine>strWord = GetWord(iPosClicked, iStartWord, iLengthWord)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = iStartWord</SourceLine>
   <SourceLine>m_iSelLen = iLengthWord</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart + iLengthWord</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRefreshFrom = iStartWord</SourceLine>
   <SourceLine>DeleteCurrentSelection</SourceLine>
   <SourceLine>For t = 1 To strText.Len</SourceLine>
   <SourceLine>m_rtf.InsertChar(m_iSelStart, strText.Mid(t, 1))</SourceLine>
   <SourceLine>m_iSelStart = m_iSelStart + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelStart + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strFunction As String, strText As String, iPosClicked As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetWord</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1686747135</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetWord(iPos As Integer, ByRef iStartWord As Integer, ByRef iLengthWord As Integer) As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim strWord As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strWord = ""</SourceLine>
   <SourceLine>iStartWord = -1</SourceLine>
   <SourceLine>iLengthWord = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And Asc(m_rtf.m_chArr(iPos)) &gt; 32 Then</SourceLine>
   <SourceLine>strWord = m_rtf.m_chArr(iPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iPos - 1</SourceLine>
   <SourceLine>While t &gt;= 0 And Asc(m_rtf.m_chArr(t)) &gt; 32</SourceLine>
   <SourceLine>strWord = m_rtf.m_chArr(t) + strWord</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>If t &lt; 0 Then t = 0</SourceLine>
   <SourceLine>iStartWord = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iPos + 1</SourceLine>
   <SourceLine>While t &lt; m_rtf.m_cpArr.Ubound And Asc(m_rtf.m_chArr(t)) &gt; 32</SourceLine>
   <SourceLine>strWord = strWord + m_rtf.m_chArr(t)</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLengthWord = strWord.Len</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strWord</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, ByRef iStartWord As Integer, ByRef iLengthWord As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Print</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>233308159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Print()</SourceLine>
   <SourceLine>m_rtf.Print</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionHyperlink</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1285861375</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionHyperlink(iPos As Integer)</SourceLine>
   <SourceLine>Dim strHyperlink As String</SourceLine>
   <SourceLine>Dim strDescription As String</SourceLine>
   <SourceLine>Dim bInsert As Boolean</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>strHyperlink = m_rtf.GetHyperlinkWithDescription(iPos, strDescription)</SourceLine>
   <SourceLine>If strHyperlink.Len = 0 And iPos &gt; 0 Then</SourceLine>
   <SourceLine>strHyperlink = m_rtf.GetHyperlinkWithDescription(iPos - 1, strDescription)</SourceLine>
   <SourceLine>If strHyperlink.Len &gt; 0 Then</SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strHyperlink.Len = 0 Then</SourceLine>
   <SourceLine>strDescription = ""</SourceLine>
   <SourceLine>bInsert = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bInsert = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If wndHyperlink.Show(strDescription, strHyperlink) Then</SourceLine>
   <SourceLine>If Not bInsert Then</SourceLine>
   <SourceLine>m_rtf.DeleteHyperlink(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.InsertHyperlink(iPos, strHyperlink, strDescription)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActionHTMLCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>208683007</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActionHTMLCode(iPos As Integer)</SourceLine>
   <SourceLine>Dim strHtmlCode As String</SourceLine>
   <SourceLine>Dim bInsert As Boolean</SourceLine>
   <SourceLine>Dim iRefreshFrom As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bReadOnly Then</SourceLine>
   <SourceLine>strHtmlCode = m_rtf.GetEmbeddedHtmlCode(iPos)</SourceLine>
   <SourceLine>If strHtmlCode.Len = 0 And iPos &gt; 0 Then</SourceLine>
   <SourceLine>strHtmlCode = m_rtf.GetEmbeddedHtmlCode(iPos - 1)</SourceLine>
   <SourceLine>If strHtmlCode.Len &gt; 0 Then</SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strHtmlCode.Len = 0 Then</SourceLine>
   <SourceLine>bInsert = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bInsert = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If wndInputBox.Question("Embed Html", "Html", strHtmlCode) Then</SourceLine>
   <SourceLine>If Not bInsert Then</SourceLine>
   <SourceLine>m_rtf.DeleteEmbeddedHtmlCode(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_rtf.InsertEmbeddedHtmlCode(iPos, strHtmlCode)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iSelStart = iPos</SourceLine>
   <SourceLine>m_iSelP1 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelP2 = m_iSelStart</SourceLine>
   <SourceLine>m_iSelLen = 0</SourceLine>
   <SourceLine>SetDirty</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_iRedrawFromPos = iRefreshFrom</SourceLine>
   <SourceLine>m_iRedrawToPos = m_iSelP2 + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>TextChanged</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Event_ShowURL</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2041548799</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Event_ShowURL(rtf As clsRTFBox_Data, strURL As String) As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rtf As clsRTFBox_Data, strURL As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Hook>
  <ItemName>TextChanged</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GotFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>LostFocus</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>MouseDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>iX As Integer, iY As Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>KeyDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>strKey As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>FillFunctionValue</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>strFunction As String, ByRef strValue As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>GetFunctions</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>ByRef strArrFunctions() As String, ByRef strArrNames() As String</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>GetDefaultStyle</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>ByRef strFont As String, ByRef iFontSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>ShowURL</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>strURL As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Property>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1565122559</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Value As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Value As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>m_bChangedSinceUndo = False</SourceLine>
   <SourceLine>ReDim m_strArrUndoRTF(-1)</SourceLine>
   <SourceLine>m_strArrUndoRTF.Append(value)</SourceLine>
   <SourceLine>m_iTicksLastUndo = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rtf.SetRTF(value)</SourceLine>
   <SourceLine>m_rtf.ClearRTFBuffer</SourceLine>
   <SourceLine>m_iRedrawFromPos = 0</SourceLine>
   <SourceLine>m_iRedrawToPos = m_rtf.m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return m_rtf.GetRTF</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>m_pic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>194115583</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_pic As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_pic As Picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelLen</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>751314943</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelLen As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelLen As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bReadOnly</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1980829695</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bReadOnly As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bReadOnly As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelP1</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>813051903</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelP1 As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelP1 As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelP2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>736968703</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelP2 As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelP2 As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_tmr</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>155224063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_tmr As Timer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_tmr As Timer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_rtfArr()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>436854783</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_rtfArr() As clsRTFBox</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_rtfArr() As clsRTFBox</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_bGotFocus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1696618495</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bGotFocus As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bGotFocus As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bCursorVisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1539706879</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bCursorVisible As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bCursorVisible As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iKlikStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>432867327</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iKlikStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iKlikStart As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_rtf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>197552127</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_rtf As clsRTFBox_Data</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_rtf As clsRTFBox_Data</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iRedrawFromPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1380044799</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iRedrawFromPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iRedrawFromPos As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iScrollValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>658954239</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iScrollValue As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iScrollValue As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iScrollMaximum</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>50860031</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iScrollMaximum As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iScrollMaximum As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bMinActive</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1775839231</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bMinActive As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bMinActive As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bPlusActive</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>361181183</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bPlusActive As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bPlusActive As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTicksDoubleClick</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>754737151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iTicksDoubleClick As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTicksDoubleClick As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelectingCurrentStop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>901292031</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelectingCurrentStop As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelectingCurrentStop As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelectingXDiff</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>858329087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelectingXDiff As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelectingXDiff As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelectingYDiff</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1477818367</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelectingYDiff As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelectingYDiff As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTicksLastCursorUpdate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>255565823</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_iTicksLastCursorUpdate As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTicksLastCursorUpdate As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_bLayoutBar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>376309759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bLayoutBar As Boolean = True</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bLayoutBar As Boolean = True</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTopText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>841826303</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iTopText As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTopText As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrVoorkeurFonts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1797603327</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_strArrVoorkeurFonts() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrVoorkeurFonts() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrFonts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1108051967</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_strArrFonts() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrFonts() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_iLayoutCtrlWidth()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>433696767</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iLayoutCtrlWidth() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iLayoutCtrlWidth() As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iArrChangedBullets()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1715976191</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iArrChangedBullets() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iArrChangedBullets() As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strBullet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1378172927</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strBullet As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strBullet As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bAutoScroll</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>349433855</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bAutoScroll As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bAutoScroll As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTicksTripleClick</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1909848063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iTicksTripleClick As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTicksTripleClick As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iArrRTFId()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>249092095</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_iArrRTFId() As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iArrRTFId() As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_iLastRTFId</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>453578751</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_iLastRTFId As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iLastRTFId As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_iIndex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1717825535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iIndex As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iIndex As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrUndoRTF()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1161471999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strArrUndoRTF() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrUndoRTF() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTicksLastUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1363365887</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iTicksLastUndo As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTicksLastUndo As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bChangedSinceUndo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>579475455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bChangedSinceUndo As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bChangedSinceUndo As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bRequestRefresh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1867501567</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bRequestRefresh As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bRequestRefresh As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iCurrentDrawingSpeed</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>867880959</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iCurrentDrawingSpeed As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iCurrentDrawingSpeed As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iTicksLastDirtyAction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1211801599</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iTicksLastDirtyAction As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iTicksLastDirtyAction As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iRedrawToPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1134520319</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iRedrawToPos As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iRedrawToPos As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_iSelStart</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>416823295</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_iSelStart As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_iSelStart As Integer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bAddPuntjesToNextKeydown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1374140415</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bAddPuntjesToNextKeydown As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bAddPuntjesToNextKeydown As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bAddKaptjeToNextKeydown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>481398783</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bAddKaptjeToNextKeydown As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bAddKaptjeToNextKeydown As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Readonly</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1606955007</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Readonly As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Readonly As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>m_bReadOnly = value</SourceLine>
   <SourceLine>m_pic = Nil</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return m_bReadOnly</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>m_touchbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1093988351</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_touchbar As Object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_touchbar As Object</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bTouchbarUnavailable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>572663807</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_bTouchbarUnavailable As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bTouchbarUnavailable As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_strLanguage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>252317695</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strLanguage As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strLanguage As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Language</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>105228287</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Language As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Language As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>If value = "DE" Or value = "Deutsch" Or value = "German" Then</SourceLine>
   <SourceLine>m_strLanguage = "DE"</SourceLine>
   <SourceLine>ElseIf value = "EN" Or value = "English" Then</SourceLine>
   <SourceLine>m_strLanguage = "EN"</SourceLine>
   <SourceLine>ElseIf value = "ES" Or value = "Español" Or value = "Spanish" Then</SourceLine>
   <SourceLine>m_strLanguage = "ES"</SourceLine>
   <SourceLine>ElseIf value = "FR" Or value = "Français" Or value = "French" Then</SourceLine>
   <SourceLine>m_strLanguage = "FR"</SourceLine>
   <SourceLine>ElseIf value = "IT" Or value = "Italiano" Or value = "Italian" Then</SourceLine>
   <SourceLine>m_strLanguage = "IT"</SourceLine>
   <SourceLine>ElseIf value = "NL" Or value = "Nederlands" Or value = "Dutch" Then</SourceLine>
   <SourceLine>m_strLanguage = "NL"</SourceLine>
   <SourceLine>ElseIf value = "PL" Or value = "Polski" Or value = "Polish" Then</SourceLine>
   <SourceLine>m_strLanguage = "PL"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>'More language dictionaries at: https://cgit.freedesktop.org/libreoffice/dictionaries/tree/</SourceLine>
   <SourceLine>'Example download command: curl -o pl.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/pl_PL/pl_PL.dic</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strLanguage.Len = 0 Then</SourceLine>
   <SourceLine>m_strLanguage = "EN"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_strLanguage 'strRtVal</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>m_strPreviousSeperateBulletFromTextWith</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2134839295</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strPreviousSeperateBulletFromTextWith As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strPreviousSeperateBulletFromTextWith As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strPreviousBullet</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2126841855</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strPreviousBullet As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strPreviousBullet As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bScrollbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>645511167</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bScrollbar As Boolean = True</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bScrollbar As Boolean = True</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Scrollbar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>159961087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Scrollbar As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Scrollbar As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>m_bScrollbar = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>Return m_bScrollbar</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>m_bAntiAliasing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>802564095</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bAntiAliasing As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bAntiAliasing As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>AntiAlias</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1959995391</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AntiAlias As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AntiAlias As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>If Not IsNull(m_rtf) And m_rtf.AntiAlias &lt;&gt; value Then</SourceLine>
   <SourceLine>m_rtf.AntiAlias = value</SourceLine>
   <SourceLine>Refresh</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>If Not IsNull(m_rtf) Then</SourceLine>
   <SourceLine>Return m_rtf.AntiAlias</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>String</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
   <EditorType>Integer</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>String</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>100</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockLeft</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockTop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockRight</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LockBottom</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabPanelIndex</ObjName>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabIndex</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TabStop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Visible</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>HelpTag</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AutoDeactivate</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Enabled</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseFocusRing</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Backdrop</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Appearance</PropertyGroup>
   <ItemType>Picture</ItemType>
   <EditorType>Picture</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptFocus</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AcceptTabs</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DoubleBuffer</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EraseBackground</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Transparent</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>InitialParent</ObjName>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Value</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Readonly</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Language</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Scrollbar</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AntiAlias</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>CURSORTICKS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2015813631</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>42</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSBOLD</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>846831615</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSITALIC</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1693302783</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>5</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSUNDERLINE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1750102015</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>6</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSFONT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1846972415</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSFONTSIZE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>287139839</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSAAA_LAST</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>485773311</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>17</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSCOLOR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1937680383</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>8</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSALIGNLEFT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>447737855</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>10</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSALIGNCENTER</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>775163903</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>11</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSALIGNRIGHT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>870828031</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>12</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSJUMPIN</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1629186047</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>15</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSJUMPOUT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1090744319</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>14</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CTRLPOSUNDO</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>150745087</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>17</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
</block>
</RBProject>
