<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2016r4.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="640943054">
 <ObjName>clsRTFBox_Data</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>ParseRTF_SplitParagraphs</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_SplitParagraphs(strValue As String, ByRef strArrParagraphs() As String, ByRef iArrParagraphAlignment() As Integer, ByRef bArrParagraphStartsDefault() As Boolean, ByRef bArrParagraphNewLine() As Boolean, ByRef iArrTableCell() As Integer)</SourceLine>
   <SourceLine>Dim strArrTeVerwerken() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim strV3 As String</SourceLine>
   <SourceLine>Dim strV4 As String</SourceLine>
   <SourceLine>Dim strV5 As String</SourceLine>
   <SourceLine>Dim strV6 As String</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim tCount As Integer</SourceLine>
   <SourceLine>Dim iLastAlignment As Integer</SourceLine>
   <SourceLine>Dim iCol As Integer</SourceLine>
   <SourceLine>Dim iRow As Integer</SourceLine>
   <SourceLine>Dim iLastRow As Integer</SourceLine>
   <SourceLine>Dim iArrColMinWidths() As Integer</SourceLine>
   <SourceLine>Dim iArrColMaxWidths() As Integer</SourceLine>
   <SourceLine>Dim bArrColBorder() As Boolean</SourceLine>
   <SourceLine>Dim iArrColBackground() As Integer</SourceLine>
   <SourceLine>Dim tCh As Integer</SourceLine>
   <SourceLine>Dim iAsc As Integer</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine>Dim iCurrentCell As Integer</SourceLine>
   <SourceLine>Dim tc As TableCell</SourceLine>
   <SourceLine>Dim iParentCell As Integer</SourceLine>
   <SourceLine>Dim bEindeRij As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>tCount = 0</SourceLine>
   <SourceLine>iCol = -1</SourceLine>
   <SourceLine>iRow = -1</SourceLine>
   <SourceLine>iLastRow = -1</SourceLine>
   <SourceLine>iCurrentCell = -1</SourceLine>
   <SourceLine>iParentCell = -1</SourceLine>
   <SourceLine>ReDim iArrColMinWidths(-1)</SourceLine>
   <SourceLine>ReDim iArrColMaxWidths(-1)</SourceLine>
   <SourceLine>ReDim bArrColBorder(-1)</SourceLine>
   <SourceLine>ReDim iArrColBackground(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine>iArrParagraphAlignment.Append(iLastAlignment)</SourceLine>
   <SourceLine>iArrTableCell.Append(-1)</SourceLine>
   <SourceLine>strArrParagraphs.Append("")</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(True)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(False)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\\", "\backslash")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\u8232", "\line")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\par\pard", "\pard").ReplaceAll("\par \pard", "\pard")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\line\pard\line", "\spikesreplacementline").ReplaceAll("\line\par\line", "\spikesreplacementline")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\line\pard", "\pard").ReplaceAll("\line\par", "\par")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\pard\line", "\pard").ReplaceAll("\par\line", "\par")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\spikesreplacementline", "\line\pard") </SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\par\trowd", "\trowd")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strArrTeVerwerken = strValue.Split("\")</SourceLine>
   <SourceLine>iLast = strArrTeVerwerken.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If strArrTeVerwerken(t).Left(1) = Chr(13) Then</SourceLine>
   <SourceLine>strArrTeVerwerken(t) = strArrTeVerwerken(t).Replace(Chr(13), "line ").LTrim</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strV3 = strArrTeVerwerken(t).Left(3)</SourceLine>
   <SourceLine>ch = strV3.Right(1)</SourceLine>
   <SourceLine>If ch = Chr(13) Or ch = Chr(10) Or ch = Chr(9) Then strV3 = strV3.Left(2) + " "</SourceLine>
   <SourceLine>strV4 = strArrTeVerwerken(t).Left(4)</SourceLine>
   <SourceLine>ch = strV4.Right(1)</SourceLine>
   <SourceLine>If ch = Chr(13) Or ch = Chr(10) Or ch = Chr(9) Then strV4 = strV4.Left(3) + " "</SourceLine>
   <SourceLine>strV5 = strArrTeVerwerken(t).Left(5)</SourceLine>
   <SourceLine>ch = strV5.Right(1)</SourceLine>
   <SourceLine>If ch = Chr(13) Or ch = Chr(10) Or ch = Chr(9) Then strV5 = strV5.Left(4) + " "</SourceLine>
   <SourceLine>strV6 = strArrTeVerwerken(t).Left(6)</SourceLine>
   <SourceLine>ch = strV6.Right(1)</SourceLine>
   <SourceLine>If ch = Chr(13) Or ch = Chr(10) Or ch = Chr(9) Then strV6 = strV6.Left(5) + " "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strArrTeVerwerken(t) = "trowd" Or strV6 = "trowd " Then</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If iRow = -1 Then</SourceLine>
   <SourceLine>iLastRow = iLastRow + 1</SourceLine>
   <SourceLine>iRow = iLastRow</SourceLine>
   <SourceLine>iCol = -1</SourceLine>
   <SourceLine>ReDim iArrColMinWidths(-1)</SourceLine>
   <SourceLine>ReDim iArrColMaxWidths(-1)</SourceLine>
   <SourceLine>ReDim bArrColBorder(-1)</SourceLine>
   <SourceLine>ReDim iArrColBackground(-1)</SourceLine>
   <SourceLine>iCurrentCell = -1</SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>'nesting</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "cell" Or strV5 = "cell " Then</SourceLine>
   <SourceLine>'Einde cell, voorlopig doen we hier niets mee</SourceLine>
   <SourceLine>ElseIf ((strArrTeVerwerken(t) = "row" Or strV4 = "row ") And iRow &gt;= 0) Then</SourceLine>
   <SourceLine>iRow = -1</SourceLine>
   <SourceLine>iCol = -1</SourceLine>
   <SourceLine>iCurrentCell = -1</SourceLine>
   <SourceLine>bEindeRij = True</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t).Left(8) = "clwWidth" Then</SourceLine>
   <SourceLine>'Maximale cellbreedte</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If iRow &gt;= 0 And iCol = -1 Then</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tCh = 8</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>tCh = tCh + 1</SourceLine>
   <SourceLine>ch = strArrTeVerwerken(t).Mid(tCh, 1) </SourceLine>
   <SourceLine>If ch = "" Then</SourceLine>
   <SourceLine>tCh = -1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iAsc = Asc(ch)</SourceLine>
   <SourceLine>If iAsc &gt;= 48 And iAsc &lt;= 57 Then</SourceLine>
   <SourceLine>iWidth = (10 * iWidth) + (iAsc - 48)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tCh = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until tCh &lt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iWidth &gt; 0 Then</SourceLine>
   <SourceLine>'Twips =&gt; Pixels</SourceLine>
   <SourceLine>iWidth = Round(iWidth / 15.0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iArrColMaxWidths.Ubound &lt; 0 Or iArrColMinWidths(iArrColMaxWidths.Ubound) &gt; 0 Then</SourceLine>
   <SourceLine>iArrColMinWidths.Append(0)</SourceLine>
   <SourceLine>iArrColMaxWidths.Append(iWidth)</SourceLine>
   <SourceLine>bArrColBorder.Append(False)</SourceLine>
   <SourceLine>iArrColBackground.Append(-1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iArrColMaxWidths(iArrColMaxWidths.Ubound) = iWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t).Left(5) = "cellx" Then</SourceLine>
   <SourceLine>'Minimale cellbreedte</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If iRow &gt;= 0 And iCol = -1 Then</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tCh = 5</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>tCh = tCh + 1</SourceLine>
   <SourceLine>ch = strArrTeVerwerken(t).Mid(tCh, 1)</SourceLine>
   <SourceLine>If ch = "" Then</SourceLine>
   <SourceLine>tCh = -1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iAsc = Asc(ch)</SourceLine>
   <SourceLine>If iAsc &gt;= 48 And iAsc &lt;= 57 Then</SourceLine>
   <SourceLine>iWidth = (10 * iWidth) + (iAsc - 48)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tCh = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>Loop Until tCh &lt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iWidth &gt;= 0 Then</SourceLine>
   <SourceLine>'Twips =&gt; Pixels </SourceLine>
   <SourceLine>iWidth = Round(iWidth / 15.0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iArrColMinWidths.Append(iWidth)</SourceLine>
   <SourceLine>iArrColMaxWidths.Append(0)</SourceLine>
   <SourceLine>bArrColBorder.Append(False)</SourceLine>
   <SourceLine>iArrColBackground.Append(-1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "clbrdrl" Or strArrTeVerwerken(t) = "clbrdrr" Or _</SourceLine>
   <SourceLine>strArrTeVerwerken(t) = "clbrdrt" Or strArrTeVerwerken(t) = "clbrdrb" Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "brdrs" Or _</SourceLine>
   <SourceLine>strArrTeVerwerken(t) = "brdrdot" Then</SourceLine>
   <SourceLine>'Border</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If iRow &gt;= 0 And iCol = -1 Then</SourceLine>
   <SourceLine>If iArrColMinWidths.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>'Shouldn't be here</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bArrColBorder(bArrColBorder.Ubound) = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t).Left(7) = "clcbpat" Then</SourceLine>
   <SourceLine>'Cell Background Color</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If iRow &gt;= 0 And iCol = -1 Then</SourceLine>
   <SourceLine>If iArrColMinWidths.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>'Shouldn't be here</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iArrColBackground(iArrColBackground.Ubound) = Val(strArrTeVerwerken(t).Mid(8))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "line" Or strArrTeVerwerken(t) = "par" Or strArrTeVerwerken(t) = "pard" Or _</SourceLine>
   <SourceLine>strV5 = "line " Or strV4 = "par " Or strV5 = "pard " Or _</SourceLine>
   <SourceLine>((strArrTeVerwerken(t) = "intbl" Or strV6 = "intbl ") And iRow &gt;= 0) Then 'Or _</SourceLine>
   <SourceLine>'((strArrTeVerwerken(t) = "row" Or strV4 = "row ") And iRow &gt;= 0) Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>If strArrTeVerwerken(t) = "intbl" Or strV6 = "intbl " Then</SourceLine>
   <SourceLine>iCol = iCol + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>''Todo: tablenesting ondersteunen</SourceLine>
   <SourceLine>'tc.iParentCell = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tc.bMetenNodig = True</SourceLine>
   <SourceLine>tc.iCol = iCol</SourceLine>
   <SourceLine>tc.iRow = iRow</SourceLine>
   <SourceLine>If iArrColMinWidths.Ubound &gt;= iCol Then</SourceLine>
   <SourceLine>tc.iMinWidth = iArrColMinWidths(iCol)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tc.iMinWidth = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iArrColMaxWidths.Ubound &gt;= iCol Then</SourceLine>
   <SourceLine>tc.iMaxWidth = iArrColMaxWidths(iCol)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tc.iMaxWidth = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iArrColMinWidths.Ubound &gt;= iCol Then</SourceLine>
   <SourceLine>tc.bBorder = bArrColBorder(iCol)</SourceLine>
   <SourceLine>tc.iColorNr = iArrColBackground(iCol) </SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tc.bBorder = False</SourceLine>
   <SourceLine>tc.iColorNr = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>tc.iHeight = 0</SourceLine>
   <SourceLine>tc.iLeft = 0</SourceLine>
   <SourceLine>tc.iTop = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_tcArr.Append(tc)</SourceLine>
   <SourceLine>iCurrentCell = m_tcArr.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(False)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(False)</SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "pard" Or strV5 = "pard " Then</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(True)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(False)</SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "line" Or strV5 = "line " Then</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(False)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(True)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(False)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iArrTableCell.Append(iCurrentCell)</SourceLine>
   <SourceLine>iArrParagraphAlignment.Append(iLastAlignment)</SourceLine>
   <SourceLine>If strV5 = "line " Or strV5 = "pard " Then</SourceLine>
   <SourceLine>strArrParagraphs.Append(strArrTeVerwerken(t).Mid(6))</SourceLine>
   <SourceLine>ElseIf strV4 = "par " Then</SourceLine>
   <SourceLine>strArrParagraphs.Append(strArrTeVerwerken(t).Mid(5))</SourceLine>
   <SourceLine>ElseIf strV6 = "intbl " Then</SourceLine>
   <SourceLine>strArrParagraphs.Append(strArrTeVerwerken(t).Mid(7))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrParagraphs.Append("")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>tCount = tCount + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If bEindeRij Then</SourceLine>
   <SourceLine>bEindeRij = False</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Append(False)</SourceLine>
   <SourceLine>bArrParagraphNewLine.Append(False)</SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine>iArrTableCell.Append(iCurrentCell)</SourceLine>
   <SourceLine>iArrParagraphAlignment.Append(iLastAlignment)</SourceLine>
   <SourceLine>strArrParagraphs.Append("")</SourceLine>
   <SourceLine>tCount = tCount + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strArrTeVerwerken(t) = "qc" Or strV3 = "qc " Then</SourceLine>
   <SourceLine>iLastAlignment = ALIGNCENTER</SourceLine>
   <SourceLine>iArrParagraphAlignment(tCount) = iLastAlignment</SourceLine>
   <SourceLine>If strArrTeVerwerken(t) &lt;&gt; "qc" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + strArrTeVerwerken(t).Mid(4)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "qr" Or strV3 = "qr " Then</SourceLine>
   <SourceLine>iLastAlignment = ALIGNRIGHT</SourceLine>
   <SourceLine>iArrParagraphAlignment(tCount) = iLastAlignment</SourceLine>
   <SourceLine>If strArrTeVerwerken(t) &lt;&gt; "qr" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + strArrTeVerwerken(t).Mid(4)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "ql" Or strV3 = "ql " Then</SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine>iArrParagraphAlignment(tCount) = iLastAlignment</SourceLine>
   <SourceLine>If strArrTeVerwerken(t) &lt;&gt; "ql" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + strArrTeVerwerken(t).Mid(4)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "qj" Or strV3 = "qj " Then</SourceLine>
   <SourceLine>iLastAlignment = ALIGNLEFT</SourceLine>
   <SourceLine>iArrParagraphAlignment(tCount) = iLastAlignment</SourceLine>
   <SourceLine>If strArrTeVerwerken(t) &lt;&gt; "qj" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + strArrTeVerwerken(t).Mid(4)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) = "" Then</SourceLine>
   <SourceLine>If tCount &gt; 0 Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + "\"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrTeVerwerken(t) = ParseRTF_CutOutUnknownCommand(strArrTeVerwerken(t))</SourceLine>
   <SourceLine>If strArrParagraphs(tCount) = "" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrTeVerwerken(t)</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t).Left(1) = "\" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + strArrTeVerwerken(t)</SourceLine>
   <SourceLine>ElseIf strArrTeVerwerken(t) &lt;&gt; "" Then</SourceLine>
   <SourceLine>strArrParagraphs(tCount) = strArrParagraphs(tCount) + " " + strArrTeVerwerken(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While strArrParagraphs.Ubound &gt; 0 And strArrParagraphs(0) = ""</SourceLine>
   <SourceLine>strArrParagraphs.Remove(0)</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Remove(0)</SourceLine>
   <SourceLine>iArrParagraphAlignment.Remove(0)</SourceLine>
   <SourceLine>iArrTableCell.Remove(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bArrParagraphStartsDefault(0) = True</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While strArrParagraphs.Ubound &gt; 0 And strArrParagraphs(strArrParagraphs.Ubound) = ""</SourceLine>
   <SourceLine>strArrParagraphs.Remove(strArrParagraphs.Ubound)</SourceLine>
   <SourceLine>bArrParagraphStartsDefault.Remove(bArrParagraphStartsDefault.Ubound)</SourceLine>
   <SourceLine>iArrParagraphAlignment.Remove(iArrParagraphAlignment.Ubound)</SourceLine>
   <SourceLine>iArrTableCell.Remove(iArrTableCell.Ubound)</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strValue As String, ByRef strArrParagraphs() As String, ByRef iArrParagraphAlignment() As Integer, ByRef bArrParagraphStartsDefault() As Boolean, ByRef bArrParagraphNewLine() As Boolean, ByRef iArrTableCell() As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Parse</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Parse(strValue As String, bForcePlainText As Boolean)</SourceLine>
   <SourceLine>Dim strArrParagraphs() As String</SourceLine>
   <SourceLine>Dim iArrParagraphAlignment() As Integer</SourceLine>
   <SourceLine>Dim bArrParagraphStartsDefault() As Boolean</SourceLine>
   <SourceLine>Dim bArrParagraphNewLine() As Boolean</SourceLine>
   <SourceLine>Dim iArrTableCell() As Integer</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim dMSStart As Double</SourceLine>
   <SourceLine>Dim dMSTussenStop As Double</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim iSize As Integer</SourceLine>
   <SourceLine>Dim bBold As Boolean</SourceLine>
   <SourceLine>Dim bItalic As Boolean</SourceLine>
   <SourceLine>Dim bUnderline As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMSStart = Microseconds</SourceLine>
   <SourceLine>dMSTussenStop = dMSStart</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim m_tcArr(-1)</SourceLine>
   <SourceLine>ReDim m_strArrFonts(-1)</SourceLine>
   <SourceLine>ReDim m_clColors(-1)</SourceLine>
   <SourceLine>ReDim strArrParagraphs(-1)</SourceLine>
   <SourceLine>ReDim iArrParagraphAlignment(-1)</SourceLine>
   <SourceLine>ReDim bArrParagraphStartsDefault(-1)</SourceLine>
   <SourceLine>ReDim bArrParagraphNewLine(-1)</SourceLine>
   <SourceLine>ReDim iArrTableCell(-1)</SourceLine>
   <SourceLine>ReDim m_cpArr(-1)</SourceLine>
   <SourceLine>ReDim m_chArr(-1)</SourceLine>
   <SourceLine>ReDim m_rpArrParagraph(-1)</SourceLine>
   <SourceLine>ReDim m_rpicArr(-1)</SourceLine>
   <SourceLine>ReDim m_strArrFieldFunctie(-1)</SourceLine>
   <SourceLine>'m_dLargestDrawingTime = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(Chr(13) + Chr(10), Chr(13)).ReplaceAll(Chr(10), Chr(13))</SourceLine>
   <SourceLine>If Not bForcePlainText And strValue.Left(6) = "{\rtf1" And strValue.Right(1) = "}" Then</SourceLine>
   <SourceLine>strValue = strValue.Mid(7, strValue.Len - 7)</SourceLine>
   <SourceLine>'strValue = strValue.ReplaceAll(Chr(13), "")</SourceLine>
   <SourceLine>ParseRTF_LoadFields(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_LoadFields executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_CutOutUnwantedBlocks(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_CutOutUnwantedBlocks executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_LoadFonts(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_LoadFonts executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_LoadColors(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_LoadColors executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_LoadStyleSheets(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_LoadStyleSheets executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_LoadPictures(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_LoadPictures executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_AndereAccoladeToestanden(strValue)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_AndereAccoladeToestanden executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_SplitParagraphs(strValue, strArrParagraphs, iArrParagraphAlignment, bArrParagraphStartsDefault, bArrParagraphNewLine, iArrTableCell)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_SplitParagraphs executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>ParseRTF_Explode(strArrParagraphs, iArrParagraphAlignment, bArrParagraphStartsDefault, bArrParagraphNewLine, iArrTableCell)</SourceLine>
   <SourceLine>System.DebugLog "ParseRTF_Explode executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine>System.DebugLog "Optimize executed in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bBold = False</SourceLine>
   <SourceLine>bItalic = False</SourceLine>
   <SourceLine>bUnderline = False</SourceLine>
   <SourceLine>GetDefaultStyle_Intern(strFont, iSize, bBold, bItalic, bUnderline)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strArrFonts.Append(strFont)</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(m_rpArrParagraph.Ubound).TableCell = -1</SourceLine>
   <SourceLine>m_clColors.Append(&amp;c000000)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, bBold)</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, bItalic)</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_UNDERLINE, bUnderline)</SourceLine>
   <SourceLine>cp.dFontSize = iSize</SourceLine>
   <SourceLine>cp.iColorNr = 0</SourceLine>
   <SourceLine>cp.iParagraph = 0</SourceLine>
   <SourceLine>cp.iFontNr = 0</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(0))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(iSize)</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strValue.Len &gt; 0 Then</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(Chr(13) + Chr(10), Chr(13)).ReplaceAll(Chr(10), Chr(13))</SourceLine>
   <SourceLine>For t = strValue.Len To 1 Step -1</SourceLine>
   <SourceLine>ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>iPos = 0</SourceLine>
   <SourceLine>InsertChar(iPos, ch)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "ParseRTF (" + Format(iLen, "0") + " byte) executed in " + Format(Round(((Microseconds - dMsStart) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strValue As String, bForcePlainText As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_AndereAccoladeToestanden</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_AndereAccoladeToestanden(ByRef strValue As String)</SourceLine>
   <SourceLine>#Pragma Unused strValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Dim iPosStart As Integer</SourceLine>
   <SourceLine>'Dim iPosStop As Integer</SourceLine>
   <SourceLine>'Dim strUitKnippen As String</SourceLine>
   <SourceLine>'Dim strBehouden As String</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'iPosStart = 0</SourceLine>
   <SourceLine>'Do</SourceLine>
   <SourceLine>'iPosStart = strValue.InStr(iPosStart, "{")</SourceLine>
   <SourceLine>'If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>'If strValue.Mid(iPosStart - 1) &lt;&gt; "\" Then</SourceLine>
   <SourceLine>'iPosStop = iPosStart</SourceLine>
   <SourceLine>'Do</SourceLine>
   <SourceLine>'iPosStop = strValue.InStr(iPosStop, "}")</SourceLine>
   <SourceLine>'Loop Until iPosStop &lt;= 0 Or strValue.Mid(iPosStop - 1) &lt;&gt; "\"</SourceLine>
   <SourceLine>'If iPosStop &gt; iPosStart Then</SourceLine>
   <SourceLine>'strUitKnippen = strValue.Mid(iPosStart, (iPosStop + 1 - iPosStart))</SourceLine>
   <SourceLine>'If strUitKnippen.Left(7) = "{\rtlch" And strUitKnippen.Len &gt; 8 Then</SourceLine>
   <SourceLine>'strBehouden = strUitKnippen.Mid(8, strUitKnippen.Len - 8)</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'strBehouden = ""</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'strValue = strValue.Left(iPosStart - 1) + strBehouden + strValue.Mid(iPosStop + 1)</SourceLine>
   <SourceLine>'iPosStart = iPosStart - 1 + strBehouden.Len</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'iPosStart = iPosStart + 1 </SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'iPosStart = -1</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'Loop Until iPosStart &lt; 0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_CutOutUnknownCommand</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ParseRTF_CutOutUnknownCommand(strValue As String) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine>Dim strCommand As String</SourceLine>
   <SourceLine>Dim strRest As String</SourceLine>
   <SourceLine>Dim bValid As Boolean</SourceLine>
   <SourceLine>Dim iPart As Integer</SourceLine>
   <SourceLine>Dim iPosEarlierSplit As Integer</SourceLine>
   <SourceLine>Dim strArrTmp() As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRtVal = ""</SourceLine>
   <SourceLine>strArrTmp = strValue.Split(" ")</SourceLine>
   <SourceLine>If strArrTmp.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>strCommand = strArrTmp(0)</SourceLine>
   <SourceLine>iPosEarlierSplit = strCommand.InStr(Chr(9))</SourceLine>
   <SourceLine>If iPosEarlierSplit &gt; 1 Then</SourceLine>
   <SourceLine>strCommand = strCommand.Left(iPosEarlierSplit - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosEarlierSplit = strCommand.InStr(Chr(10))</SourceLine>
   <SourceLine>If iPosEarlierSplit &gt; 1 Then</SourceLine>
   <SourceLine>strCommand = strCommand.Left(iPosEarlierSplit - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosEarlierSplit = strCommand.InStr(Chr(13))</SourceLine>
   <SourceLine>If iPosEarlierSplit &gt; 1 Then</SourceLine>
   <SourceLine>strCommand = strCommand.Left(iPosEarlierSplit - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strCommand = strValue Then</SourceLine>
   <SourceLine>strRest = ""</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRest = strValue.Mid(strCommand.Len + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strCommand.Left(2) = "fs" And strCommand.Mid(3).Val &gt; 0 And strCommand = "fs" + Format(strCommand.Mid(3).Val, "0") Then</SourceLine>
   <SourceLine>'fontsize</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "f0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(1) = "f" And strCommand.Mid(2).Val &gt; 0 And strCommand = "f" + Format(strCommand.Mid(2).Val, "0")) Then</SourceLine>
   <SourceLine>'font</SourceLine>
   <SourceLine>iPart = strCommand.Mid(2).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= m_strArrFonts.Ubound Then</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand = "cf0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(2) = "cf" And strCommand.Mid(3).Val &gt; 0 And strCommand = "cf" + Format(strCommand.Mid(3).Val, "0")) Then</SourceLine>
   <SourceLine>'textcolor</SourceLine>
   <SourceLine>iPart = strCommand.Mid(3).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= (m_clColors.Ubound + 1) Then</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand = "fieldfunctie0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(12) = "fieldfunctie" And strCommand.Mid(13).Val &gt; 0 And strCommand = "fieldfunctie" + Format(strCommand.Mid(13).Val, "0")) Then</SourceLine>
   <SourceLine>'Calculated Fields</SourceLine>
   <SourceLine>iPart = strCommand.Mid(13).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= (m_strArrFieldFunctie.Ubound + 1) Then</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand.Left(11) = "picinternal" And strCommand.Mid(12).Val &gt; 0 Then</SourceLine>
   <SourceLine>'Pictures</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "tx" And strCommand.Mid(3).Val &gt; 0 Then</SourceLine>
   <SourceLine>'tabstop</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "li" And strCommand.Mid(3).Val &gt;= 0 Then</SourceLine>
   <SourceLine>'left indent</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "ri" And strCommand.Mid(3).Val &gt;= 0 Then</SourceLine>
   <SourceLine>'right indent</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "fi" And strCommand.Mid(3).Val &lt;&gt; 0 Then</SourceLine>
   <SourceLine>'first indent (relative value to defined indent to change the indent on the first line of a paragraph)</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "trowd" Then</SourceLine>
   <SourceLine>'Begin Tablerow</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(8) = "clwWidth" And strCommand.Mid(9).Val &gt; 0 Then</SourceLine>
   <SourceLine>'CellWidth Part 1</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(5) = "cellx" And strCommand.Mid(6).Val &gt; 0 Then</SourceLine>
   <SourceLine>'CellWidth Part 2</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(7) = "clcbpat" Then</SourceLine>
   <SourceLine>'Cell Background color</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "intbl" Then</SourceLine>
   <SourceLine>'Begin Cell</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "cell" Then</SourceLine>
   <SourceLine>'End Cell</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "row" Then</SourceLine>
   <SourceLine>'End Tablerow</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "caps" Then</SourceLine>
   <SourceLine>'caps on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "caps0" Then</SourceLine>
   <SourceLine>'caps off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "i" Then</SourceLine>
   <SourceLine>'italic on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "i0" Then</SourceLine>
   <SourceLine>'italic off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "b" Then</SourceLine>
   <SourceLine>'bold on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "b0" Then</SourceLine>
   <SourceLine>'bold off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "v" Then</SourceLine>
   <SourceLine>'invisible on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "v0" Then</SourceLine>
   <SourceLine>'invisible off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "shad" Then</SourceLine>
   <SourceLine>'shadow on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "shad0" Then</SourceLine>
   <SourceLine>'shadow off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "strike" Then</SourceLine>
   <SourceLine>'strikethrough on</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "strike0" Then</SourceLine>
   <SourceLine>'strikethrough off</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "ul" Then</SourceLine>
   <SourceLine>'underline on (alle stijlen) en underline off (ulnone)</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand = "tab" Then</SourceLine>
   <SourceLine>'tab</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Left(9) = "backslash" Or strCommand.Left(1) = "{" Or strCommand.Left(1) = "}" Then</SourceLine>
   <SourceLine>'escaped character</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf strCommand.Len &gt;= 3 And strCommand.Left(1) = "'" Then</SourceLine>
   <SourceLine>'special character</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>ElseIf (strCommand.Len = 4 Or strCommand.Len = 5) And strCommand.Left(1) = "u" Then</SourceLine>
   <SourceLine>'unicode character</SourceLine>
   <SourceLine>bValid = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bValid = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bValid Then</SourceLine>
   <SourceLine>strRtVal = "\" + strCommand</SourceLine>
   <SourceLine>If strRest &lt;&gt; "" Then</SourceLine>
   <SourceLine>strRtVal = strRtVal + " " + strRest</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = strRest</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strValue As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_Explode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_Explode(ByRef strArrParagraphs() As String, ByRef iArrParagraphAlignment() As Integer, ByRef bArrParagraphStartsDefault() As Boolean, ByRef bArrParagraphNewLine() As Boolean, ByRef iArrTableCell() As Integer)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim strPar As String</SourceLine>
   <SourceLine>Dim tCh As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim tCmd As Integer</SourceLine>
   <SourceLine>Dim strCmds() As String</SourceLine>
   <SourceLine>Dim bCurrentCaps As Boolean</SourceLine>
   <SourceLine>Dim strCommand As String</SourceLine>
   <SourceLine>Dim iPart As Integer</SourceLine>
   <SourceLine>Dim strRest As String</SourceLine>
   <SourceLine>Dim strArrTmp() As String</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim bLastCmdWasTabstop As Boolean</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim bGraphicsBold As Boolean</SourceLine>
   <SourceLine>Dim bGraphicsItalic As Boolean</SourceLine>
   <SourceLine>Dim strOldFont As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>cp.iFunctie = 0</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine>strOldFont = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = strArrParagraphs.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>strRest = ""</SourceLine>
   <SourceLine>strPar = strArrParagraphs(t)</SourceLine>
   <SourceLine>If t = 0 Or bArrParagraphStartsDefault(t) Then</SourceLine>
   <SourceLine>cp.iFontNr = 0</SourceLine>
   <SourceLine>cp.iColorNr = 0</SourceLine>
   <SourceLine>cp.btStyle = 0</SourceLine>
   <SourceLine>cp.dFontSize = 12</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>cp.iParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).Alignment = iArrParagraphAlignment(t)</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).TableCell = iArrTableCell(t)</SourceLine>
   <SourceLine>bCurrentCaps = False</SourceLine>
   <SourceLine>ElseIf iArrParagraphAlignment(t) &lt;&gt; iArrParagraphAlignment(t - 1) Or Not bArrParagraphNewLine(t) Or _</SourceLine>
   <SourceLine>iArrTableCell(t) &lt;&gt; iArrTableCell(t - 1) Then</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph(m_rpArrParagraph(m_rpArrParagraph.Ubound)))</SourceLine>
   <SourceLine>cp.iParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).Alignment = iArrParagraphAlignment(t)</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).TableCell = iArrTableCell(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If t &lt;&gt; 0 Then</SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(10))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strCmds = strPar.Split("\")</SourceLine>
   <SourceLine>If strCmds.Ubound &gt;= 0 And strCmds(0) = "" Then</SourceLine>
   <SourceLine>strCmds.Remove(0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tCmd = 0 To strCmds.Ubound - 1</SourceLine>
   <SourceLine>If strCmds(tCmd) = "" Then</SourceLine>
   <SourceLine>If tCmd = 0 Then</SourceLine>
   <SourceLine>strCmds(1) = "\" + strCmds(1)</SourceLine>
   <SourceLine>strCmds.Remove(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strCmds(tCmd - 1) = strCmds(tCmd - 1) + "\" + strCmds(tCmd + 1)</SourceLine>
   <SourceLine>strCmds.Remove(tCmd)</SourceLine>
   <SourceLine>strCmds.Remove(tCmd)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tCmd</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tCmd = 0 To strCmds.Ubound</SourceLine>
   <SourceLine>strArrTmp = strCmds(tCmd).Split(" ")</SourceLine>
   <SourceLine>If strArrTmp.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>strCommand = strArrTmp(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If tCmd = 0 And strCommand = strPar.Left(strCommand.Len) Then</SourceLine>
   <SourceLine>strRest = strCmds(tCmd)</SourceLine>
   <SourceLine>strCommand = ""</SourceLine>
   <SourceLine>ElseIf strCommand = strCmds(tCmd) Then</SourceLine>
   <SourceLine>strRest = ""</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRest = strCmds(tCmd).Mid(strCommand.Len + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strCommand.Left(2) = "tx" And strCommand.Mid(3).Val &gt; 0 Then</SourceLine>
   <SourceLine>'tabstop</SourceLine>
   <SourceLine>If Not bLastCmdWasTabstop Then</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).RemoveAllTabstops</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bLastCmdWasTabstop = True</SourceLine>
   <SourceLine>iPart = strCommand.Mid(3).Val / 20</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).AddTabstop(iPart)</SourceLine>
   <SourceLine>ElseIf strCommand &lt;&gt; "" Then </SourceLine>
   <SourceLine>bLastCmdWasTabstop = False</SourceLine>
   <SourceLine>If strCommand.Left(2) = "fs" And strCommand.Mid(3).Val &gt; 0 And strCommand = "fs" + Format(strCommand.Mid(3).Val, "0") Then</SourceLine>
   <SourceLine>'fontsize</SourceLine>
   <SourceLine>cp.dFontSize = (strCommand.Mid(3).Val / 2)</SourceLine>
   <SourceLine>ElseIf strCommand = "f0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(1) = "f" And strCommand.Mid(2).Val &gt; 0 And strCommand = "f" + Format(strCommand.Mid(2).Val, "0")) Then</SourceLine>
   <SourceLine>'font</SourceLine>
   <SourceLine>iPart = strCommand.Mid(2).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= m_strArrFonts.Ubound Then</SourceLine>
   <SourceLine>cp.iFontNr = iPart</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand = "cf0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(2) = "cf" And strCommand.Mid(3).Val &gt; 0 And strCommand = "cf" + Format(strCommand.Mid(3).Val, "0")) Then</SourceLine>
   <SourceLine>'textcolor</SourceLine>
   <SourceLine>iPart = strCommand.Mid(3).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= m_clColors.Ubound Then '(m_clColors.Ubound + 1) Then</SourceLine>
   <SourceLine>cp.iColorNr = iPart </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand = "fieldfunctie0" Or _</SourceLine>
   <SourceLine>(strCommand.Left(12) = "fieldfunctie" And strCommand.Mid(13).Val &gt; 0 And strCommand = "fieldfunctie" + Format(strCommand.Mid(13).Val, "0")) Then</SourceLine>
   <SourceLine>'Calculated Fields</SourceLine>
   <SourceLine>iPart = strCommand.Mid(13).Val</SourceLine>
   <SourceLine>If iPart &gt;= 0 And iPart &lt;= (m_strArrFieldFunctie.Ubound + 1) Then</SourceLine>
   <SourceLine>cp.iFunctie = iPart</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf (strCommand.Left(2) = "li" Or strCommand.Left(2) = "ri") And strCommand.Mid(3).Val &gt;= 0 Then</SourceLine>
   <SourceLine>'Indent</SourceLine>
   <SourceLine>iPart = strCommand.Mid(3).Val / 20</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).Indent = iPart</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "fi" And strCommand.Mid(3).Val &lt;&gt; 0 Then</SourceLine>
   <SourceLine>'Indent on first line of paragraph changes with this value</SourceLine>
   <SourceLine>iPart = strCommand.Mid(3).Val / 20</SourceLine>
   <SourceLine>m_rpArrParagraph(cp.iParagraph).FirstIndent = iPart</SourceLine>
   <SourceLine>ElseIf strCommand = "b" Then</SourceLine>
   <SourceLine>'bold on</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, True)</SourceLine>
   <SourceLine>ElseIf strCommand = "b0" Then</SourceLine>
   <SourceLine>'bold off</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, False)</SourceLine>
   <SourceLine>ElseIf strCommand = "v" Then</SourceLine>
   <SourceLine>'invisible on</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_INVISIBLE, True)</SourceLine>
   <SourceLine>ElseIf strCommand = "v0" Then</SourceLine>
   <SourceLine>'invisible off</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_INVISIBLE, False)</SourceLine>
   <SourceLine>ElseIf strCommand = "i" Then</SourceLine>
   <SourceLine>'Italic on</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, True)</SourceLine>
   <SourceLine>ElseIf strCommand = "i0" Then</SourceLine>
   <SourceLine>'Italic off</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, False)</SourceLine>
   <SourceLine>ElseIf strCommand = "shad" Then</SourceLine>
   <SourceLine>'shadow on</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, True)</SourceLine>
   <SourceLine>ElseIf strCommand = "shad0" Then</SourceLine>
   <SourceLine>'shadow off</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, False)</SourceLine>
   <SourceLine>ElseIf strCommand = "strike" Then</SourceLine>
   <SourceLine>'strikethrough on</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, True)</SourceLine>
   <SourceLine>ElseIf strCommand = "strike0" Then</SourceLine>
   <SourceLine>'strikethrough off</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, False)</SourceLine>
   <SourceLine>ElseIf strCommand = "caps" Then</SourceLine>
   <SourceLine>'Caps on</SourceLine>
   <SourceLine>bCurrentCaps = True</SourceLine>
   <SourceLine>ElseIf strCommand = "caps0" Then</SourceLine>
   <SourceLine>'Caps off</SourceLine>
   <SourceLine>bCurrentCaps = False</SourceLine>
   <SourceLine>ElseIf strCommand = "ulnone" Or strCommand = "ul0" Then</SourceLine>
   <SourceLine>'Underline off</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, 0)</SourceLine>
   <SourceLine>ElseIf strCommand.Left(2) = "ul" Then</SourceLine>
   <SourceLine>'Underline on</SourceLine>
   <SourceLine>If strCommand = "uld" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_DOT)</SourceLine>
   <SourceLine>ElseIf strCommand = "uldash" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_DASH)</SourceLine>
   <SourceLine>ElseIf strCommand = "uldb" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_DOUBLE)</SourceLine>
   <SourceLine>ElseIf strCommand = "ulth" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_THICK)</SourceLine>
   <SourceLine>ElseIf strCommand = "ulw" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_WORD)</SourceLine>
   <SourceLine>ElseIf strCommand = "ulwave" Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE_WAVE)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strCommand = "tab" Then</SourceLine>
   <SourceLine>'Tab</SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.btAscSpecial = 9</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>If m_cpArr.Ubound &gt;= 0 And m_cpArr(m_cpArr.Ubound).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>'Begin van lijn erft hoogte van het 1e character</SourceLine>
   <SourceLine>m_cpArr(m_cpArr.Ubound).iHeight = cp.iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(9))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strCommand.Left(11) = "picinternal" Then</SourceLine>
   <SourceLine>'Picture</SourceLine>
   <SourceLine>iPart = strCommand.Mid(12).Val</SourceLine>
   <SourceLine>If iPart &gt; 0 And iPart &lt;= (m_rpicArr.Ubound + 1) Then</SourceLine>
   <SourceLine>cp.iPicture = iPart</SourceLine>
   <SourceLine>cp.iHeight = m_rpicArr(iPart - 1).m_picResized.Height</SourceLine>
   <SourceLine>cp.iWidth = m_rpicArr(iPart - 1).m_picResized.Width</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(0))</SourceLine>
   <SourceLine>cp.iPicture = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strCommand.Left(9) = "backslash" Or strCommand.Left(1) = "{" Or strCommand.Left(1) = "}" Then</SourceLine>
   <SourceLine>'Special Character</SourceLine>
   <SourceLine>If strCommand.Left(9) = "backslash" Then</SourceLine>
   <SourceLine>If strCommand.Len &gt; 9 Then</SourceLine>
   <SourceLine>strRest = strCommand.Mid(10) + " " + strRest</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ch = "\" </SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If strCommand.Len &gt; 1 Then</SourceLine>
   <SourceLine>strRest = strCommand.Mid(2) + " " + strRest</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ch = strCommand.Left(1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(ch, 500) + 2</SourceLine>
   <SourceLine>If m_cpArr.Ubound &gt;= 0 And m_cpArr(m_cpArr.Ubound).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>'Begin van lijn erft hoogte van het 1e character</SourceLine>
   <SourceLine>m_cpArr(m_cpArr.Ubound).iHeight = cp.iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsBold &lt;&gt; ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsBold = Not bGraphicsBold</SourceLine>
   <SourceLine>g.Bold = bGraphicsBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic &lt;&gt; ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsItalic = Not bGraphicsItalic</SourceLine>
   <SourceLine>g.Italic = bGraphicsItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf (strCommand.Len &gt;= 3 And strCommand.Left(1) = "'") Then</SourceLine>
   <SourceLine>'Special Character</SourceLine>
   <SourceLine>ch = ChRTFCodeToPlain(strCommand.Left(3))</SourceLine>
   <SourceLine>If ch.Len = 1 Then</SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(ch, 500) + 2</SourceLine>
   <SourceLine>If m_cpArr.Ubound &gt;= 0 And m_cpArr(m_cpArr.Ubound).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>'Begin van lijn erft hoogte van het 1e character</SourceLine>
   <SourceLine>m_cpArr(m_cpArr.Ubound).iHeight = cp.iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsBold &lt;&gt; ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsBold = Not bGraphicsBold</SourceLine>
   <SourceLine>g.Bold = bGraphicsBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic &lt;&gt; ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsItalic = Not bGraphicsItalic</SourceLine>
   <SourceLine>g.Italic = bGraphicsItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(ch)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strCommand.Len &gt; 3 Then</SourceLine>
   <SourceLine>strRest = strCommand.Mid(4) + " " + strRest </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf (strCommand.Len = 4 And strCommand.Left(1) = "u" And NumbersOnly(strCommand.Mid(2)).Len = 3) Or _</SourceLine>
   <SourceLine>(strCommand.Len = 5 And strCommand.Left(1) = "u" And NumbersOnly(strCommand.Mid(2)).Len = 4) Then</SourceLine>
   <SourceLine>'Unicode Character</SourceLine>
   <SourceLine>ch = ChRTFCodeToPlain(strCommand)</SourceLine>
   <SourceLine>If ch.Len = 1 Then</SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(ch, 500) + 2</SourceLine>
   <SourceLine>If m_cpArr.Ubound &gt;= 0 And m_cpArr(m_cpArr.Ubound).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>'Begin van lijn erft hoogte van het 1e character</SourceLine>
   <SourceLine>m_cpArr(m_cpArr.Ubound).iHeight = cp.iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsBold &lt;&gt; ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsBold = Not bGraphicsBold</SourceLine>
   <SourceLine>g.Bold = bGraphicsBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic &lt;&gt; ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsItalic = Not bGraphicsItalic</SourceLine>
   <SourceLine>g.Italic = bGraphicsItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(ch)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Dit was duidelijk geen commando</SourceLine>
   <SourceLine>strRest = strCommand + " " + strRest</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLen = strRest.Len</SourceLine>
   <SourceLine>For tCh = 1 To iLen</SourceLine>
   <SourceLine>ch = strRest.Mid(tCh, 1)</SourceLine>
   <SourceLine>If ch &lt;&gt; "{" And ch &lt;&gt; "\" And ch &lt;&gt; "}" And Asc(ch) &gt;= 32 Then 'And ch &lt;&gt; Chr(13) And ch &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>If bCurrentCaps Then </SourceLine>
   <SourceLine>ch = ch.UpperCase</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strArrFonts(cp.iFontNr) &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>strOldFont = m_strArrFonts(cp.iFontNr)</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strOldFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(ch, 500) + 2</SourceLine>
   <SourceLine>If m_cpArr.Ubound &gt;= 0 And m_cpArr(m_cpArr.Ubound).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>'Begin van lijn erft hoogte van het 1e character</SourceLine>
   <SourceLine>m_cpArr(m_cpArr.Ubound).iHeight = cp.iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsBold &lt;&gt; ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsBold = Not bGraphicsBold</SourceLine>
   <SourceLine>g.Bold = bGraphicsBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic &lt;&gt; ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsItalic = Not bGraphicsItalic</SourceLine>
   <SourceLine>g.Italic = bGraphicsItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(ch)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tCh</SourceLine>
   <SourceLine>strRest = ""</SourceLine>
   <SourceLine>Next tCmd</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Change paragraphs</SourceLine>
   <SourceLine>For t = m_cpArr.Ubound To 1 Step -1</SourceLine>
   <SourceLine>If m_cpArr(t).btAscSpecial = 13 Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t -1).iParagraph</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strArrParagraphs() As String, ByRef iArrParagraphAlignment() As Integer, ByRef bArrParagraphStartsDefault() As Boolean, ByRef bArrParagraphNewLine() As Boolean, ByRef iArrTableCell() As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadColors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadColors(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iOpen As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim strColorSet As String</SourceLine>
   <SourceLine>Dim strArrColors() As String</SourceLine>
   <SourceLine>Dim strArrColor() As String</SourceLine>
   <SourceLine>Dim clColor As Color</SourceLine>
   <SourceLine>Dim iRed As Integer</SourceLine>
   <SourceLine>Dim iGreen As Integer</SourceLine>
   <SourceLine>Dim iBlue As Integer</SourceLine>
   <SourceLine>Dim bRed As Boolean</SourceLine>
   <SourceLine>Dim bGreen As Boolean</SourceLine>
   <SourceLine>Dim bBlue As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_clColors.Append(&amp;c000000)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = strValue.InStr("{\colortbl")</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iOpen = 1</SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine>For t = iPos + 10 To iLen</SourceLine>
   <SourceLine>ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = "{" Then</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>strColorSet = strColorSet + ch</SourceLine>
   <SourceLine>ElseIf ch = "}" Then</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOpen = 0 Then</SourceLine>
   <SourceLine>'Jump Out, we're done here</SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + strValue.Mid(t + 1)</SourceLine>
   <SourceLine>iLen = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strColorSet = strColorSet + ch</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strColorSet = strColorSet + ch</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strArrColors = strColorSet.Split(";")</SourceLine>
   <SourceLine>iLen = strArrColors.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLen</SourceLine>
   <SourceLine>strArrColors(t) = strArrColors(t).Trim</SourceLine>
   <SourceLine>strColorSet = strArrColors(t)</SourceLine>
   <SourceLine>If strColorSet.Len = 0 Then</SourceLine>
   <SourceLine>strArrColors.Remove(t)</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>iLen = iLen - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrColor = strColorSet.Split("\")</SourceLine>
   <SourceLine>If strArrColor.Ubound &gt; 2 Then</SourceLine>
   <SourceLine>bRed = False</SourceLine>
   <SourceLine>bGreen = False</SourceLine>
   <SourceLine>bBlue = False</SourceLine>
   <SourceLine>clColor = &amp;c000000</SourceLine>
   <SourceLine>For tB = strArrColor.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If strArrColor(tB).Left(3) = "red" Then</SourceLine>
   <SourceLine>iRed = strArrColor(tB).Mid(4).Val</SourceLine>
   <SourceLine>If iRed &gt;= 0 And iRed &lt;= 255 Then</SourceLine>
   <SourceLine>bRed = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrColor(tB).Left(5) = "green" Then</SourceLine>
   <SourceLine>iGreen = strArrColor(tB).Mid(6).Val</SourceLine>
   <SourceLine>If iGreen &gt;= 0 And iGreen &lt;= 255 Then</SourceLine>
   <SourceLine>bGreen = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf strArrColor(tB).Left(4) = "blue" Then</SourceLine>
   <SourceLine>iBlue = strArrColor(tB).Mid(5).Val</SourceLine>
   <SourceLine>If iBlue &gt;= 0 And iBlue &lt;= 255 Then</SourceLine>
   <SourceLine>bBlue = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bRed And bGreen And bBlue Then</SourceLine>
   <SourceLine>clColor = RGB(iRed, iGreen, iBlue)</SourceLine>
   <SourceLine>m_clColors.Append(clColor)</SourceLine>
   <SourceLine>tB = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadFonts</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadFonts(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iOpen As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>Dim strFonts As String</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = strValue.InStr("{\fonttbl")</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iOpen = 1</SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine>For t = iPos + 9 To iLen</SourceLine>
   <SourceLine>ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = "{" Then</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If ch = "}" Then</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOpen = 0 Then</SourceLine>
   <SourceLine>'Jump Out, we're done here</SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + strValue.Mid(t + 1)</SourceLine>
   <SourceLine>iLen = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strFonts = strFonts + ch</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPosStart = 0</SourceLine>
   <SourceLine>iPosStop = 0</SourceLine>
   <SourceLine>If strValue.Mid(t + 1, 2) = "\f" Then</SourceLine>
   <SourceLine>iPosStart = strValue.InStr(t + 3, " ")</SourceLine>
   <SourceLine>If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>iPosStop = strValue.InStr(iPosStart, ";")</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>strFont = strValue.Mid(iPosStart + 1, iPosStop - (iPosStart + 1))</SourceLine>
   <SourceLine>m_strArrFonts.Append(strFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strFonts = strFonts + strValue.Mid(t, (1 + iPosStop - t))</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>t = iPosStop</SourceLine>
   <SourceLine>ElseIf iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strFonts = strFonts + strValue.Mid(t, (1 + iPosStart - t))</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>t = iPosStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strFonts = strFonts + ch</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRTF(bWithNISDisable As Boolean = True) As String</SourceLine>
   <SourceLine>Dim strRTF As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim bLastWasCommand As Boolean</SourceLine>
   <SourceLine>Dim strTabStopString As String</SourceLine>
   <SourceLine>Dim strLastTabStopString As String</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim bCharactersAfterNewParagraph As Boolean</SourceLine>
   <SourceLine>Dim dMSStart As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim iCurrentFont As Integer</SourceLine>
   <SourceLine>Dim iCurrentColor As Integer</SourceLine>
   <SourceLine>Dim iCurrentBold As Integer</SourceLine>
   <SourceLine>Dim iCurrentInvisible As Integer</SourceLine>
   <SourceLine>Dim iCurrentItalic As Integer</SourceLine>
   <SourceLine>Dim iCurrentShadow As Integer</SourceLine>
   <SourceLine>Dim iCurrentStrikeThrough As Integer</SourceLine>
   <SourceLine>Dim iCurrentUnderline As Integer</SourceLine>
   <SourceLine>Dim dCurrentFontSize As Double</SourceLine>
   <SourceLine>Dim strAddRTF As String</SourceLine>
   <SourceLine>Dim bUnicodeInitialized As Boolean</SourceLine>
   <SourceLine>Dim iCurrentRow As Integer</SourceLine>
   <SourceLine>Dim iCurrentCol As Integer</SourceLine>
   <SourceLine>Dim iCurrentCell As Integer</SourceLine>
   <SourceLine>Dim strRTFTablecell As String</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim bIgnoredPage As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(bWithNISDisable)</SourceLine>
   <SourceLine>dMSStart = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentFont = -1</SourceLine>
   <SourceLine>dCurrentFontSize = -1</SourceLine>
   <SourceLine>iCurrentColor = -1</SourceLine>
   <SourceLine>iCurrentItalic = -1</SourceLine>
   <SourceLine>iCurrentBold = -1</SourceLine>
   <SourceLine>iCurrentInvisible = -1</SourceLine>
   <SourceLine>iCurrentUnderline = -1</SourceLine>
   <SourceLine>iCurrentShadow = -1</SourceLine>
   <SourceLine>iCurrentStrikeThrough = -1</SourceLine>
   <SourceLine>iCurrentRow = -1</SourceLine>
   <SourceLine>iCurrentCol = -1</SourceLine>
   <SourceLine>iCurrentCell = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bUnicodeInitialized = False</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = False</SourceLine>
   <SourceLine>strLastTabStopString = ""</SourceLine>
   <SourceLine>strRTF = "{\rtf1\ansi\deff0"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>strRTF = strRTF + "{\fonttbl"</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>strRTF = strRTF + "{\f" + Format(t, "0") + "\fnil " + m_strArrFonts(t) + ";}"</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>strRTF = strRTF + "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_clColors.Ubound</SourceLine>
   <SourceLine>strRTF = strRTF + "{\colortbl ;"</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>strRTF = strRTF + "\red" + Format(m_clColors(t).Red, "0") + "\green" + Format(m_clColors(t).Green, "0") + "\blue" + Format(m_clColors(t).Blue, "0") + ";"</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>strRTF = strRTF + "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = strRTF + "{\*\generator Spikesoft 16.02;}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>If iLast &gt; 0 Then</SourceLine>
   <SourceLine>If m_cpArr(0).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(0, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetFunctie(m_cpArr(t).iFunctie) = "page" Then</SourceLine>
   <SourceLine>bIgnoredPage = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRTF = strRTF + "{\field{\*\fldinst " + m_strArrFieldFunctie(m_cpArr(0).iFunctie - 1) + "}{\fldrslt "</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(0).iParagraph</SourceLine>
   <SourceLine>If iPar &gt;= 0 Then</SourceLine>
   <SourceLine>strRTFTablecell = GetRTF_AddTableCell(iPar, iCurrentCell, iCurrentRow, iCurrentCol)</SourceLine>
   <SourceLine>strRTF = strRTF + strRTFTablecell</SourceLine>
   <SourceLine>strTabStopString = m_rpArrParagraph(iPar).GetRTFString(strRTFTablecell.Len &gt; 0)</SourceLine>
   <SourceLine>strRTFTablecell = ""</SourceLine>
   <SourceLine>If strTabStopString &lt;&gt; strLastTabStopString Then</SourceLine>
   <SourceLine>If strTabStopString.Left(4) = "\par" Then</SourceLine>
   <SourceLine>strRTF = strRTF + strTabStopString.Mid(5)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRTF = strRTF + strTabStopString</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLastTabStopString = strTabStopString</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>If m_cpArr(0).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddPicture(0)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine>ElseIf m_chArr(0) = Chr(13) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf m_chArr(0) = Chr(10) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf m_chArr(0) = Chr(9) Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(0, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = strRTF + "\tab"</SourceLine>
   <SourceLine>ElseIf m_chArr(0) = "\" Or m_chArr(0) = "{" Or m_chArr(0) = "}" Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(0, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = strRTF + "\" + m_chArr(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(0, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ch = ChPlainToRTFCode(m_chArr(0), bUnicodeInitialized)</SourceLine>
   <SourceLine>strRTF = strRTF + " " + ch</SourceLine>
   <SourceLine>bLastWasCommand = (ch.Len &gt; 1 And ch.Left(1) &lt;&gt; "'")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 1 To iLast</SourceLine>
   <SourceLine>If bIgnoredPage Or m_cpArr(t).iFunctie &lt;&gt; m_cpArr(t - 1).iFunctie Then</SourceLine>
   <SourceLine>If bIgnoredPage Then</SourceLine>
   <SourceLine>bIgnoredPage = False</SourceLine>
   <SourceLine>ElseIf m_cpArr(t - 1).iFunctie &lt;&gt; 0 And GetFunctie(m_cpArr(t - 1).iFunctie) &lt;&gt; "page" Then</SourceLine>
   <SourceLine>strRTF = strRTF + "}}"</SourceLine>
   <SourceLine>bLastWasCommand = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &lt;&gt; 0 Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(t, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If GetFunctie(m_cpArr(t).iFunctie) = "page" Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\page"</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = False</SourceLine>
   <SourceLine>tB = t</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Loop Until t &gt;= m_cpArr.Ubound Or m_cpArr(t).iFunctie &lt;&gt; m_cpArr(tB).iFunctie</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRTF = strRTF + "{\field{\*\fldinst " + m_strArrFieldFunctie(m_cpArr(t).iFunctie - 1) + "}{\fldrslt"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPar = m_cpArr(0).iParagraph</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &lt;&gt; m_cpArr(t - 1).iParagraph Then</SourceLine>
   <SourceLine>iPar = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>strRTFTablecell = GetRTF_AddTableCell(iPar, iCurrentCell, iCurrentRow, iCurrentCol)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell &lt; 0) Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\par"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strRTF = strRTF + strRTFTablecell + m_rpArrParagraph(iPar).GetRTFString(strRTFTablecell.Len &gt; 0)</SourceLine>
   <SourceLine>strRTFTablecell = ""</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(t).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddPicture(t)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = Chr(10) Then</SourceLine>
   <SourceLine>If bCharactersAfterNewParagraph Then</SourceLine>
   <SourceLine>If t &lt; iLast Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\par"</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = Chr(13) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = Chr(9) Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(t, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = strRTF + "\tab"</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = True</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = "\" Or m_chArr(t) = "{" Or m_chArr(t) = "}" Then</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(t, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>strRTF = strRTF + "\" + m_chArr(t)</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = True</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strAddRTF = GetRTF_AddLayout(t, iCurrentFont, dCurrentFontSize, iCurrentColor, iCurrentBold, iCurrentInvisible, iCurrentItalic, iCurrentUnderline, iCurrentStrikeThrough, iCurrentShadow)</SourceLine>
   <SourceLine>strRTF = strRTF + strAddRTF</SourceLine>
   <SourceLine>bLastWasCommand = (bLastWasCommand Or (strAddRTF.Len &gt; 0))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ch = ChPlainToRTFCode(m_chArr(t), bUnicodeInitialized)</SourceLine>
   <SourceLine>bCharactersAfterNewParagraph = True</SourceLine>
   <SourceLine>If bLastWasCommand And ch.Len = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + " " + ch</SourceLine>
   <SourceLine>bLastWasCommand = False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRTF = strRTF + ch</SourceLine>
   <SourceLine>If ch.Len &gt; 1 And ch.Left(2) = "\u" Then</SourceLine>
   <SourceLine>bLastWasCommand = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bLastWasCommand = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If t &gt; 0 And m_cpArr(t - 1).iFunctie &lt;&gt; 0 And GetFunctie(m_cpArr(t - 1).iFunctie) &lt;&gt; "page" Then</SourceLine>
   <SourceLine>strRTF = strRTF + "}}"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCurrentCell &gt;= 0 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\cell\row "</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = strRTF + "}"</SourceLine>
   <SourceLine>'strRTF = strRTF.ReplaceAll("{\field{\*\fldinst page}{\fldrslt\par &lt;PageBreak&gt;\par}}", "\page")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetRTF (" + Format(strRTF.Len, "0") + " byte) uitgevoerd in " + Format(Round(((Microseconds - dMsStart) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRTF</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bWithNISDisable As Boolean = True</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Optimize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Optimize(bWithNISDisable As Boolean)</SourceLine>
   <SourceLine>Dim tReplace As Integer</SourceLine>
   <SourceLine>Dim iFindLast As Integer</SourceLine>
   <SourceLine>Dim tFind As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim iNewParagraph As Integer</SourceLine>
   <SourceLine>Dim iLaatstGekendeParagraaf As Integer</SourceLine>
   <SourceLine>Dim strRTFDezeParagraaf As String</SourceLine>
   <SourceLine>Dim strRTFLaatsteParagraaf As String</SourceLine>
   <SourceLine>Dim dMSStart As Double</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine>Dim iLastRow As Integer</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim bFound As Boolean</SourceLine>
   <SourceLine>Dim strFunctie As String</SourceLine>
   <SourceLine>Dim tPic As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMSStart = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Disable NIS</SourceLine>
   <SourceLine>If bWithNISDisable Then</SourceLine>
   <SourceLine>m_nis.iPos = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Hunt for unused functions</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>If iLast &gt; 0 Then</SourceLine>
   <SourceLine>If m_cpArr(0).iFunctie &gt; 0 And m_cpArr(1).iFunctie &lt;&gt; m_cpArr(0).iFunctie Then</SourceLine>
   <SourceLine>m_cpArr(0).iFunctie = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(iLast).iFunctie &gt; 0 And m_cpArr(iLast).iFunctie &lt;&gt; m_cpArr(iLast - 1).iFunctie Then</SourceLine>
   <SourceLine>m_cpArr(iLast).iFunctie = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = 1 To iLast - 1</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &gt; 0 And _</SourceLine>
   <SourceLine>m_cpArr(t - 1).iFunctie &lt;&gt; m_cpArr(t).iFunctie And _</SourceLine>
   <SourceLine>m_cpArr(t + 1).iFunctie &lt;&gt; m_cpArr(t).iFunctie Then</SourceLine>
   <SourceLine>strFunctie = GetFunctie(cp.iFunctie)</SourceLine>
   <SourceLine>If strFunctie = "checkbox" Or strFunctie = "page" Then</SourceLine>
   <SourceLine>m_cpArr(t).iFunctie = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Cellen hernummeren</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If t = 0 Then</SourceLine>
   <SourceLine>iLastRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iRow = 0</SourceLine>
   <SourceLine>m_tcArr(t).iCol = 0</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iRow &lt;&gt; iLastRow Then</SourceLine>
   <SourceLine>iLastRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t - 1).iRow + 1</SourceLine>
   <SourceLine>m_tcArr(t).iCol = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t - 1).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iCol = m_tcArr(t - 1).iCol + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Delete unused pictures</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For tPic = m_rpicArr.Ubound + 1 To 1 Step -1</SourceLine>
   <SourceLine>bFound = False</SourceLine>
   <SourceLine>For tFind = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_cpArr(tFind).iPicture = tPic Then</SourceLine>
   <SourceLine>bFound = True</SourceLine>
   <SourceLine>tFind = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine>If Not bFound Then</SourceLine>
   <SourceLine>m_rpicArr.Remove(tPic - 1)</SourceLine>
   <SourceLine>For tFind = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_cpArr(tFind).iPicture &gt; tPic Then</SourceLine>
   <SourceLine>m_cpArr(tFind).iPicture = m_cpArr(tFind).iPicture - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tPic</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>'Dubbele fonts elimineren</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iFindLast = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>For tReplace = tFind -1 To 0 Step -1</SourceLine>
   <SourceLine>If m_strArrFonts(tFind) = m_strArrFonts(tReplace) Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iFontNr = tFind Then </SourceLine>
   <SourceLine>m_cpArr(t).iFontNr = tReplace</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iFontNr &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iFontNr = m_cpArr(t).iFontNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iFontNr &gt; tFind Then</SourceLine>
   <SourceLine>m_nis.iFontNr = m_nis.iFontNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_strArrFonts.Remove(tFind) </SourceLine>
   <SourceLine>tFind = -1</SourceLine>
   <SourceLine>tReplace = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tReplace</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine>Loop Until iFindLast = m_strArrFonts.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Niet gebruikte fonts schrappen</SourceLine>
   <SourceLine>iFindLast = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>t = 0</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iFontNr = tFind Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>While t &lt;= iLast And m_cpArr(t).iFontNr &lt;&gt; tFind </SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; iLast Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iFontNr &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iFontNr = m_cpArr(t).iFontNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iFontNr &gt; tFind Then</SourceLine>
   <SourceLine>m_nis.iFontNr = m_nis.iFontNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_strArrFonts.Remove(tFind)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Dubbele kleuren elimineren</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iFindLast = m_clColors.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>For tReplace = tFind -1 To 0 Step -1</SourceLine>
   <SourceLine>If m_clColors(tFind) = m_clColors(tReplace) Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iColorNr = tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iColorNr = tReplace</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iColorNr = m_cpArr(t).iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iColorNr = tFind Then</SourceLine>
   <SourceLine>m_tcArr(t).iColorNr = tReplace</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_tcArr(t).iColorNr = m_tcArr(t).iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_nis.iColorNr = m_nis.iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_clColors.Remove(tFind)</SourceLine>
   <SourceLine>tFind = -1</SourceLine>
   <SourceLine>tReplace = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tReplace</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine>Loop Until iFindLast = m_clColors.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Niet gebruikte kleuren schrappen</SourceLine>
   <SourceLine>iFindLast = m_clColors.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>bFound = False</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iColorNr = tFind Then</SourceLine>
   <SourceLine>bFound = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iColorNr = tFind Then</SourceLine>
   <SourceLine>bFound = True</SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bFound Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iColorNr = tFind Then</SourceLine>
   <SourceLine>bFound = True</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bFound Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iColorNr = m_cpArr(t).iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t </SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_tcArr(t).iColorNr = m_tcArr(t).iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If m_nis.iPos &gt;= 0 And m_nis.iColorNr &gt; tFind Then</SourceLine>
   <SourceLine>m_nis.iColorNr = m_nis.iColorNr - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_clColors.Remove(tFind)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Niet gebruikte functies schrappen</SourceLine>
   <SourceLine>iFindLast = m_strArrFieldFunctie.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>t = 0</SourceLine>
   <SourceLine>While t &lt;= iLast And m_cpArr(t).iFunctie &lt;&gt; (tFind + 1)</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; iLast Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &gt; (tFind + 1) Then</SourceLine>
   <SourceLine>m_cpArr(t).iFunctie = m_cpArr(t).iFunctie - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_strArrFieldFunctie.Remove(tFind)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Niet gebruikte paragrafen schrappen</SourceLine>
   <SourceLine>iFindLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = tFind Then</SourceLine>
   <SourceLine>t = iLast + 10</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If t &lt; iLast + 10 Then</SourceLine>
   <SourceLine>'Paragraaf niet gevonden</SourceLine>
   <SourceLine>m_rpArrParagraph.Remove(tFind)</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Paragrafen sorteren in volgorde van voorkomen</SourceLine>
   <SourceLine>iLaatstGekendeParagraaf = 0</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt; iLaatstGekendeParagraaf + 1 Then</SourceLine>
   <SourceLine>'Sorteren</SourceLine>
   <SourceLine>Optimize_WisselParagraaf(m_cpArr(t).iParagraph, iLaatstGekendeParagraaf + 1)</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iParagraph &lt; iLaatstGekendeParagraaf Then</SourceLine>
   <SourceLine>'Splitsen en invoegen</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph(m_rpArrParagraph(m_cpArr(t).iParagraph)))</SourceLine>
   <SourceLine>iNewParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For tB = iLast To t Step -1</SourceLine>
   <SourceLine>If m_cpArr(tB).iParagraph = m_cpArr(t).iParagraph Then</SourceLine>
   <SourceLine>m_cpArr(tB).iParagraph = iNewParagraph</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>Optimize_WisselParagraaf(m_cpArr(t).iParagraph, iLaatstGekendeParagraaf + 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLaatstGekendeParagraaf = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'2x dezelfde paragraaf na elkaar vinden en eliminineren</SourceLine>
   <SourceLine>strRTFLaatsteParagraaf = ""</SourceLine>
   <SourceLine>iFindLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For tFind = iFindLast To 0 Step -1</SourceLine>
   <SourceLine>strRTFDezeParagraaf = m_rpArrParagraph(tFind).GetRTFString(False)</SourceLine>
   <SourceLine>If (tFind = iFindLast Or m_rpArrParagraph(tFind).TableCell = m_rpArrParagraph(tFind + 1).TableCell) And _</SourceLine>
   <SourceLine>strRTFDezeParagraaf = strRTFLaatsteParagraaf Then</SourceLine>
   <SourceLine>m_rpArrParagraph.Remove(tFind)</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt; tFind Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strRTFLaatsteParagraaf = strRTFDezeParagraaf</SourceLine>
   <SourceLine>Next tFind</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Cellen controleren op begincharacter</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If t = 0 Then</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLastCell = m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &lt;&gt; iLastCell And m_chArr(t) &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>If m_chArr(t) = Chr(13) And t &lt; iLast And _</SourceLine>
   <SourceLine>m_chArr(t + 1) = Chr(10) And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(t + 1).iParagraph).TableCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr.Remove(t)</SourceLine>
   <SourceLine>m_chArr.Remove(t)</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>iLast = iLast - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(t).iFontNr</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(t).iColorNr</SourceLine>
   <SourceLine>cp.btStyle = m_cpArr(t).btStyle</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(t).dFontSize</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(t, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(t, Chr(10))</SourceLine>
   <SourceLine>iLast = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'RTF begint met een tabel =&gt; lege regel voorzetten</SourceLine>
   <SourceLine>If m_rpArrParagraph.Ubound &gt;= 0 And m_rpArrParagraph(0).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(0, New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(0).TableCell = -1</SourceLine>
   <SourceLine>cp.iFontNr = 0</SourceLine>
   <SourceLine>cp.iColorNr = 0</SourceLine>
   <SourceLine>cp.btStyle = 0</SourceLine>
   <SourceLine>cp.dFontSize = 12</SourceLine>
   <SourceLine>cp.iParagraph = 0</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Insert(0, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(0, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(0, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(0, Chr(10))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_cpArr.Ubound To 2 Step -1</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_chArr.Ubound &gt; 0 And m_cpArr(0).btAscSpecial = 13 Then</SourceLine>
   <SourceLine>m_chArr.Insert(0, Chr(10))</SourceLine>
   <SourceLine>m_cpArr.Insert(0, m_cpArr(0))</SourceLine>
   <SourceLine>m_cpArr(0).btAscSpecial = 10</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "Optimize uitgevoerd in " + Format(Round(((Microseconds - dMsStart) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bWithNISDisable As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetRTF(strValue As String)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>Parse(strValue, False)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertChar</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertChar(ByRef iPos As Integer, strKey As String)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim bTakeNIS As Boolean</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim bBold As Boolean</SourceLine>
   <SourceLine>Dim bItalic As Boolean</SourceLine>
   <SourceLine>Dim bUnderline As Boolean</SourceLine>
   <SourceLine>Dim iSize As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iParNew As Integer</SourceLine>
   <SourceLine>Dim par As clsRTFBox_Paragraph</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim dMSStart As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMSStart = Microseconds</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strArrFonts.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>bBold = False</SourceLine>
   <SourceLine>bItalic = False</SourceLine>
   <SourceLine>bUnderline = False</SourceLine>
   <SourceLine>GetDefaultStyle_Intern(strFont, iSize, bBold, bItalic, bUnderline)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strArrFonts.Append(strFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rpArrParagraph.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_clColors.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>m_clColors.Append(&amp;c000000)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bTakeNIS = (iPos = m_nis.iPos)</SourceLine>
   <SourceLine>If m_cpArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>If Not bTakeNIS Then</SourceLine>
   <SourceLine>If strFont.Len = 0 Then</SourceLine>
   <SourceLine>bBold = False</SourceLine>
   <SourceLine>bItalic = False</SourceLine>
   <SourceLine>bUnderline = False</SourceLine>
   <SourceLine>GetDefaultStyle_Intern(strFont, iSize, bBold, bItalic, bUnderline)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, bBold)</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, bItalic)</SourceLine>
   <SourceLine>If bUnderline Then</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, STYLE_UNDERLINE)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, 0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.dFontSize = iSize</SourceLine>
   <SourceLine>cp.iColorNr = 0</SourceLine>
   <SourceLine>cp.iParagraph = 0</SourceLine>
   <SourceLine>cp.iFontNr = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &lt; m_cpArr.Ubound And m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bTakeNIS Then</SourceLine>
   <SourceLine>If iPos = 0 Then</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, IsBold(0, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, IsItalic(0, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, IsStrikeThrough(0, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, IsShadow(0, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_INVISIBLE, IsInvisible(0, False))</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, GetUnderlineStyle(0, False))</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(0).dFontSize</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(0).iColorNr</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(0).iParagraph</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(0).iFontNr</SourceLine>
   <SourceLine>ElseIf iPos &gt; 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, IsBold(iPos - 1, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, IsItalic(iPos - 1, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, IsStrikeThrough(iPos - 1, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, IsShadow(iPos - 1, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_INVISIBLE, IsInvisible(iPos - 1, False))</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, GetUnderlineStyle(iPos - 1, False))</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(iPos - 1).dFontSize</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(iPos - 1).iColorNr</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(iPos - 1).iParagraph</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(iPos - 1).iFontNr</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'If iPos &lt; m_cpArr.Ubound And m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>'iPos = iPos + 1</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bTakeNIS Then</SourceLine>
   <SourceLine>cp.btStyle = m_nis.btStyle</SourceLine>
   <SourceLine>cp.dFontSize = m_nis.dFontSize</SourceLine>
   <SourceLine>cp.iFontNr = m_nis.iFontNr</SourceLine>
   <SourceLine>cp.iColorNr = m_nis.iColorNr</SourceLine>
   <SourceLine>m_nis.iPos = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(cp.iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>ch = strKey</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(strKey) &lt; 32 Then</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(strKey, 500) + 2</SourceLine>
   <SourceLine>g.Bold = ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0)</SourceLine>
   <SourceLine>g.Italic = ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0)</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(strKey)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If ch = Chr(13) Then</SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iPos, ch)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If m_rpArrParagraph(iPar).FirstIndent &lt;&gt; 0 Then</SourceLine>
   <SourceLine>par = New clsRTFBox_Paragraph(m_rpArrParagraph(iPar))</SourceLine>
   <SourceLine>par.Indent = par.Indent + par.FirstIndent</SourceLine>
   <SourceLine>par.FirstIndent = 0</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(par)</SourceLine>
   <SourceLine>iParNew = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iPos + 1 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iParNew</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>cp.iParagraph = iParNew</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>m_cpArr(iPos).iLeft = m_cpArr(iPos - 1).iLeft + m_cpArr(iPos - 1).iWidth</SourceLine>
   <SourceLine>m_cpArr(iPos).iBottom = m_cpArr(iPos - 1).iBottom</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ch = Chr(10)</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iPos, ch)</SourceLine>
   <SourceLine>If iPos = 0 Then</SourceLine>
   <SourceLine>If m_cpArr.Ubound = 0 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(iPos).iLeft = m_cpArr(iPos - 1).iLeft + m_cpArr(iPos - 1).iWidth</SourceLine>
   <SourceLine>m_cpArr(iPos).iBottom = m_cpArr(iPos - 1).iBottom</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "InsertChar uitgevoerd in " + Format(Round(((Microseconds - dMsStart) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer, strKey As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetAlignment</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetAlignment(iPos As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = ALIGNLEFT</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>iRtVal = ALIGNLEFT</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(iPar).Alignment</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetNextTabstop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetNextTabstop(iPos As Integer, iWidth As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).GetNextTabstop(iWidth)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).GetNextTabstop(iWidth)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(iPar).GetNextTabstop(iWidth)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iWidth As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFont(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine>Dim iFont As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bVolgendTeTypenCharacter Then</SourceLine>
   <SourceLine>If m_nis.iPos = iPos Then</SourceLine>
   <SourceLine>iFont = m_nis.iFontNr</SourceLine>
   <SourceLine>ElseIf iPos = 0 And m_cpArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>iFont = m_cpArr(0).iFontNr</SourceLine>
   <SourceLine>ElseIf iPos &gt; 0 And iPos - 1 &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iFont = m_cpArr(iPos - 1).iFontNr</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFont = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPos &lt; 0 Or m_cpArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>iFont = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iFont = m_cpArr(iPos).iFontNr</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iFont &lt; 0 Or iFont &gt; m_strArrFonts.Ubound Then</SourceLine>
   <SourceLine>strRtVal = m_strArrFonts(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = m_strArrFonts(iFont)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetColor(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Color</SourceLine>
   <SourceLine>Dim clRtVal As Color</SourceLine>
   <SourceLine>Dim iColor As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bVolgendTeTypenCharacter Then</SourceLine>
   <SourceLine>If m_nis.iPos = iPos Then</SourceLine>
   <SourceLine>iColor = m_nis.iColorNr</SourceLine>
   <SourceLine>ElseIf iPos = 0 And m_cpArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>iColor = m_cpArr(0).iColorNr</SourceLine>
   <SourceLine>ElseIf iPos &gt; 0 And iPos - 1 &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iColor = m_cpArr(iPos - 1).iColorNr</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iColor = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPos &lt; 0 Or m_cpArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>iColor = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iColor = m_cpArr(iPos).iColorNr</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iColor &lt; 0 Or iColor &gt; m_clColors.Ubound Then</SourceLine>
   <SourceLine>clRtVal = m_clColors(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clRtVal = m_clColors(iColor)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return clRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Color</ItemResult>
 </Method>
 <Method>
  <ItemName>IsBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsBold(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Boolean</SourceLine>
   <SourceLine>Return IsStyle(iPos, bVolgendTeTypenCharacter, STYLE_BOLD)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsStyle(iPos As Integer, bVolgendTeTypenCharacter As Boolean, btStyle As Byte) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim btStyleCompare As Byte</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>btStyleCompare = GetBtStyle(iPos, bVolgendTeTypenCharacter)</SourceLine>
   <SourceLine>bRtVal = ((btStyleCompare And btStyle) &lt;&gt; 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean, btStyle As Byte</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsItalic(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Boolean</SourceLine>
   <SourceLine>Return IsStyle(iPos, bVolgendTeTypenCharacter, STYLE_ITALIC)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsUnderline(iPos As Integer, bVolgendTeTypenCharacter As Boolean, iStyle As Integer = 0) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim btStyleCompare As Byte</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>btStyleCompare = GetBtStyle(iPos, bVolgendTeTypenCharacter)</SourceLine>
   <SourceLine>If iStyle = 0 Then 'Any style</SourceLine>
   <SourceLine>bRtVal = ((btStyleCompare And 7) &lt;&gt; 0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRtVal = ((btStyleCompare And 7) = iStyle)</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean, iStyle As Integer = 0</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetStyle(ByRef cp As CharPos, btStyle As Byte, bValue As Boolean)</SourceLine>
   <SourceLine>If ((cp.btStyle And btStyle) = 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>cp.btStyle = cp.btStyle + btStyle</SourceLine>
   <SourceLine>cp.iScreenX = 0</SourceLine>
   <SourceLine>cp.iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf Not bValue Then</SourceLine>
   <SourceLine>cp.btStyle = cp.btStyle - btStyle</SourceLine>
   <SourceLine>cp.iScreenX = 0</SourceLine>
   <SourceLine>cp.iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef cp As CharPos, btStyle As Byte, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetBold(iPos As Integer, Assigns bValue As Boolean)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetItalic(iPos As Integer, Assigns bValue As Boolean)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetUnderline(iPos As Integer, Assigns iStyle As Integer)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iStyle &lt; 0 Then</SourceLine>
   <SourceLine>iStyle = 0</SourceLine>
   <SourceLine>ElseIf iStyle &gt; 7 Then </SourceLine>
   <SourceLine>iStyle = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, iStyle)</SourceLine>
   <SourceLine>'SetStyle(cp, STYLE_UNDERLINE, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns iStyle As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Optimize_WisselParagraaf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Optimize_WisselParagraaf(iA As Integer, iB As Integer)</SourceLine>
   <SourceLine>Dim rpParA As clsRTFBox_Paragraph</SourceLine>
   <SourceLine>Dim rpParB As clsRTFBox_Paragraph</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rpParA = New clsRTFBox_Paragraph(m_rpArrParagraph(iB))</SourceLine>
   <SourceLine>rpParB = New clsRTFBox_Paragraph(m_rpArrParagraph(iA))</SourceLine>
   <SourceLine>m_rpArrParagraph(iA) = rpParA</SourceLine>
   <SourceLine>m_rpArrParagraph(iB) = rpParB</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = iA Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iB</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iParagraph = iB Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iA</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iA As Integer, iB As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextBold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextBold(iPos As Integer, bValue As Boolean)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If bValue &lt;&gt; ((m_nis.btStyle And STYLE_BOLD) &gt; 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle + STYLE_BOLD</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle - STYLE_BOLD</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActivateNIS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ActivateNIS(iPos As Integer)</SourceLine>
   <SourceLine>If iPos &gt;= 0 And m_nis.iPos &lt;&gt; iPos  Then</SourceLine>
   <SourceLine>If iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_cpArr(iPos).btStyle</SourceLine>
   <SourceLine>m_nis.iColorNr = m_cpArr(iPos).iColorNr</SourceLine>
   <SourceLine>m_nis.iFontNr = m_cpArr(iPos).iFontNr</SourceLine>
   <SourceLine>m_nis.dFontSize = m_cpArr(iPos).dFontSize</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = 0</SourceLine>
   <SourceLine>m_nis.iColorNr = 0</SourceLine>
   <SourceLine>m_nis.iFontNr = 0</SourceLine>
   <SourceLine>m_nis.dFontSize = 12</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_nis.iPos = iPos</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>m_nis.iPos = -1</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextItalic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextItalic(iPos As Integer, bValue As Boolean)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If bValue &lt;&gt; ((m_nis.btStyle And STYLE_ITALIC) &gt; 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle + STYLE_ITALIC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle - STYLE_ITALIC</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextUnderline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextUnderline(iPos As Integer, iStyle As Integer)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If iStyle &lt; 0 Then</SourceLine>
   <SourceLine>iStyle = 0</SourceLine>
   <SourceLine>ElseIf iStyle &gt; 7 Then</SourceLine>
   <SourceLine>iStyle = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_nis.btStyle = (m_nis.btStyle - (m_nis.btStyle And 7)) + iStyle</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iStyle As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextColor(iPos As Integer, clColor As Color)</SourceLine>
   <SourceLine>Dim iColorNr As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iColorNr = m_clColors.IndexOf(clColor)</SourceLine>
   <SourceLine>If iColorNr &lt; 0 Then</SourceLine>
   <SourceLine>m_clColors.Append(clColor)</SourceLine>
   <SourceLine>iColorNr = m_clColors.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_nis.iColorNr = iColorNr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, clColor As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextFont(iPos As Integer, strFont As String)</SourceLine>
   <SourceLine>Dim iFontNr As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iFontNr = m_strArrFonts.IndexOf(strFont)</SourceLine>
   <SourceLine>If iFontNr &lt; 0 Then</SourceLine>
   <SourceLine>m_strArrFonts.Append(strFont)</SourceLine>
   <SourceLine>iFontNr = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_nis.iFontNr = iFontNr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, strFont As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextFontSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextFontSize(iPos As Integer, dSize As Double)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>m_nis.dFontSize = dSize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, dSize As Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetIndent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetIndent(iPos As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).Indent</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).Indent</SourceLine>
   <SourceLine>If m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>iRtVal = iRtVal + m_rpArrParagraph(0).FirstIndent</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(iPar).Indent</SourceLine>
   <SourceLine>If m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>iRtVal = iRtVal + m_rpArrParagraph(iPar).FirstIndent</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iRtVal &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFontSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFontSize(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Double</SourceLine>
   <SourceLine>Dim dSize As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bVolgendTeTypenCharacter Then</SourceLine>
   <SourceLine>If m_nis.iPos = iPos Then</SourceLine>
   <SourceLine>dSize = m_nis.dFontSize</SourceLine>
   <SourceLine>ElseIf iPos = 0 And m_cpArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>dSize = m_cpArr(0).dFontSize</SourceLine>
   <SourceLine>ElseIf iPos &gt; 0 And iPos - 1 &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>dSize = m_cpArr(iPos - 1).dFontSize</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dSize = 10</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPos &lt; 0 Or m_cpArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>dSize = 10</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>dSize = m_cpArr(iPos).dFontSize</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return dSize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>IsFontUsed</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsFontUsed(strFont As String) As Boolean</SourceLine>
   <SourceLine>Return (m_strArrFonts.IndexOf(strFont) &gt;= 0)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strFont As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetFont(iPos As Integer, Assigns strFont As String)</SourceLine>
   <SourceLine>Dim iFontNr As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iFontNr = m_strArrFonts.IndexOf(strFont)</SourceLine>
   <SourceLine>If iFontNr &lt; 0 Then</SourceLine>
   <SourceLine>m_strArrFonts.Append(strFont)</SourceLine>
   <SourceLine>iFontNr = m_strArrFonts.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(iPos).iFontNr &lt;&gt; iFontNr Then</SourceLine>
   <SourceLine>m_cpArr(iPos).iFontNr = iFontNr</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenY = 0</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns strFont As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetFontSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetFontSize(iPos As Integer, Assigns iSize As Integer)</SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound And m_cpArr(iPos).dFontSize &lt;&gt; iSize Then</SourceLine>
   <SourceLine>m_cpArr(iPos).dFontSize = iSize</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenY = 0</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns iSize As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>MeetCP</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub MeetCP(iPos As Integer)</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>If m_cpArr(iPos).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>m_cpArr(iPos).iHeight = m_rpicArr(m_cpArr(iPos).iPicture - 1).m_picResized.Height</SourceLine>
   <SourceLine>m_cpArr(iPos).iWidth = m_rpicArr(m_cpArr(iPos).iPicture - 1).m_picResized.Width</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(m_cpArr(iPos).iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(m_cpArr(iPos).dFontSize)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(m_chArr(iPos)) &lt; 32 Then</SourceLine>
   <SourceLine>If m_cpArr(iPos).btAscSpecial = 10 And iPos &lt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>MeetCP(iPos + 1)</SourceLine>
   <SourceLine>m_cpArr(iPos).iHeight = m_cpArr(iPos + 1).iHeight</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(iPos).iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr(iPos).iWidth = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(iPos).iHeight = g.StringHeight(m_chArr(iPos), 500) + 2</SourceLine>
   <SourceLine>g.Bold = ((m_cpArr(iPos).btStyle And STYLE_BOLD) &lt;&gt; 0)</SourceLine>
   <SourceLine>g.Italic = ((m_cpArr(iPos).btStyle And STYLE_ITALIC) &lt;&gt; 0)</SourceLine>
   <SourceLine>m_cpArr(iPos).iWidth = g.StringWidth(m_chArr(iPos))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChPlainToRTFCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChPlainToRTFCode(chPlain As String, ByRef bUnicodeInitialized As Boolean) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine>Dim iAsc As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iAsc = Asc(chPlain)</SourceLine>
   <SourceLine>If iAsc &gt; 127 Then</SourceLine>
   <SourceLine>If Not bUnicodeInitialized Then</SourceLine>
   <SourceLine>bUnicodeInitialized = True</SourceLine>
   <SourceLine>strRtVal = "\uc0"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strRtVal = strRtVal + "\u" + Format(iAsc, "000")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = chPlain</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>chPlain As String, ByRef bUnicodeInitialized As Boolean</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ChRTFCodeToPlain</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChRTFCodeToPlain(strRTFCode As String) As String</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim iNr As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strRTFCode.Left(1) = "u" Then</SourceLine>
   <SourceLine>iNr = strRTFCode.Mid(2).Val</SourceLine>
   <SourceLine>ch = Chr(iNr)</SourceLine>
   <SourceLine>ElseIf strRTFCode.Len = 3 And strRTFCode.Left(1) = "'" Then</SourceLine>
   <SourceLine>strRTFCode = strRTFCode.Mid(2)</SourceLine>
   <SourceLine>If strRTFCode = "80" Then</SourceLine>
   <SourceLine>ch = "€"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "81" Then</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>ElseIf strRTFCode = "82" Then</SourceLine>
   <SourceLine>ch = "‚"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "83" Then</SourceLine>
   <SourceLine>ch = "ƒ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "84" Then</SourceLine>
   <SourceLine>ch = "„"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "85" Then</SourceLine>
   <SourceLine>ch = "..."</SourceLine>
   <SourceLine>ElseIf strRTFCode = "86" Then</SourceLine>
   <SourceLine>ch = "†"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "87" Then</SourceLine>
   <SourceLine>ch = "‡"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "88" Then</SourceLine>
   <SourceLine>ch = "ˆ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "89" Then</SourceLine>
   <SourceLine>ch = "‰"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8A" Then</SourceLine>
   <SourceLine>ch = "Š"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8B" Then</SourceLine>
   <SourceLine>ch = "‹"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8C" Then</SourceLine>
   <SourceLine>ch = "Œ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8D" Then</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8E" Then</SourceLine>
   <SourceLine>ch = "Ž"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "8F" Then</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "90" Then</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>ElseIf strRTFCode = "91" Then</SourceLine>
   <SourceLine>ch = "‘"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "92" Then</SourceLine>
   <SourceLine>ch = "’"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "93" Then</SourceLine>
   <SourceLine>ch = "“"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "94" Then</SourceLine>
   <SourceLine>ch = "”"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "95" Then</SourceLine>
   <SourceLine>ch = "•"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "96" Then</SourceLine>
   <SourceLine>ch = "–"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "97" Then</SourceLine>
   <SourceLine>ch = "—"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "98" Then</SourceLine>
   <SourceLine>ch = "˜"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "99" Then</SourceLine>
   <SourceLine>ch = "™"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9A" Then</SourceLine>
   <SourceLine>ch = "š"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9B" Then</SourceLine>
   <SourceLine>ch = "›"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9C" Then</SourceLine>
   <SourceLine>ch = "œ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9D" Then</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9E" Then</SourceLine>
   <SourceLine>ch = "ž"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "9F" Then</SourceLine>
   <SourceLine>ch = "Ÿ"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "A0" Then</SourceLine>
   <SourceLine>ch = "_"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A1" Then</SourceLine>
   <SourceLine>ch = "¡"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A2" Then</SourceLine>
   <SourceLine>ch = "¢"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A3" Then</SourceLine>
   <SourceLine>ch = "£"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A4" Then</SourceLine>
   <SourceLine>ch = "¤"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A5" Then</SourceLine>
   <SourceLine>ch = "¥"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A6" Then</SourceLine>
   <SourceLine>ch = "¦"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A7" Then</SourceLine>
   <SourceLine>ch = "§"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A8" Then</SourceLine>
   <SourceLine>ch = "¨"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "A9" Then</SourceLine>
   <SourceLine>ch = "©"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AA" Then</SourceLine>
   <SourceLine>ch = "ª"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AB" Then</SourceLine>
   <SourceLine>ch = "«"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AC" Then</SourceLine>
   <SourceLine>ch = "¬"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AD" Then</SourceLine>
   <SourceLine>ch = " "</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AE" Then</SourceLine>
   <SourceLine>ch = "®"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "AF" Then</SourceLine>
   <SourceLine>ch = "¯"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "B0" Then</SourceLine>
   <SourceLine>ch = "°"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B1" Then</SourceLine>
   <SourceLine>ch = "±"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B2" Then</SourceLine>
   <SourceLine>ch = "²"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B3" Then</SourceLine>
   <SourceLine>ch = "³"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B4" Then</SourceLine>
   <SourceLine>ch = "´"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B5" Then</SourceLine>
   <SourceLine>ch = "µ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B6" Then</SourceLine>
   <SourceLine>ch = "¶"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B7" Then</SourceLine>
   <SourceLine>ch = "·"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B8" Then</SourceLine>
   <SourceLine>ch = "¸"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "B9" Then</SourceLine>
   <SourceLine>ch = "¹"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BA" Then</SourceLine>
   <SourceLine>ch = "º"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BB" Then</SourceLine>
   <SourceLine>ch = "»"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BC" Then</SourceLine>
   <SourceLine>ch = "¼"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BD" Then</SourceLine>
   <SourceLine>ch = "½"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BE" Then</SourceLine>
   <SourceLine>ch = "¾"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "BF" Then</SourceLine>
   <SourceLine>ch = "¿"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "C0" Then</SourceLine>
   <SourceLine>ch = "À"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C1" Then</SourceLine>
   <SourceLine>ch = "Á"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C2" Then</SourceLine>
   <SourceLine>ch = "Â"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C3" Then</SourceLine>
   <SourceLine>ch = "Ã"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C4" Then</SourceLine>
   <SourceLine>ch = "Ä"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C5" Then</SourceLine>
   <SourceLine>ch = "Å"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C6" Then</SourceLine>
   <SourceLine>ch = "Æ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C7" Then</SourceLine>
   <SourceLine>ch = "Ç"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C8" Then</SourceLine>
   <SourceLine>ch = "È"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "C9" Then</SourceLine>
   <SourceLine>ch = "É"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CA" Then</SourceLine>
   <SourceLine>ch = "Ê"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CB" Then</SourceLine>
   <SourceLine>ch = "Ë"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CC" Then</SourceLine>
   <SourceLine>ch = "Ì"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CD" Then</SourceLine>
   <SourceLine>ch = "Í"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CE" Then</SourceLine>
   <SourceLine>ch = "Î"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "CF" Then</SourceLine>
   <SourceLine>ch = "Ï"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "D0" Then</SourceLine>
   <SourceLine>ch = "Ð"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D1" Then</SourceLine>
   <SourceLine>ch = "Ñ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D2" Then</SourceLine>
   <SourceLine>ch = "Ò"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D3" Then</SourceLine>
   <SourceLine>ch = "Ó"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D4" Then</SourceLine>
   <SourceLine>ch = "Ô"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D5" Then</SourceLine>
   <SourceLine>ch = "Õ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D6" Then</SourceLine>
   <SourceLine>ch = "Ö"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D7" Then</SourceLine>
   <SourceLine>ch = "×"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D8" Then</SourceLine>
   <SourceLine>ch = "Ø"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "D9" Then</SourceLine>
   <SourceLine>ch = "Ù"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DA" Then</SourceLine>
   <SourceLine>ch = "Ú"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DB" Then</SourceLine>
   <SourceLine>ch = "Û"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DC" Then</SourceLine>
   <SourceLine>ch = "Ü"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DD" Then</SourceLine>
   <SourceLine>ch = "Ý"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DE" Then</SourceLine>
   <SourceLine>ch = "Þ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "DF" Then</SourceLine>
   <SourceLine>ch = "ß"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "E0" Then</SourceLine>
   <SourceLine>ch = "à"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E1" Then</SourceLine>
   <SourceLine>ch = "á"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E2" Then</SourceLine>
   <SourceLine>ch = "â"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E3" Then</SourceLine>
   <SourceLine>ch = "ã"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E4" Then</SourceLine>
   <SourceLine>ch = "ä"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E5" Then</SourceLine>
   <SourceLine>ch = "å"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E6" Then</SourceLine>
   <SourceLine>ch = "æ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E7" Then</SourceLine>
   <SourceLine>ch = "ç"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E8" Then</SourceLine>
   <SourceLine>ch = "è"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "E9" Then</SourceLine>
   <SourceLine>ch = "é"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "EA" Then</SourceLine>
   <SourceLine>ch = "ê"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "EB" Then</SourceLine>
   <SourceLine>ch = "ë"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "EC" Then</SourceLine>
   <SourceLine>ch = "ì"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "ED" Then</SourceLine>
   <SourceLine>ch = "í"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "EE" Then</SourceLine>
   <SourceLine>ch = "î"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "EF" Then</SourceLine>
   <SourceLine>ch = "ï"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf strRTFCode = "F0" Then</SourceLine>
   <SourceLine>ch = "ð"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F1" Then</SourceLine>
   <SourceLine>ch = "ñ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F2" Then</SourceLine>
   <SourceLine>ch = "ò"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F3" Then</SourceLine>
   <SourceLine>ch = "ó"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F4" Then</SourceLine>
   <SourceLine>ch = "ô"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F5" Then</SourceLine>
   <SourceLine>ch = "õ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F6" Then</SourceLine>
   <SourceLine>ch = "ö"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F7" Then</SourceLine>
   <SourceLine>ch = "÷"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F8" Then</SourceLine>
   <SourceLine>ch = "ø"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "F9" Then</SourceLine>
   <SourceLine>ch = "ù"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FA" Then</SourceLine>
   <SourceLine>ch = "ú"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FB" Then</SourceLine>
   <SourceLine>ch = "û"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FC" Then</SourceLine>
   <SourceLine>ch = "ü"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FD" Then</SourceLine>
   <SourceLine>ch = "ý"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FE" Then</SourceLine>
   <SourceLine>ch = "þ"</SourceLine>
   <SourceLine>ElseIf strRTFCode = "FF" Then</SourceLine>
   <SourceLine>ch = "ÿ"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Break</SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>ch = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return ch</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strRTFCode As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>SetColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetColor(iPos As Integer, Assigns clColor As Color)</SourceLine>
   <SourceLine>Dim iColor As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iColor = m_clColors.IndexOf(clColor)</SourceLine>
   <SourceLine>If iColor &lt; 0 Then</SourceLine>
   <SourceLine>m_clColors.Append(clColor)</SourceLine>
   <SourceLine>iColor = m_clColors.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(iPos).iColorNr &lt;&gt; iColor Then</SourceLine>
   <SourceLine>m_cpArr(iPos).iColorNr = iColor</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(iPos).iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns clColor As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetAlignment</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SetAlignment(iPos As Integer, iAlign As Integer) As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iCurrentParagraph As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iPosStart = iPos</SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= iLast And iAlign &lt;&gt; GetAlignment(iPos) Then</SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentParagraph = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>While iPosStart &gt; 0 And m_chArr(iPosStart) &lt;&gt; Chr(10) And m_cpArr(iPosStart).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStart = iPosStart - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPosStop = iPos</SourceLine>
   <SourceLine>While iPosStop &lt; iLast And m_chArr(iPosStop) &lt;&gt; Chr(13) And m_cpArr(iPosStop).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStop = iPosStop + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).TableCell = m_rpArrParagraph(iCurrentParagraph).TableCell</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).TableCell = m_rpArrParagraph(iCurrentParagraph).TableCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).Alignment = iAlign </SourceLine>
   <SourceLine>For t = iPosStart To iPosStop </SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iCurrentParagraph + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iPosStop + 1 To iLast</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 2</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iPosStart</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iAlign As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>NumbersOnly</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function NumbersOnly(strIn As String, ParamArray strArrExceptions() As String) As String</SourceLine>
   <SourceLine>Dim strOut As String</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim iAsc As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strOut = ""</SourceLine>
   <SourceLine>iLen = strIn.Len</SourceLine>
   <SourceLine>For t = 1 To iLen</SourceLine>
   <SourceLine>ch = strIn.Mid(t, 1)</SourceLine>
   <SourceLine>iAsc = Asc(ch)</SourceLine>
   <SourceLine>If iAsc &gt;= 48 And iAsc &lt;= 57 Then</SourceLine>
   <SourceLine>strOut = strOut + ch</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>For tB = strArrExceptions.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If ch = strArrExceptions(tB) Then</SourceLine>
   <SourceLine>strOut = strOut + ch</SourceLine>
   <SourceLine>tB = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strOut</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>strIn As String, ParamArray strArrExceptions() As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetParagraphMap</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetParagraphMap(ByRef iArrParagraph() As Integer, ByRef strArrParagraphDefinition() As String, ByRef strArrTekst() As String)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim iArrParagraph(-1)</SourceLine>
   <SourceLine>ReDim strArrParagraphDefinition(-1)</SourceLine>
   <SourceLine>ReDim strArrTekst(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>strArrParagraphDefinition.Append(m_rpArrParagraph(t).GetRTFString(False))</SourceLine>
   <SourceLine>strArrTekst.Append("")</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>iArrParagraph.Append(m_cpArr(t).iParagraph)</SourceLine>
   <SourceLine>If m_chArr(t) = Chr(9) Or m_chArr(t) = Chr(10) Or m_chArr(t) = Chr(13) Then</SourceLine>
   <SourceLine>strArrTekst(m_cpArr(t).iParagraph) = strArrTekst(m_cpArr(t).iParagraph) + "_"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strArrTekst(m_cpArr(t).iParagraph) = strArrTekst(m_cpArr(t).iParagraph) + m_chArr(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iArrParagraph() As Integer, ByRef strArrParagraphDefinition() As String, ByRef strArrTekst() As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetTabstops</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTabstops(iPos As Integer, iWidth As Integer) As Integer()</SourceLine>
   <SourceLine>Dim iArrRtVal() As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim bLoadStandardValues As Boolean</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bLoadStandardValues = False</SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>bLoadStandardValues = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>bLoadStandardValues = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bLoadStandardValues = False</SourceLine>
   <SourceLine>iArrRtVal = m_rpArrParagraph(iPar).GetFixedTabstops</SourceLine>
   <SourceLine>If iArrRtVal.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>iLast = iArrRtVal(iArrRtVal.Ubound)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLast = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>While iLast &lt; iWidth</SourceLine>
   <SourceLine>iLast = m_rpArrParagraph(iPar).GetNextTabstop(iLast)</SourceLine>
   <SourceLine>If iLast &lt; iWidth Then</SourceLine>
   <SourceLine>iArrRtVal.Append(0 - iLast)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bLoadStandardValues Then</SourceLine>
   <SourceLine>iLast = 0</SourceLine>
   <SourceLine>While iLast &lt; iWidth</SourceLine>
   <SourceLine>iLast = iLast + 36</SourceLine>
   <SourceLine>If iLast &lt; iWidth Then</SourceLine>
   <SourceLine>iArrRtVal.Append(0 - iLast)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iArrRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iWidth As Integer</ItemParams>
  <ItemResult>Integer()</ItemResult>
 </Method>
 <Method>
  <ItemName>SetTabstop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SetTabstop(iPos As Integer, iTabstopPos As Integer, bTabstop As Boolean) As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iCurrentParagraph As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iPosStart = iPos</SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= iLast And bTabstop &lt;&gt; IsTabStop(iPos, iTabstopPos) Then</SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentParagraph = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>While iPosStart &gt; 0 And m_chArr(iPosStart) &lt;&gt; Chr(10) And m_cpArr(iPosStart).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStart = iPosStart - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPosStop = iPos</SourceLine>
   <SourceLine>While iPosStop &lt; iLast And m_chArr(iPosStop) &lt;&gt; Chr(13) And m_cpArr(iPosStop).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStop = iPosStop + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).ToggleTabstop(iTabstopPos) </SourceLine>
   <SourceLine>For t = iPosStart To iPosStop </SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iCurrentParagraph + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iPosStop + 1 To iLast</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 2</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iPosStart</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iTabstopPos As Integer, bTabstop As Boolean</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>IsTabStop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsTabStop(iPos As Integer, iTabstopPos As Integer) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRtVal = m_rpArrParagraph(iPar).IsTabStop(iTabstopPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iTabstopPos As Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetNextInsprong</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetNextInsprong(iPos As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).GetNextTabstop(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(0).GetNextTabstop(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(iPar).GetNextTabstop(m_rpArrParagraph(iPar).Indent)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetPreviousInsprong</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetPreviousInsprong(iPos As Integer) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &lt; 0 Or iPar &gt; m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>iRtVal = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRtVal = m_rpArrParagraph(iPar).GetPreviousTabstop(m_rpArrParagraph(iPar).Indent)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>SetIndent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SetIndent(iPos As Integer, iIndent As Integer, iFirstIndent As Integer = 0) As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iCurrentParagraph As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iPosStart = iPos</SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= iLast And iIndent &lt;&gt; GetIndent(iPos) Then</SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentParagraph = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>While iPosStart &gt; 0 And m_chArr(iPosStart) &lt;&gt; Chr(10) And m_cpArr(iPosStart).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStart = iPosStart - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iPosStop = iPos</SourceLine>
   <SourceLine>While iPosStop &lt; iLast And m_chArr(iPosStop) &lt;&gt; Chr(13) And m_cpArr(iPosStop).iParagraph = iCurrentParagraph</SourceLine>
   <SourceLine>iPosStop = iPosStop + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iCurrentParagraph + 1, New clsRTFBox_Paragraph(m_rpArrParagraph(iCurrentParagraph)))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).Indent = iIndent </SourceLine>
   <SourceLine>m_rpArrParagraph(iCurrentParagraph + 1).FirstIndent = iFirstIndent</SourceLine>
   <SourceLine>For t = iPosStart To iPosStop </SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = iCurrentParagraph + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iPosStop + 1 To iLast</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 2</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iPosStart</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, iIndent As Integer, iFirstIndent As Integer = 0</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadStyleSheets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadStyleSheets(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iOpen As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim strStyle As String</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim strArrStyles() As String</SourceLine>
   <SourceLine>Dim strArrTemp() As String</SourceLine>
   <SourceLine>Dim tStyle As Integer</SourceLine>
   <SourceLine>Dim iPosSpatie As Integer</SourceLine>
   <SourceLine>Dim strStyleTag As String</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>Dim strStyles As String</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim strArrStyles(-1)</SourceLine>
   <SourceLine>iPos = strValue.InStr("{\stylesheet")</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iOpen = 1</SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine>For t = iPos + 9 To iLen</SourceLine>
   <SourceLine>ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = "{" Then</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If ch = "}" Then</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOpen = 0 Then</SourceLine>
   <SourceLine>'Jump Out, we're done here</SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + strValue.Mid(t + 1)</SourceLine>
   <SourceLine>iLen = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strStyles = strStyles + ch</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPosStart = 0</SourceLine>
   <SourceLine>iPosStop = 0</SourceLine>
   <SourceLine>If strValue.Mid(t, 2) = "\s" Then</SourceLine>
   <SourceLine>iPosStart = strValue.InStr(t + 3, " ")</SourceLine>
   <SourceLine>If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>iPosStop = strValue.InStr(iPosStart, ";")</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>strStyle = strValue.Mid(iPosStart + 1, iPosStop - (iPosStart + 1))</SourceLine>
   <SourceLine>strArrTemp = strStyle.Split("\")</SourceLine>
   <SourceLine>strStyle = ""</SourceLine>
   <SourceLine>For tStyle = 0 To strArrTemp.Ubound</SourceLine>
   <SourceLine>strStyleTag = strArrTemp(tStyle)</SourceLine>
   <SourceLine>If strStyleTag.Len &gt; 0 Then</SourceLine>
   <SourceLine>iPosSpatie = strStyleTag.InStr(" ")</SourceLine>
   <SourceLine>If iPosSpatie &gt; 0 Then</SourceLine>
   <SourceLine>strStyleTag = strStyleTag.Left(iPosSpatie - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosSpatie = strStyleTag.InStr(Chr(13))</SourceLine>
   <SourceLine>If iPosSpatie &gt; 0 Then</SourceLine>
   <SourceLine>strStyleTag = strStyleTag.Left(iPosSpatie - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosSpatie = strStyleTag.InStr(Chr(10))</SourceLine>
   <SourceLine>If iPosSpatie &gt; 0 Then</SourceLine>
   <SourceLine>strStyleTag = strStyleTag.Left(iPosSpatie - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosSpatie = strStyleTag.InStr(Chr(9))</SourceLine>
   <SourceLine>If iPosSpatie &gt; 0 Then</SourceLine>
   <SourceLine>strStyleTag = strStyleTag.Left(iPosSpatie - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strStyle = strStyle + "\" + strStyleTag</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tStyle</SourceLine>
   <SourceLine>strArrStyles.Append(strStyle)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strStyles = strStyles + strValue.Mid(t, (1 + iPosStop - t))</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>t = iPosStop</SourceLine>
   <SourceLine>ElseIf iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strStyles = strStyles + strValue.Mid(t, (1 + iPosStart - t))</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>t = iPosStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>strStyles = strStyles + ch</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = strArrStyles.Ubound To 0 Step -1</SourceLine>
   <SourceLine>strStyle = strArrStyles(t)</SourceLine>
   <SourceLine>strStyleTag = "\s" + Format(t, "0")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(strStyleTag + "\", strStyle + "\")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(strStyleTag + " ", strStyle + " ")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(strStyleTag + Chr(13), strStyle + " ")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(strStyleTag + Chr(10), strStyle + " ")</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(strStyleTag + Chr(9), strStyle + " ")</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_CutOutUnwantedBlocks</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_CutOutUnwantedBlocks(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iOpen As Integer</SourceLine>
   <SourceLine>Dim tCommentStyle As Integer</SourceLine>
   <SourceLine>Dim strArrCommentStyle() As String</SourceLine>
   <SourceLine>Dim iPosCurrent As Integer</SourceLine>
   <SourceLine>Dim iPosClosestOpen As Integer</SourceLine>
   <SourceLine>Dim iPosClosestClose As Integer</SourceLine>
   <SourceLine>Dim bCutSomething As Boolean</SourceLine>
   <SourceLine>Dim bFoundNothing As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'De volgorde is omgekeerd aan wat gefilterd wordt en is NIET toevallig</SourceLine>
   <SourceLine>strArrCommentStyle.Append("footnote") 'Footnote</SourceLine>
   <SourceLine>strArrCommentStyle.Append("footer") 'Footer</SourceLine>
   <SourceLine>strArrCommentStyle.Append("header") 'Header</SourceLine>
   <SourceLine>strArrCommentStyle.Append("info") 'Info</SourceLine>
   <SourceLine>strArrCommentStyle.Append("comment") 'Meer commentaar</SourceLine>
   <SourceLine>strArrCommentStyle.Append("*") 'Commentaar</SourceLine>
   <SourceLine>For tCommentStyle = strArrCommentStyle.Ubound To 0 Step -1</SourceLine>
   <SourceLine>bFoundNothing = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPos = strValue.InStr("{\" + strArrCommentStyle(tCommentStyle))</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iOpen = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosCurrent = iPos</SourceLine>
   <SourceLine>bCutSomething = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestOpen = iPosCurrent</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestOpen = strValue.InStr(iPosClosestOpen + 1, "{")</SourceLine>
   <SourceLine>Loop Until iPosClosestOpen &lt;= 0 Or strValue.Mid(iPosClosestOpen - 1, 1) &lt;&gt; "\" </SourceLine>
   <SourceLine>iPosClosestClose = iPosCurrent</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestClose = strValue.InStr(iPosClosestClose + 1, "}")</SourceLine>
   <SourceLine>Loop Until iPosClosestClose &lt;= 0 Or strValue.Mid(iPosClosestClose - 1, 1) &lt;&gt; "\"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPosClosestOpen &gt; 0 And iPosClosestClose &gt; 0 Then </SourceLine>
   <SourceLine>If iPosClosestOpen &lt; iPosClosestClose Then</SourceLine>
   <SourceLine>'Open was closer</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestOpen</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Close was closer</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestClose</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPosClosestOpen &gt; 0 Then</SourceLine>
   <SourceLine>'Open was closer</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestOpen</SourceLine>
   <SourceLine>ElseIf iPosClosestClose &gt; 0 Then</SourceLine>
   <SourceLine>'Close was closer</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestClose</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bFoundNothing = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOpen = 0 Then</SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + strValue.Mid(iPosClosestClose + 1)</SourceLine>
   <SourceLine>bCutSomething = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bCutSomething Or bFoundNothing</SourceLine>
   <SourceLine>'iLen = strValue.Len</SourceLine>
   <SourceLine>'For t = iPos + strArrCommentStyle(tCommentStyle).Len + 2 To iLen</SourceLine>
   <SourceLine>'ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>'If ch = "{" Then</SourceLine>
   <SourceLine>'iOpen = iOpen + 1</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'If ch = "}" Then</SourceLine>
   <SourceLine>'iOpen = iOpen - 1</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'If iOpen = 0 Then</SourceLine>
   <SourceLine>''Jump Out, we're done here</SourceLine>
   <SourceLine>'strValue = strValue.Left(iPos - 1) + strValue.Mid(t + 1)</SourceLine>
   <SourceLine>'iLen = t</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>'Next t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bFoundNothing = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bFoundNothing</SourceLine>
   <SourceLine>Next tCommentStyle</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetText() As String</SourceLine>
   <SourceLine>Dim strText As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim bExport As Boolean</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim dMs As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMs = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strText = ""</SourceLine>
   <SourceLine>iLast = m_chArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>bExport = True</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>If GetFunctie(m_cpArr(t).iFunctie) = "page" Then</SourceLine>
   <SourceLine>If Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>strText = strText + Chr(13)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>tB = t</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Loop Until t &gt;= m_cpArr.Ubound Or m_cpArr(t).iFunctie &lt;&gt; m_cpArr(tB).iFunctie</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>bExport = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bExport And m_chArr(t) &lt;&gt; Chr(10) And Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>strText = strText + m_chArr(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "RTF.GetText executed in " + Format(Round(((Microseconds - dMs) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strText</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>AppendRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AppendRTF(strRTF As String)</SourceLine>
   <SourceLine>InsertRTF(m_cpArr.Ubound, strRTF)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strRTF As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetHtml</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetHtml() As String</SourceLine>
   <SourceLine>Dim strHtml As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim bBold As Boolean</SourceLine>
   <SourceLine>Dim bItalic As Boolean</SourceLine>
   <SourceLine>Dim bUnderline As Boolean</SourceLine>
   <SourceLine>Dim bInvisible As Boolean</SourceLine>
   <SourceLine>Dim iShadowOffset As Integer</SourceLine>
   <SourceLine>Dim strLastFont As String</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim strLastAlign As String </SourceLine>
   <SourceLine>Dim strAlign As String</SourceLine>
   <SourceLine>Dim iAlign As Integer</SourceLine>
   <SourceLine>Dim iInsprong As Integer</SourceLine>
   <SourceLine>Dim bEnter As Boolean</SourceLine>
   <SourceLine>Dim iCount As Integer</SourceLine>
   <SourceLine>Dim iPosStartLastWord As Integer</SourceLine>
   <SourceLine>Dim strLink As String</SourceLine>
   <SourceLine>Dim strLastWord As String</SourceLine>
   <SourceLine>Dim bExport As Boolean</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim bHasTables As Boolean</SourceLine>
   <SourceLine>Dim iColCount As Integer</SourceLine>
   <SourceLine>Dim iLastCellThisRow As Integer</SourceLine>
   <SourceLine>Dim bSkipFirstEnter As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bSkipFirstEnter = False</SourceLine>
   <SourceLine>bHasTables = False</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>strHtml = ""</SourceLine>
   <SourceLine>strLastWord = ""</SourceLine>
   <SourceLine>strLastAlign = ""</SourceLine>
   <SourceLine>strLastFont = ""</SourceLine>
   <SourceLine>iLast = m_chArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>bExport = True</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>If GetFunctie(m_cpArr(t).iFunctie) = "page" Then</SourceLine>
   <SourceLine>bSkipFirstEnter = False</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;BR&gt;"</SourceLine>
   <SourceLine>tB = t</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Loop Until t &gt;= m_cpArr.Ubound Or m_cpArr(t).iFunctie &lt;&gt; m_cpArr(tB).iFunctie</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>bExport = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bExport Then</SourceLine>
   <SourceLine>iAlign = m_rpArrParagraph(m_cpArr(t).iParagraph).Alignment</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &lt;&gt; iLastCell Then</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>bHasTables = True</SourceLine>
   <SourceLine>If iLastCell &lt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + Chr(13) + "&lt;/DIV&gt;&lt;BR&gt;&lt;TABLE style=""width:100%""&gt;&lt;TR&gt;"</SourceLine>
   <SourceLine>iColCount = 0</SourceLine>
   <SourceLine>ElseIf iLastCell &lt;&gt; iCell Then</SourceLine>
   <SourceLine>If m_tcArr(iCell).iRow &lt;&gt; m_tcArr(iLastCell).iRow Then</SourceLine>
   <SourceLine>strHtml = strHtml.ReplaceAll("&lt;TD width=""xxx%"" STYLE=", "&lt;TD width=""" + Format(100.0 / iColCount, "0.0") + "%"" STYLE=")  </SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/TD&gt;&lt;/TR&gt;"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLastCellThisRow = iCell</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iLastCellThisRow = iLastCellThisRow + 1</SourceLine>
   <SourceLine>Loop Until iLastCellThisRow &gt; m_tcArr.Ubound Or m_tcArr(iLastCellThisRow).iRow &lt;&gt; m_tcArr(iCell).iRow</SourceLine>
   <SourceLine>iLastCellThisRow = iLastCellThisRow - 1</SourceLine>
   <SourceLine>If m_tcArr(iLastCellThisRow).iCol &lt;&gt; m_tcArr(iLastCell).iCol Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/TABLE&gt;" + Chr(13)</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;TABLE style=""width:100%""&gt;" </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;TR&gt;"</SourceLine>
   <SourceLine>iColCount = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/TD&gt;" </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strHtml = strHtml + Chr(13) + "&lt;TD width=""xxx%"" STYLE="""</SourceLine>
   <SourceLine>If m_tcArr(iCell).bBorder Then</SourceLine>
   <SourceLine>strHtml = strHtml + "border:1px solid #A0A0A0;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_tcArr(iCell).iColorNr &gt;= 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + "background-color: #" + GetHtml_Color(m_clColors(m_tcArr(iCell).iColorNr)) + ";"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strHtml = strHtml + "text-align: "</SourceLine>
   <SourceLine>If iAlign = ALIGNCENTER Then</SourceLine>
   <SourceLine>strHtml = strHtml + "center;""&gt;"</SourceLine>
   <SourceLine>ElseIf iAlign = ALIGNRIGHT Then</SourceLine>
   <SourceLine>strHtml = strHtml + "right;""&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "left;""&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bSkipFirstEnter = True</SourceLine>
   <SourceLine>iColCount = iColCount + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLastCell = iCell</SourceLine>
   <SourceLine>ElseIf iLastCell &gt;= 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml.ReplaceAll("&lt;TD width=""xxx%"" STYLE=", "&lt;TD width=""" + Format(100.0 / iColCount, "0.0") + "%"" STYLE=")  </SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;" + strAlign</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iInsprong = m_rpArrParagraph(m_cpArr(t).iParagraph).Indent</SourceLine>
   <SourceLine>strFont = "&lt;SPAN STYLE=""font-family: " + m_strArrFonts(m_cpArr(t).iFontNr) + ";" + _</SourceLine>
   <SourceLine>"font-size: " + Format(m_cpArr(t).dFontSize, "0") + "pt;" + _</SourceLine>
   <SourceLine>"color: #" + GetHtml_Color(m_clColors(m_cpArr(t).iColorNr)) + ";"</SourceLine>
   <SourceLine>If IsShadow(t, False) Then</SourceLine>
   <SourceLine>iShadowOffset = Floor(m_cpArr(t).dFontSize / 10)</SourceLine>
   <SourceLine>If iShadowOffset &lt; 2 Then</SourceLine>
   <SourceLine>iShadowOffset = 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strFont = strFont + "text-shadow: " + Format(Floor(iShadowOffset / 2), "0") + "px " + _</SourceLine>
   <SourceLine>Format(iShadowOffset, "0") + "px #999999;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsStrikeThrough(t, False) Then</SourceLine>
   <SourceLine>strFont = strFont + "text-decoration: line-through;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strFont = strFont + """&gt;"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strAlign = "&lt;DIV STYLE="""</SourceLine>
   <SourceLine>If iAlign = ALIGNLEFT Then</SourceLine>
   <SourceLine>strAlign = strAlign + "text-align: left;"</SourceLine>
   <SourceLine>If iInsprong &gt; 0 Then</SourceLine>
   <SourceLine>strAlign = strAlign + "margin-left:" + Format(iInsprong, "0") + "px;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iAlign = ALIGNRIGHT Then</SourceLine>
   <SourceLine>strAlign = strAlign + "text-align: right;"</SourceLine>
   <SourceLine>If iInsprong &gt; 0 Then</SourceLine>
   <SourceLine>strAlign = strAlign + "margin-right:" + Format(iInsprong, "0") + "px;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iAlign = ALIGNCENTER Then</SourceLine>
   <SourceLine>strAlign = strAlign + "text-align: center;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strAlign = strAlign + """&gt;"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If t = 0 Then</SourceLine>
   <SourceLine>If IsInvisible(t, False) Then</SourceLine>
   <SourceLine>bInvisible = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bInvisible Then</SourceLine>
   <SourceLine>If IsBold(t, False) Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;B&gt;"</SourceLine>
   <SourceLine>bBold = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsItalic(t, False) Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;I&gt;"</SourceLine>
   <SourceLine>bItalic = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsUnderline(t, False) Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;U&gt;"</SourceLine>
   <SourceLine>bUnderline = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCell &lt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + strAlign</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLastAlign = strAlign</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bInvisible And Asc(m_chArr(t)) &lt;= 32 Then</SourceLine>
   <SourceLine>If strLastWord.Left(7) = "http://" Or strLastWord.Left(8) = "https://" Then</SourceLine>
   <SourceLine>If strLastWord.Right(4) = ".jpg" Or _</SourceLine>
   <SourceLine>strLastWord.Right(5) = ".jpeg" Or _</SourceLine>
   <SourceLine>strLastWord.Right(4) = ".png" Or _</SourceLine>
   <SourceLine>strLastWord.Right(4) = ".gif" Or _</SourceLine>
   <SourceLine>strLastWord.Right(4) = ".bmp" Then</SourceLine>
   <SourceLine>strLink = "&lt;IMG src=""" + strLastWord + """&gt;"</SourceLine>
   <SourceLine>strHtml = strHtml.Left(iPosStartLastWord - 1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strLink = "&lt;A href=""" + strLastWord + """&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf IsEmailAdres(strLastWord) Then</SourceLine>
   <SourceLine>strLink = "&lt;A href=""mailto:" + strLastWord + """&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strLink = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strLink.Len &gt; 0 Then</SourceLine>
   <SourceLine>If strLink.Left(3) = "&lt;A " Then</SourceLine>
   <SourceLine>strHtml = strHtml.Left(iPosStartLastWord - 1) + strLink + strHtml.Mid(iPosStartLastWord)</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/A&gt;"</SourceLine>
   <SourceLine>ElseIf strLink.Left(5) = "&lt;IMG " Then</SourceLine>
   <SourceLine>strHtml = strHtml + strLink</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLastWord = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_chArr(t) = Chr(10) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If bEnter Then</SourceLine>
   <SourceLine>If Not bInvisible Then</SourceLine>
   <SourceLine>If strAlign = strLastAlign Then</SourceLine>
   <SourceLine>If Not bSkipFirstEnter Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;BR&gt;" + Chr(13)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iCell &lt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/SPAN&gt;&lt;/DIV&gt;" + Chr(13) + strAlign + strFont</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/SPAN&gt;" + Chr(13) + strFont</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLastFont = strFont</SourceLine>
   <SourceLine>strLastAlign = strAlign</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bSkipFirstEnter = False</SourceLine>
   <SourceLine>bEnter = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_chArr(t) = Chr(13) Then</SourceLine>
   <SourceLine>bEnter = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If IsInvisible(t, False) &lt;&gt;  bInvisible Then</SourceLine>
   <SourceLine>bInvisible = Not bInvisible</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bInvisible Then</SourceLine>
   <SourceLine>If IsBold(t, False) &lt;&gt;  bBold Then</SourceLine>
   <SourceLine>bBold = Not bBold</SourceLine>
   <SourceLine>If bBold Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;B&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/B&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsItalic(t, False) &lt;&gt; bItalic Then</SourceLine>
   <SourceLine>bItalic = Not bItalic</SourceLine>
   <SourceLine>If bItalic Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;I&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/I&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsUnderline(t, False) &lt;&gt; bUnderline Then</SourceLine>
   <SourceLine>bUnderline = Not bUnderline</SourceLine>
   <SourceLine>If bUnderline Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;U&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/U&gt;" </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strFont &lt;&gt; strLastFont Then </SourceLine>
   <SourceLine>If strLastFont.Len &gt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/SPAN&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strHtml = strHtml + strFont</SourceLine>
   <SourceLine>strLastFont = strFont</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(m_chArr(t)) &gt; 32 Then</SourceLine>
   <SourceLine>If strLastWord.Len = 0 Then</SourceLine>
   <SourceLine>iPosStartLastWord = strHtml.Len + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLastWord = strLastWord + m_chArr(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_cpArr(t).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + GetHtml_Image(m_cpArr(t).iPicture - 1)</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = " " Then</SourceLine>
   <SourceLine>If strHtml.Right(1) = " " Then</SourceLine>
   <SourceLine>strHtml = strHtml.Left(strHtml.Len - 1) + "&amp;nbsp;&amp;nbsp;"</SourceLine>
   <SourceLine>ElseIf strHtml.Right(6) = "&amp;nbsp;" Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&amp;nbsp;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + " "</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = Chr(9) Then</SourceLine>
   <SourceLine>iCount = 1</SourceLine>
   <SourceLine>While t + 1 &lt;= iLast And m_chArr(t + 1) = Chr(9)</SourceLine>
   <SourceLine>iCount = iCount + 1</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/SPAN&gt;" + GetHtml_Tabs(iCount) + strFont</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = "&lt;" Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&amp;lt;"</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = "&gt;" Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&amp;gt;"</SourceLine>
   <SourceLine>ElseIf m_chArr(t) = "&amp;" Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&amp;amp;"</SourceLine>
   <SourceLine>ElseIf m_chArr(t) &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>If Asc(m_chArr(t)) &gt; 127 Then</SourceLine>
   <SourceLine>strHtml = strHtml + ChPlainToHtmlCode(m_chArr(t))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = strHtml + m_chArr(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strLastFont.Len &gt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/SPAN&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If strLastAlign.Len &gt; 0 Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/DIV&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bBold Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/B&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bItalic Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/I&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bUnderline Then</SourceLine>
   <SourceLine>strHtml = strHtml + "&lt;/U&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bHasTables Then</SourceLine>
   <SourceLine>strHtml = "&lt;HTML&gt;&lt;HEAD&gt;" + _</SourceLine>
   <SourceLine>"&lt;STYLE TYPE=""text/css""&gt;" + EndOfLine + _</SourceLine>
   <SourceLine>"table, th, td, tr {border-collapse: collapse;}" + EndOfLine + _</SourceLine>
   <SourceLine>"th, td {vertical-align: top; padding: 3px;}" + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;/STYLE&gt;" + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;/HEAD&gt;" + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;BODY&gt;" + EndOfLine + _ </SourceLine>
   <SourceLine>strHtml + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;/BODY&gt;" + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;/HTML&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strHtml = "&lt;HTML&gt;&lt;BODY&gt;" + EndOfLine + _</SourceLine>
   <SourceLine>strHtml + EndOfLine + _</SourceLine>
   <SourceLine>"&lt;/BODY&gt;&lt;/HTML&gt;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strHtml</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetHtml_Color</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetHtml_Color(clColor As Color) As String</SourceLine>
   <SourceLine>Dim strRed As String</SourceLine>
   <SourceLine>Dim strGreen As String</SourceLine>
   <SourceLine>Dim strBlue As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRed = Hex(clColor.Red)</SourceLine>
   <SourceLine>If strRed.Len = 1 Then </SourceLine>
   <SourceLine>strRed = "0" + strRed</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strGreen = Hex(clColor.Green)</SourceLine>
   <SourceLine>If strGreen.Len = 1 Then</SourceLine>
   <SourceLine>strGreen = "0" + strGreen</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strBlue = Hex(clColor.Blue)</SourceLine>
   <SourceLine>If strBlue.Len = 1 Then</SourceLine>
   <SourceLine>strBlue = "0" + strBlue</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRed + strGreen + strBlue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>clColor As Color</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ChPlainToHtmlCode</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChPlainToHtmlCode(ch As String) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Kleine letters</SourceLine>
   <SourceLine>If ch = "á" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Aacute;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;aacute;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "à" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Agrave;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;agrave;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "â" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Acirc;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;acirc;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ä" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Auml;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;auml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ã" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Atilde;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;atilde;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "å" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Aring;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;aring;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ç" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ccedil;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ccedil;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "é" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Eacute;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;eacute;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "è" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Egrave;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;egrave;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ê" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ecirc;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ecirc;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ë" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Euml;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;euml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "í" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Iacute;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = "&amp;iacute;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ì" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Igrave;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = "&amp;igrave;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "î" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Icirc;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = "&amp;icirc;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ï" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Iuml;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;iuml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ñ" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ntilde;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ntilde;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ó" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Oacute;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;oacute;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ò" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ograve;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ograve;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ô" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ocirc;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ocirc;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ö" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ouml;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ouml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "õ" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Otilde;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;otilde;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ú" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Uacute;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;uacute;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ù" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ugrave;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ugrave;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "û" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ucirc;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;ucirc;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ü" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Uuml;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;uuml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "æ" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;AElig;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;aelig;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ø" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Oslash;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;oslash;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "œ" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#140;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;#156;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf ch = "ÿ" Then</SourceLine>
   <SourceLine>If ch.Asc = ch.Uppercase.Asc Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#159;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal ="&amp;yuml;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Speciale tekens</SourceLine>
   <SourceLine>ElseIf ch = "²" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;sup2;" </SourceLine>
   <SourceLine>ElseIf ch = "³" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;sup3;"</SourceLine>
   <SourceLine>ElseIf ch = "√" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#8730;"</SourceLine>
   <SourceLine>ElseIf ch = "‘" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#145;"</SourceLine>
   <SourceLine>ElseIf ch = "’" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#146;"</SourceLine>
   <SourceLine>ElseIf ch = "“" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#147;"</SourceLine>
   <SourceLine>ElseIf ch = "”" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#148;"</SourceLine>
   <SourceLine>ElseIf ch = "&lt;" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;lt;"</SourceLine>
   <SourceLine>ElseIf ch = "&gt;" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;gt;"</SourceLine>
   <SourceLine>ElseIf ch = "†" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#134;"</SourceLine>
   <SourceLine>ElseIf ch = "°" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;deg;"</SourceLine>
   <SourceLine>ElseIf ch = "¢" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;cent;"</SourceLine>
   <SourceLine>ElseIf ch = "£" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;pound;"</SourceLine>
   <SourceLine>ElseIf ch = "§" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;sect;"</SourceLine>
   <SourceLine>ElseIf ch = "•" Or ch = "●" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#149;"</SourceLine>
   <SourceLine>ElseIf ch = "◊" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#9674;"</SourceLine>
   <SourceLine>ElseIf ch = "■" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#9632;"</SourceLine>
   <SourceLine>ElseIf ch = "□" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#9633;"</SourceLine>
   <SourceLine>ElseIf ch = "►" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#9658;"</SourceLine>
   <SourceLine>ElseIf ch = "¶" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;para;"</SourceLine>
   <SourceLine>ElseIf ch = "ß" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;szlig;"</SourceLine>
   <SourceLine>ElseIf ch = "®" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;reg;"</SourceLine>
   <SourceLine>ElseIf ch = "©" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;copy;"</SourceLine>
   <SourceLine>ElseIf ch = "™" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#153;"</SourceLine>
   <SourceLine>ElseIf ch = "´" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;acute;"</SourceLine>
   <SourceLine>ElseIf ch = "¨" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;uml;"</SourceLine>
   <SourceLine>ElseIf ch = "≠" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;ne;"</SourceLine>
   <SourceLine>ElseIf ch = "±" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;plusmn;"</SourceLine>
   <SourceLine>ElseIf ch = "≤" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;le;"</SourceLine>
   <SourceLine>ElseIf ch = "≥" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;ge;"</SourceLine>
   <SourceLine>ElseIf ch = "¥" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;yen;"</SourceLine>
   <SourceLine>ElseIf ch = "µ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;micro;"</SourceLine>
   <SourceLine>ElseIf ch = "ª" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;ordf;"</SourceLine>
   <SourceLine>ElseIf ch = "º" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;ordm;"</SourceLine>
   <SourceLine>ElseIf ch = "¿" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;iquest;"</SourceLine>
   <SourceLine>ElseIf ch = "¡" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;iexcl;"</SourceLine>
   <SourceLine>ElseIf ch = "¬" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;not;"</SourceLine>
   <SourceLine>ElseIf ch = "«" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;laquo;"</SourceLine>
   <SourceLine>ElseIf ch = "»" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;raquo;"</SourceLine>
   <SourceLine>ElseIf ch = "…" Then</SourceLine>
   <SourceLine>strRtVal ="..." '   &amp;helip; Wordt niet overal aanvaard</SourceLine>
   <SourceLine>ElseIf ch = " " Then</SourceLine>
   <SourceLine>strRtVal ="&amp;nbsp;"</SourceLine>
   <SourceLine>ElseIf ch = "–" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#150;"</SourceLine>
   <SourceLine>ElseIf ch = "—" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#151;"</SourceLine>
   <SourceLine>ElseIf ch = "‘" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;lsquo;"</SourceLine>
   <SourceLine>ElseIf ch = "’" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;rsquo;"</SourceLine>
   <SourceLine>ElseIf ch = "÷" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;divide;"</SourceLine>
   <SourceLine>ElseIf ch = "Ÿ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#159;"</SourceLine>
   <SourceLine>ElseIf ch = "€" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#8364;"</SourceLine>
   <SourceLine>ElseIf ch = "·" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;middot;"</SourceLine>
   <SourceLine>ElseIf ch = "ƒ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#131;"</SourceLine>
   <SourceLine>ElseIf ch = "‡" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#135;"</SourceLine>
   <SourceLine>ElseIf ch = "‰" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#137;"</SourceLine>
   <SourceLine>ElseIf ch = "¯" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;macr;"</SourceLine>
   <SourceLine>ElseIf ch = """" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;quot;"</SourceLine>
   <SourceLine>ElseIf ch = "'" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;apos;"</SourceLine>
   <SourceLine>ElseIf ch = "ﬁ" Then</SourceLine>
   <SourceLine>strRtVal ="fi"</SourceLine>
   <SourceLine>ElseIf ch = "ﬂ" Then</SourceLine>
   <SourceLine>strRtVal ="fl"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Hoofdletters (Voor het geval realbasic die bug patched)</SourceLine>
   <SourceLine>ElseIf ch = "Á" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#193;"</SourceLine>
   <SourceLine>ElseIf ch = "Ä" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Auml;"</SourceLine>
   <SourceLine>ElseIf ch = "Å" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Aring;"</SourceLine>
   <SourceLine>ElseIf ch = "À" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Agrave;"</SourceLine>
   <SourceLine>ElseIf ch = "Ã" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Atilde;"</SourceLine>
   <SourceLine>ElseIf ch = "Â" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Acirc;"</SourceLine>
   <SourceLine>ElseIf ch = "Ç" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ccedil;"</SourceLine>
   <SourceLine>ElseIf ch = "Ë" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Euml;"</SourceLine>
   <SourceLine>ElseIf ch = "É" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Eacute;"</SourceLine>
   <SourceLine>ElseIf ch = "È" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Egrave;"</SourceLine>
   <SourceLine>ElseIf ch = "Ê" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Ecirc;"</SourceLine>
   <SourceLine>ElseIf ch = "Í" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Iacute;"</SourceLine>
   <SourceLine>ElseIf ch = "Î" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Icirc;"</SourceLine>
   <SourceLine>ElseIf ch = "Ï" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Iuml;"</SourceLine>
   <SourceLine>ElseIf ch = "Ì" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Igrave;"</SourceLine>
   <SourceLine>ElseIf ch = "Ñ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ntilde;"</SourceLine>
   <SourceLine>ElseIf ch = "Ó" Then </SourceLine>
   <SourceLine>strRtVal ="&amp;Oacute;"</SourceLine>
   <SourceLine>ElseIf ch = "Ô" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ocirc;"</SourceLine>
   <SourceLine>ElseIf ch = "Ò" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ograve;"</SourceLine>
   <SourceLine>ElseIf ch = "Ö" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ouml;"</SourceLine>
   <SourceLine>ElseIf ch = "Õ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Otilde;"</SourceLine>
   <SourceLine>ElseIf ch = "Ü" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Uuml;"</SourceLine>
   <SourceLine>ElseIf ch = "Ú" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Uacute;"</SourceLine>
   <SourceLine>ElseIf ch = "Û" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Ucirc;"</SourceLine>
   <SourceLine>ElseIf ch = "Ù" Then</SourceLine>
   <SourceLine>strRtVal = "&amp;Ugrave;"</SourceLine>
   <SourceLine>ElseIf ch = "Æ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;AElig;"</SourceLine>
   <SourceLine>ElseIf ch = "Ø" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;Oslash;"</SourceLine>
   <SourceLine>ElseIf ch = "Œ" Then</SourceLine>
   <SourceLine>strRtVal ="&amp;#140;"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf Asc(ch) &gt; 127 Then</SourceLine>
   <SourceLine>strRtVal = "&amp;#" + Format(Asc(ch), "0") + ";"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else </SourceLine>
   <SourceLine>strRtVal = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ch As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetHtml_Tabs</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetHtml_Tabs(iNrTabs As Integer) As String</SourceLine>
   <SourceLine>Dim strTabs As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNrTabs &gt; 0 Then</SourceLine>
   <SourceLine>strTabs = "&lt;SPAN STYLE=""font-family: Courier New;" + _</SourceLine>
   <SourceLine>"font-size: 12;""&gt;"</SourceLine>
   <SourceLine>For t = 1 To iNrTabs</SourceLine>
   <SourceLine>strTabs = strTabs + "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>strTabs = strTabs + "&lt;/SPAN&gt;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strTabs = ""</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strTabs</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iNrTabs As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadFields</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadFields(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iOpen As Integer</SourceLine>
   <SourceLine>Dim iPosCurrent As Integer</SourceLine>
   <SourceLine>Dim iPosClosestOpen As Integer</SourceLine>
   <SourceLine>Dim iPosClosestClose As Integer</SourceLine>
   <SourceLine>Dim bReplacedSomething As Boolean</SourceLine>
   <SourceLine>Dim bFoundNothing As Boolean</SourceLine>
   <SourceLine>Dim strLeft As String</SourceLine>
   <SourceLine>Dim strRight As String</SourceLine>
   <SourceLine>Dim strField As String</SourceLine>
   <SourceLine>Dim strPageTag As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bFoundNothing = False</SourceLine>
   <SourceLine>iPos = 0</SourceLine>
   <SourceLine>strPageTag = "{\field{\*\fldinst page}{\fldrslt \par     ...PageBreak...    \par}}"</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\page ", strPageTag)</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll("\page", strPageTag)</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPos = strValue.InStr(iPos + 1, "{\field")</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iOpen = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosCurrent = iPos</SourceLine>
   <SourceLine>bReplacedSomething = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestOpen = iPosCurrent</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestOpen = strValue.InStr(iPosClosestOpen + 1, "{")</SourceLine>
   <SourceLine>Loop Until iPosClosestOpen &lt;= 0 Or strValue.Mid(iPosClosestOpen - 1, 1) &lt;&gt; "\"</SourceLine>
   <SourceLine>iPosClosestClose = iPosCurrent</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosClosestClose = strValue.InStr(iPosClosestClose + 1, "}")</SourceLine>
   <SourceLine>Loop Until iPosClosestClose &lt;= 0 Or strValue.Mid(iPosClosestClose - 1, 1) &lt;&gt; "\"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPosClosestOpen &gt; 0 And iPosClosestClose &gt; 0 Then </SourceLine>
   <SourceLine>If iPosClosestOpen &lt; iPosClosestClose Then</SourceLine>
   <SourceLine>'Open was closer</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestOpen</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Close was closer</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestClose</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPosClosestOpen &gt; 0 Then</SourceLine>
   <SourceLine>'Open was closer</SourceLine>
   <SourceLine>iOpen = iOpen + 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestOpen</SourceLine>
   <SourceLine>ElseIf iPosClosestClose &gt; 0 Then</SourceLine>
   <SourceLine>'Close was closer</SourceLine>
   <SourceLine>iOpen = iOpen - 1</SourceLine>
   <SourceLine>iPosCurrent = iPosClosestClose</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bFoundNothing = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iOpen = 0 Then</SourceLine>
   <SourceLine>strLeft = strValue.Left(iPos - 1)</SourceLine>
   <SourceLine>strRight = strValue.Mid(iPosClosestClose + 1)</SourceLine>
   <SourceLine>strField = strValue.Mid(iPos, (iPosClosestClose - iPos) + 1)</SourceLine>
   <SourceLine>ParseRTF_LoadFields_AnalyzeField(strField)</SourceLine>
   <SourceLine>If strRight.Left(1) &lt;&gt; "\" Then</SourceLine>
   <SourceLine>strValue = strLeft + strField + " " + strRight</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strValue = strLeft + strField + strRight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bReplacedSomething = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bReplacedSomething Or bFoundNothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bFoundNothing = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bFoundNothing</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadFields_AnalyzeField</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadFields_AnalyzeField(ByRef strField As String)</SourceLine>
   <SourceLine>Dim strIntern As String</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim bStepOut As Boolean</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim strFunctie As String</SourceLine>
   <SourceLine>Dim strValue As String</SourceLine>
   <SourceLine>Dim bValueFound As Boolean</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim iLenStartPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strIntern = strField.Mid(8, strField.Len - 8).Trim</SourceLine>
   <SourceLine>strIntern = strIntern.Trim</SourceLine>
   <SourceLine>strIntern = strIntern.ReplaceAll("{\*", "{")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLen = strIntern.Len</SourceLine>
   <SourceLine>strFunctie = ""</SourceLine>
   <SourceLine>strValue = ""</SourceLine>
   <SourceLine>bValueFound = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosStart = strIntern.Instr("\fldinst ")</SourceLine>
   <SourceLine>If iPosStart &gt; 0 And iPosStart + 9 &lt;= iLen Then</SourceLine>
   <SourceLine>t = iPosStart + 9</SourceLine>
   <SourceLine>bStepOut = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>ch = strIntern.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = " " Or ch = "\" Or ch = "}" Or ch = Chr(9) Or ch = Chr(10) Or ch = Chr(13) Then</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strFunctie = strFunctie + ch</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bStepOut Or t &gt; iLen</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosStart = strIntern.Instr("{\fldrslt ")</SourceLine>
   <SourceLine>If iPosStart &lt; 1 Then</SourceLine>
   <SourceLine>iPosStart = strIntern.Instr("{\fldrslt\")</SourceLine>
   <SourceLine>iLenStartPar = 9</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLenStartPar = 10</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPosStart &gt; 0 And iPosStart + iLenStartPar &lt;= iLen Then</SourceLine>
   <SourceLine>t = iPosStart + iLenStartPar</SourceLine>
   <SourceLine>bStepOut = False</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>ch = strIntern.Mid(t, 1)</SourceLine>
   <SourceLine>If ch = "}" Then</SourceLine>
   <SourceLine>bStepOut = True</SourceLine>
   <SourceLine>bValueFound = True</SourceLine>
   <SourceLine>ElseIf ch = "\" Then</SourceLine>
   <SourceLine>strValue = strValue + ch</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>If t &lt; iLen Then</SourceLine>
   <SourceLine>ch = strIntern.Mid(t, 1)</SourceLine>
   <SourceLine>strValue = strValue + ch</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strValue = strValue + ch</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bStepOut Or t &gt; iLen</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strFunctie.Len &gt; 0 And bValueFound Then</SourceLine>
   <SourceLine>'strValue = GetFunctieValue(strFunctie, strValue)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_strArrFieldFunctie.Append(strFunctie)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strField = "\fieldfunctie" + Format(m_strArrFieldFunctie.Ubound + 1, "0") + " " + strValue + "\fieldfunctie0"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strField As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetFunctieValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFunctieValue(strFunctie As String, strOriginalValue As String) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine>Dim dt As Date</SourceLine>
   <SourceLine>Dim iCurrent As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRtVal = strOriginalValue</SourceLine>
   <SourceLine>If FillFunctionValue(strFunctie, strRtVal) Then</SourceLine>
   <SourceLine>'Updated by user, leave it</SourceLine>
   <SourceLine>ElseIf strFunctie = "counter" Then</SourceLine>
   <SourceLine>iCurrent = Val(NumbersOnly(strOriginalValue))</SourceLine>
   <SourceLine>iCurrent = iCurrent + 1</SourceLine>
   <SourceLine>strRtVal = Format(iCurrent, "0")</SourceLine>
   <SourceLine>ElseIf strFunctie = "date" Then</SourceLine>
   <SourceLine>dt = New Date</SourceLine>
   <SourceLine>strRtVal = dt.ShortDate</SourceLine>
   <SourceLine>ElseIf strFunctie = "time" Then</SourceLine>
   <SourceLine>dt = New Date</SourceLine>
   <SourceLine>strRtVal = dt.ShortTime</SourceLine>
   <SourceLine>ElseIf strFunctie = "datetime" Then</SourceLine>
   <SourceLine>dt = New Date</SourceLine>
   <SourceLine>strRtVal = dt.ShortDate + " " + dt.ShortTime</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Onbekende functie, origineel teruggeven</SourceLine>
   <SourceLine>strRtVal = strOriginalValue</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strFunctie As String, strOriginalValue As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>Event_FillFunctionValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Event_FillFunctionValue(rtf As clsRTFBox_Data, strFunction As String, ByRef strValue As String) As Boolean</SourceLine>
   <SourceLine>#Pragma Unused rtf</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return FillFunctionValue(strFunction, strValue)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rtf As clsRTFBox_Data, strFunction As String, ByRef strValue As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>HasUsedFunctions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasUsedFunctions() As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>t = m_cpArr.Ubound</SourceLine>
   <SourceLine>If t &gt; 0 Then</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>bRtVal = (m_cpArr(t).iFunctie &gt; 0)</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Loop Until t = 0 Or bRtVal</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetFunctie</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetFunctie(iFunctie As Integer) As String</SourceLine>
   <SourceLine>If iFunctie &gt; 0 And iFunctie &lt;= m_strArrFieldFunctie.Ubound + 1 Then</SourceLine>
   <SourceLine>Return m_strArrFieldFunctie(iFunctie - 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iFunctie As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateFunctions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function UpdateFunctions() As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim strFunctie As String</SourceLine>
   <SourceLine>Dim strValue As String</SourceLine>
   <SourceLine>Dim strOriginalValue As String</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim bGraphicsBold As Boolean</SourceLine>
   <SourceLine>Dim bGraphicsItalic As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1, 32)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To m_cpArr.Ubound</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>cp = m_cpArr(t)</SourceLine>
   <SourceLine>strFunctie = GetFunctie(cp.iFunctie)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strFunctie &lt;&gt; "page" And strFunctie &lt;&gt; "checkbox" Then</SourceLine>
   <SourceLine>strOriginalValue = m_chArr(t)</SourceLine>
   <SourceLine>m_cpArr.Remove(t)</SourceLine>
   <SourceLine>m_chArr.Remove(t)</SourceLine>
   <SourceLine>While t &lt;= m_cpArr.Ubound And m_cpArr(t).iFunctie = cp.iFunctie</SourceLine>
   <SourceLine>strOriginalValue = strOriginalValue + m_chArr(t)</SourceLine>
   <SourceLine>m_cpArr.Remove(t)</SourceLine>
   <SourceLine>m_chArr.Remove(t)</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strValue = GetFunctieValue(strFunctie, strOriginalValue)</SourceLine>
   <SourceLine>bRtVal = (bRtVal Or (StrComp(strValue, strOriginalValue, 0) &lt;&gt; 0))</SourceLine>
   <SourceLine>cp.iLeft = 0</SourceLine>
   <SourceLine>cp.iBottom = 0</SourceLine>
   <SourceLine>strValue = strValue.ReplaceAll(Chr(13) + Chr(10), Chr(13)).ReplaceAll(Chr(10), Chr(13)).ReplaceAll(Chr(13), Chr(13) + Chr(10))</SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(cp.iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tB = 1 To iLen</SourceLine>
   <SourceLine>ch = strValue.Mid(tB, 1)</SourceLine>
   <SourceLine>If bGraphicsBold Then</SourceLine>
   <SourceLine>bGraphicsBold = False</SourceLine>
   <SourceLine>g.Bold = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic Then</SourceLine>
   <SourceLine>bGraphicsItalic = False</SourceLine>
   <SourceLine>g.Italic = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt; 32 Then</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight(ch, 500) + 2</SourceLine>
   <SourceLine>If bGraphicsBold &lt;&gt; ((cp.btStyle And STYLE_BOLD) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsBold = (Not bGraphicsBold)</SourceLine>
   <SourceLine>g.Bold = bGraphicsBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bGraphicsItalic &lt;&gt; ((cp.btStyle And STYLE_ITALIC) &lt;&gt; 0) Then</SourceLine>
   <SourceLine>bGraphicsItalic = (Not bGraphicsItalic)</SourceLine>
   <SourceLine>g.Italic = bGraphicsItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iWidth = g.StringWidth(ch)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Asc(ch) &lt;= 127 Then</SourceLine>
   <SourceLine>cp.btAscSpecial = Asc(ch)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr.Insert(t + tB - 1, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(t + tB - 1, ch)</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>t = t + iLen - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertFunctie</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertFunctie(ByRef iPos As Integer, strFunctie As String)</SourceLine>
   <SourceLine>Dim strValue As String</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iFunctie As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strValue = ""</SourceLine>
   <SourceLine>If strFunctie = "page" Then</SourceLine>
   <SourceLine>strValue = Chr(13) + "    ...PageBreak...    " + Chr(13)</SourceLine>
   <SourceLine>ElseIf strFunctie = "checkbox" Then</SourceLine>
   <SourceLine>strValue = CHECKBOX_UNCHECKED + Chr(9)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strValue = GetFunctieValue(strFunctie, strValue).ReplaceAll(Chr(13) + Chr(10), Chr(13)).ReplaceAll(Chr(10), Chr(13))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLen = strValue.Len</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iLen &gt; 0 Then</SourceLine>
   <SourceLine>m_strArrFieldFunctie.Append(strFunctie)</SourceLine>
   <SourceLine>iFunctie = m_strArrFieldFunctie.Ubound + 1 </SourceLine>
   <SourceLine>iPosStart = iPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 1 To iLen</SourceLine>
   <SourceLine>ch = strValue.Mid(t, 1)</SourceLine>
   <SourceLine>InsertChar(iPos, ch)</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iPosStart To iPos - 1</SourceLine>
   <SourceLine>m_cpArr(t).iFunctie = iFunctie</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer, strFunctie As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsEmailAdres</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsEmailAdres(strPossibleAdres As String) As Boolean</SourceLine>
   <SourceLine>Dim iAdd As Integer</SourceLine>
   <SourceLine>Dim iDot As Integer</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>iAdd = strPossibleAdres.InStr(0, "@")</SourceLine>
   <SourceLine>If iAdd &gt; 0 Then</SourceLine>
   <SourceLine>iDot = strPossibleAdres.InStr(iAdd, ".")</SourceLine>
   <SourceLine>If iDot &gt; 0 Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strPossibleAdres As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTF_AddLayout</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRTF_AddLayout(iPos As Integer, ByRef iCurrentFont As Integer, ByRef dCurrentFontSize As Double, ByRef iCurrentColor As Integer, ByRef iCurrentBold As Integer, ByRef iCurrentInvisible As Integer, ByRef iCurrentItalic As Integer, ByRef iCurrentUnderline As Integer, ByRef iCurrentStrikeThrough As Integer, ByRef iCurrentShadow As Integer) As String</SourceLine>
   <SourceLine>Dim strRTF As String</SourceLine>
   <SourceLine>Dim iBold As Integer</SourceLine>
   <SourceLine>Dim iInvisible As Integer</SourceLine>
   <SourceLine>Dim iItalic As Integer</SourceLine>
   <SourceLine>Dim iStrikeThrough As Integer</SourceLine>
   <SourceLine>Dim iShadow As Integer</SourceLine>
   <SourceLine>Dim iUnderline As Integer</SourceLine>
   <SourceLine>Dim btCurrent As Byte</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = ""</SourceLine>
   <SourceLine>If iCurrentFont &lt;&gt; m_cpArr(iPos).iFontNr Then</SourceLine>
   <SourceLine>iCurrentFont = m_cpArr(iPos).iFontNr</SourceLine>
   <SourceLine>strRTF = strRTF + "\f" + Format(iCurrentFont, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If dCurrentFontSize &lt;&gt; m_cpArr(iPos).dFontSize Then</SourceLine>
   <SourceLine>dCurrentFontSize = m_cpArr(iPos).dFontSize</SourceLine>
   <SourceLine>strRTF = strRTF + "\fs" + Format(dCurrentFontSize * 2, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentColor &lt;&gt; m_cpArr(iPos).iColorNr Then</SourceLine>
   <SourceLine>iCurrentColor = m_cpArr(iPos).iColorNr</SourceLine>
   <SourceLine>strRTF = strRTF + "\cf" + Format(iCurrentColor + 1, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>btCurrent = GetBtStyle(iPos, False)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (btCurrent And STYLE_BOLD) &gt; 0 Then</SourceLine>
   <SourceLine>iBold = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iBold = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentBold &lt;&gt; iBold Then</SourceLine>
   <SourceLine>If iCurrentBold = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\b0"</SourceLine>
   <SourceLine>ElseIf iBold = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\b"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentBold = iBold</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (btCurrent And STYLE_INVISIBLE) &gt; 0 Then</SourceLine>
   <SourceLine>iInvisible = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iInvisible = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentInvisible &lt;&gt; iInvisible Then</SourceLine>
   <SourceLine>If iCurrentInvisible = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\v0"</SourceLine>
   <SourceLine>ElseIf iInvisible = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\v"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentInvisible = iInvisible</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (btCurrent And STYLE_ITALIC) &gt; 0 Then</SourceLine>
   <SourceLine>iItalic = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iItalic = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentItalic &lt;&gt; iItalic Then</SourceLine>
   <SourceLine>If iCurrentItalic = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\i0"</SourceLine>
   <SourceLine>ElseIf iItalic = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\i"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentItalic = iItalic</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (btCurrent And STYLE_STRIKETHROUGH) &gt; 0 Then</SourceLine>
   <SourceLine>iStrikeThrough = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iStrikeThrough = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentStrikeThrough &lt;&gt; iStrikeThrough Then</SourceLine>
   <SourceLine>If iCurrentStrikeThrough = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\strike0"</SourceLine>
   <SourceLine>ElseIf iStrikeThrough = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\strike"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentStrikeThrough = iStrikeThrough</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (btCurrent And STYLE_SHADOW) &gt; 0 Then</SourceLine>
   <SourceLine>iShadow = 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iShadow = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentShadow &lt;&gt; iShadow Then</SourceLine>
   <SourceLine>If iCurrentShadow = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\shad0"</SourceLine>
   <SourceLine>ElseIf iShadow = 1 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\shad"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentShadow = iShadow</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iUnderline = (btCurrent And 7)</SourceLine>
   <SourceLine>If iCurrentUnderline &lt;&gt; iUnderline Then</SourceLine>
   <SourceLine>If iCurrentUnderline &gt; 0 And iUnderline = 0 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\ul0"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\ul"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_DOT Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\uld"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_DASH Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\uldash"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_DOUBLE Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\uldb"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_THICK Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\ulth"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_WORD Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\ulw"</SourceLine>
   <SourceLine>ElseIf iUnderline = STYLE_UNDERLINE_WAVE Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\ulwave"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCurrentUnderline = iUnderline</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRTF</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, ByRef iCurrentFont As Integer, ByRef dCurrentFontSize As Double, ByRef iCurrentColor As Integer, ByRef iCurrentBold As Integer, ByRef iCurrentInvisible As Integer, ByRef iCurrentItalic As Integer, ByRef iCurrentUnderline As Integer, ByRef iCurrentStrikeThrough As Integer, ByRef iCurrentShadow As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>SetUnderlineStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetUnderlineStyle(ByRef cp As CharPos, iUnderlineStyle As Integer)</SourceLine>
   <SourceLine>If (cp.btStyle And 7) &lt;&gt; iUnderlineStyle Then</SourceLine>
   <SourceLine>cp.btStyle = (cp.btStyle - (cp.btStyle And 7)) + iUnderlineStyle</SourceLine>
   <SourceLine>cp.iScreenX = 0</SourceLine>
   <SourceLine>cp.iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef cp As CharPos, iUnderlineStyle As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetBtStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetBtStyle(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Byte</SourceLine>
   <SourceLine>Dim btRtVal As Byte</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bVolgendTeTypenCharacter Then</SourceLine>
   <SourceLine>If m_nis.iPos = iPos Then</SourceLine>
   <SourceLine>btRtVal = m_nis.btStyle</SourceLine>
   <SourceLine>ElseIf iPos = 0 And m_cpArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>btRtVal = m_cpArr(0).btStyle</SourceLine>
   <SourceLine>ElseIf iPos &gt; 0 And iPos - 1 &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>btRtVal = m_cpArr(iPos - 1).btStyle</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>btRtVal = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iPos &lt; 0 Or m_cpArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>btRtVal = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>btRtVal = m_cpArr(iPos).btStyle</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return btRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Byte</ItemResult>
 </Method>
 <Method>
  <ItemName>GetUnderlineStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetUnderlineStyle(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim btStyleCompare As Byte</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>btStyleCompare = GetBtStyle(iPos, bVolgendTeTypenCharacter)</SourceLine>
   <SourceLine>iRtVal = (btStyleCompare And 7)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>IsStrikeThrough</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsStrikeThrough(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Boolean</SourceLine>
   <SourceLine>Return IsStyle(iPos, bVolgendTeTypenCharacter, STYLE_STRIKETHROUGH)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>IsShadow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsShadow(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Boolean</SourceLine>
   <SourceLine>Return IsStyle(iPos, bVolgendTeTypenCharacter, STYLE_SHADOW)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetStrikeThrough</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetStrikeThrough(iPos As Integer, Assigns bValue As Boolean)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetShadow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetShadow(iPos As Integer, Assigns bValue As Boolean)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextStrikeThrough</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextStrikeThrough(iPos As Integer, bValue As Boolean)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If bValue &lt;&gt; ((m_nis.btStyle And STYLE_STRIKETHROUGH) &gt; 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle + STYLE_STRIKETHROUGH</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle - STYLE_STRIKETHROUGH</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextShadow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextShadow(iPos As Integer, bValue As Boolean)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If bValue &lt;&gt; ((m_nis.btStyle And STYLE_SHADOW) &gt; 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle + STYLE_SHADOW</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle - STYLE_SHADOW</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChRTFOriginalToScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChRTFOriginalToScale(dSize As Double, bFloat As Boolean = True) As Double</SourceLine>
   <SourceLine>If m_dScale &lt;= 0.25 Then</SourceLine>
   <SourceLine>m_dScale = 1.25</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Round(m_dScale * 10.0) = 10 Then</SourceLine>
   <SourceLine>Return dSize</SourceLine>
   <SourceLine>ElseIf bFloat Then</SourceLine>
   <SourceLine>Return dSize * m_dScale</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return Ceil(dSize * m_dScale)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>dSize As Double, bFloat As Boolean = True</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>NextRedrawWithMask</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextRedrawWithMask() As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = m_bNextRedrawWithMask</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextRedrawWithMask</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextRedrawWithMask()</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertText(iPos As Integer, strText As String)</SourceLine>
   <SourceLine>InsertRTF_Intern(iPos, strText, True)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, strText As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertRTF(iPos As Integer, strRTF As String)</SourceLine>
   <SourceLine>InsertRTF_Intern(iPos, strRTF, False)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, strRTF As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InsertRTF_Intern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertRTF_Intern(iPos As Integer, strRTF As String, bForcePlaintext As Boolean)</SourceLine>
   <SourceLine>Dim rtf As New clsRTFBox_Data</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iOffsetColors As Integer</SourceLine>
   <SourceLine>Dim iOffsetFonts As Integer</SourceLine>
   <SourceLine>Dim iOffsetFunctions As Integer</SourceLine>
   <SourceLine>Dim iOffsetPictures As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim iPreCellLast As Integer</SourceLine>
   <SourceLine>Dim iPreRowLast As Integer</SourceLine>
   <SourceLine>Dim iPreParLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim tc As TableCell</SourceLine>
   <SourceLine>Dim iLastRow As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>iPos = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPos &gt; iLast Then</SourceLine>
   <SourceLine>iPos = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>If iPos = iLast Then</SourceLine>
   <SourceLine>iPos = iPos - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= iLast Then</SourceLine>
   <SourceLine>AddHandler rtf.FillFunctionValue, AddressOf Event_FillFunctionValue</SourceLine>
   <SourceLine>rtf.Parse(strRTF, bForcePlaintext)</SourceLine>
   <SourceLine>RemoveHandler rtf.FillFunctionValue, AddressOf Event_FillFunctionValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'ExportMemoryMap("1")</SourceLine>
   <SourceLine>'rtf.ExportMemoryMap("2")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>'Inserting in a tablecell =&gt; Split cell in 2 rows</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, IsBold(iPos, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, IsItalic(iPos, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, IsStrikeThrough(iPos, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, IsShadow(iPos, False))</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, GetUnderlineStyle(iPos, False))</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(iPos).dFontSize</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(iPos).iColorNr</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(iPos).iFontNr</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(cp.iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Einde van deze Cell toevoegen</SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>cp.iLeft = cp.iLeft + cp.iWidth</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iPos, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Split cell in 2 rijen</SourceLine>
   <SourceLine>For t = m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell + 1 To m_tcArr.Ubound</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t).iRow + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell).iRow + 1</SourceLine>
   <SourceLine>tc.iCol = 0</SourceLine>
   <SourceLine>m_tcArr.Insert(m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell + 1, tc)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Split deze paragraaf in 2 paragrafen en ken de nieuwe cell toe</SourceLine>
   <SourceLine>For t = m_cpArr(iPos).iParagraph + 1 To m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(m_cpArr(iPos).iParagraph + 1, New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(iPos).iParagraph + 1).TableCell = m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell + 1</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(iPos).iParagraph + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Voeg het begin van de nieuwe cell toe</SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos + 1, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iPos + 1, Chr(10))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Ken de overige tekens van die cell toe aan de nieuwe cell</SourceLine>
   <SourceLine>For t = iPos + 2 To m_cpArr.Ubound</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = m_cpArr(iPos).iParagraph Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = m_cpArr.Ubound + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPreCellLast = -1</SourceLine>
   <SourceLine>iPreRowLast = -1</SourceLine>
   <SourceLine>iPreParLast = -1</SourceLine>
   <SourceLine>For t = 0 To iPos - 1</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt; iPreParLast Then</SourceLine>
   <SourceLine>iPreParLast = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>If m_rpArrParagraph(iPreParLast).TableCell &gt;= 0 And m_rpArrParagraph(iPreParLast).TableCell &gt;= iPreCellLast Then</SourceLine>
   <SourceLine>iPreCellLast = m_rpArrParagraph(iPreParLast).TableCell</SourceLine>
   <SourceLine>If m_tcArr(iPreCellLast).iRow &gt;= iPreRowLast Then</SourceLine>
   <SourceLine>iPreRowLast = m_tcArr(iPreCellLast).iRow</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'celnr in paragrafen van in te voegen RTF verhogen met aantal voorgaande cellen</SourceLine>
   <SourceLine>If iPreCellLast &gt;= 0 Then</SourceLine>
   <SourceLine>iLast = rtf.m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If rtf.m_rpArrParagraph(t).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>rtf.m_rpArrParagraph(t).TableCell = rtf.m_rpArrParagraph(t).TableCell + iPreCellLast  + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'celnr van paragrafen in RTF waarin ingevoegd wordt verhogen met aantal in te voegen cellen NA invoegpunt</SourceLine>
   <SourceLine>If rtf.m_tcArr.Ubound &gt;= 0 And iPreCellLast &lt; m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt; iPreCellLast Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell + rtf.m_tcArr.Ubound + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Pictures mergen</SourceLine>
   <SourceLine>iOffsetPictures = m_rpicArr.Ubound + 1</SourceLine>
   <SourceLine>iLast = rtf.m_rpicArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>m_rpicArr.Append(rtf.m_rpicArr(t)) </SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Kleuren mergen</SourceLine>
   <SourceLine>iOffsetColors = m_clColors.Ubound + 1</SourceLine>
   <SourceLine>iLast = rtf.m_clColors.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>m_clColors.Append(rtf.m_clColors(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Fonts mergen</SourceLine>
   <SourceLine>iOffsetFonts = m_strArrFonts.Ubound + 1</SourceLine>
   <SourceLine>iLast = rtf.m_strArrFonts.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>m_strArrFonts.Append(rtf.m_strArrFonts(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Functies mergen</SourceLine>
   <SourceLine>iOffsetFunctions = m_strArrFieldFunctie.Ubound + 1</SourceLine>
   <SourceLine>iLast = rtf.m_strArrFieldFunctie.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>m_strArrFieldFunctie.Append(rtf.m_strArrFieldFunctie(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Paragrafen aanpassen alvorens in te voegen</SourceLine>
   <SourceLine>iLast = rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>rtf.m_cpArr(t).iParagraph = rtf.m_cpArr(t).iParagraph + iPreParLast + 1</SourceLine>
   <SourceLine>rtf.m_cpArr(t).iFontNr = rtf.m_cpArr(t).iFontNr + iOffsetFonts</SourceLine>
   <SourceLine>rtf.m_cpArr(t).iColorNr = rtf.m_cpArr(t).iColorNr + iOffsetColors</SourceLine>
   <SourceLine>If rtf.m_cpArr(t).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>rtf.m_cpArr(t).iFunctie = rtf.m_cpArr(t).iFunctie + iOffsetFunctions</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If rtf.m_cpArr(t).iPicture &gt; 0 Then</SourceLine>
   <SourceLine>rtf.m_cpArr(t).iPicture = rtf.m_cpArr(t).iPicture + iOffsetPictures</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Paragrafen aanpassen na insertpositie</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iPos To iLast</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + rtf.m_rpArrParagraph.Ubound + 1</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Cellen mergen</SourceLine>
   <SourceLine>For t = rtf.m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>rtf.m_tcArr(t).iRow = (0 - (2 + rtf.m_tcArr(t).iRow))</SourceLine>
   <SourceLine>If rtf.m_tcArr(t).iColorNr &gt;= 0 Then</SourceLine>
   <SourceLine>rtf.m_tcArr(t).iColorNr = rtf.m_tcArr(t).iColorNr + iOffsetColors</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>m_tcArr.Insert(iPreCellLast + 1, rtf.m_tcArr(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Cellen hernummeren</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If t = 0 Then</SourceLine>
   <SourceLine>iLastRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iRow = 0</SourceLine>
   <SourceLine>m_tcArr(t).iCol = 0</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iRow &lt;&gt; iLastRow Then</SourceLine>
   <SourceLine>iLastRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t - 1).iRow + 1</SourceLine>
   <SourceLine>m_tcArr(t).iCol = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t - 1).iRow</SourceLine>
   <SourceLine>m_tcArr(t).iCol = m_tcArr(t - 1).iCol + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Paragrafen mergen</SourceLine>
   <SourceLine>For t = rtf.m_rpArrParagraph.Ubound To 0 Step -1</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iPreParLast + 1, rtf.m_rpArrParagraph(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Data mergen</SourceLine>
   <SourceLine>iLast = rtf.m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iLast - 1 To 1 Step -1</SourceLine>
   <SourceLine>m_chArr.Insert(iPos, rtf.m_chArr(t))</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, rtf.m_cpArr(t))</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If rtf.m_chArr(0) &lt;&gt; Chr(13) And rtf.m_chArr(0) &lt;&gt; Chr(10) Then</SourceLine>
   <SourceLine>If Asc(rtf.m_chArr(0)) &lt;= 127 Then</SourceLine>
   <SourceLine>rtf.m_cpArr(0).btAscSpecial = Asc(rtf.m_chArr(0))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>rtf.m_cpArr(0).btAscSpecial = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_chArr.Insert(iPos, rtf.m_chArr(0))</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, rtf.m_cpArr(0))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>InsertChar(iPos, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Dubbele kleuren, fonts, paragrafen werden tot nu toe niet opgevangen, ook de volgorde is niet correct </SourceLine>
   <SourceLine>'Beetje opkuisen dus</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'ExportMemoryMap("3")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Out of boundaries, en niet binnen boundaries te krijgen, waarschijnlijk lege tekst of enkel controlecharacters</SourceLine>
   <SourceLine>'Gewoon inlezen</SourceLine>
   <SourceLine>Parse(strRTF, bForcePlaintext)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, strRTF As String, bForcePlaintext As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetText(strValue As String)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>Parse(strValue, True)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DeleteAllAndSetStartData</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DeleteAllAndSetStartData(iPos As Integer)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iFontNr As Integer</SourceLine>
   <SourceLine>Dim iColorNr As Integer</SourceLine>
   <SourceLine>Dim btStyle As Byte</SourceLine>
   <SourceLine>Dim iSize As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iColorNr = m_cpArr(iPos).iColorNr</SourceLine>
   <SourceLine>iFontNr = m_cpArr(iPos).iFontNr</SourceLine>
   <SourceLine>btStyle = m_cpArr(iPos).btStyle</SourceLine>
   <SourceLine>iSize = m_cpArr(iPos).dFontSize</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_strArrFonts.Ubound To iFontNr + 1 Step -1</SourceLine>
   <SourceLine>m_strArrFonts.Remove(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>For t = iFontNr - 1 To 0 Step -1</SourceLine>
   <SourceLine>m_strArrFonts.Remove(t)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_clColors.Ubound To iColorNr + 1 Step -1</SourceLine>
   <SourceLine>m_clColors.Remove(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>For t = iColorNr - 1 To 0 Step -1</SourceLine>
   <SourceLine>m_clColors.Remove(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim m_tcArr(-1)</SourceLine>
   <SourceLine>ReDim m_cpArr(-1)</SourceLine>
   <SourceLine>ReDim m_chArr(-1)</SourceLine>
   <SourceLine>ReDim m_rpArrParagraph(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph(0).TableCell = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(0))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(iSize)</SourceLine>
   <SourceLine>cp.btStyle = btStyle</SourceLine>
   <SourceLine>cp.dFontSize = iSize</SourceLine>
   <SourceLine>cp.iFontNr = 0</SourceLine>
   <SourceLine>cp.iColorNr = 0</SourceLine>
   <SourceLine>cp.iParagraph = 0</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Optimize(True)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTFFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function GetRTFFont(strFont As String) As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim strTestFont As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strArrPossibleFonts.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextSize = 12</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To FontCount - 1</SourceLine>
   <SourceLine>strTestFont = Font(t)</SourceLine>
   <SourceLine>g.TextFont = strTestFont</SourceLine>
   <SourceLine>If g.StringWidth("A") &gt; 0 And g.StringHeight("A", 500) &gt; 0 Then</SourceLine>
   <SourceLine>m_strArrPossibleFonts.Append(strTestFont)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>System.DebugLog "Brollettertype: " + strTestFont</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_strArrPossibleFonts.Sort</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_strArrPossibleFonts.IndexOf(strFont) &lt; 0 Then</SourceLine>
   <SourceLine>Return "Times New Roman"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return strFont</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>strFont As String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>ChRTFScaleToOriginal</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChRTFScaleToOriginal(dSize As Double, bFloat As Boolean = True) As Double</SourceLine>
   <SourceLine>If m_dScale &lt;= 0.25 Then</SourceLine>
   <SourceLine>m_dScale = 1.25</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Round(m_dScale * 10.0) = 10 Then</SourceLine>
   <SourceLine>Return dSize</SourceLine>
   <SourceLine>ElseIf bFloat Then</SourceLine>
   <SourceLine>Return dSize / m_dScale</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return Round(dSize / m_dScale)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>dSize As Double, bFloat As Boolean = True</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>SetScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function SetScale(dScale As Double) As Boolean</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dScale = Round(dScale * 4.0) / 4.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If dScale &lt; 0.5 Then </SourceLine>
   <SourceLine>dScale = 0.5</SourceLine>
   <SourceLine>ElseIf dScale &gt; 20.0 Then</SourceLine>
   <SourceLine>dScale = 20.0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_dScale &lt;&gt; dScale Then</SourceLine>
   <SourceLine>m_dScale = dScale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_cpArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>m_cpArr(t).iLeft = 0</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>MeetCP(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return False </SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>dScale As Double</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetScale() As Double</SourceLine>
   <SourceLine>If m_dScale &lt; 0.25 Then</SourceLine>
   <SourceLine>m_dScale = 1.25</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_dScale</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>SetTableCellAlsTeHermeten</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetTableCellAlsTeHermeten(iCell As Integer)</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>m_tcArr(iCell).bMetenNodig = True</SourceLine>
   <SourceLine>'If m_tcArr(iCell).iParentCell &gt;= 0 Then</SourceLine>
   <SourceLine>'SetTableCellAlsTeHermeten(m_tcArr(iCell).iParentCell)</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If Not m_tcArr(t).bMetenNodig And _</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(iCell).iRow Then</SourceLine>
   <SourceLine>'m_tcArr(t).iParentCell = m_tcArr(iCell).iParentCell And _</SourceLine>
   <SourceLine>SetTableCellAlsTeHermeten(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCell As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTF_AddTableCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRTF_AddTableCell(iPar As Integer, ByRef iCurrentCell As Integer, ByRef iCurrentRow As Integer, ByRef iCurrentCol As Integer) As String</SourceLine>
   <SourceLine>Dim strRTF As String</SourceLine>
   <SourceLine>Dim iNewCell As Integer</SourceLine>
   <SourceLine>Dim iNewRow As Integer</SourceLine>
   <SourceLine>Dim iNewCol As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRTF = ""</SourceLine>
   <SourceLine>iNewCell = m_rpArrParagraph(iPar).TableCell</SourceLine>
   <SourceLine>If iNewCell &gt; m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iNewCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCurrentCell &lt;&gt; iNewCell Then</SourceLine>
   <SourceLine>If iNewCell &gt;= 0 Then</SourceLine>
   <SourceLine>iNewRow = m_tcArr(iNewCell).iRow</SourceLine>
   <SourceLine>iNewCol = m_tcArr(iNewCell).iCol</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iNewRow = -1</SourceLine>
   <SourceLine>iNewCol = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCurrentCell &gt;= 0 Then</SourceLine>
   <SourceLine>'Einde vorige cell</SourceLine>
   <SourceLine>strRTF = strRTF + "\cell"</SourceLine>
   <SourceLine>If iNewRow &lt;&gt; iCurrentRow Then</SourceLine>
   <SourceLine>'Einde vorige rij</SourceLine>
   <SourceLine>strRTF = strRTF + "\row"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iNewCell &gt;= 0 Then</SourceLine>
   <SourceLine>If iNewRow &lt;&gt; iCurrentRow Then</SourceLine>
   <SourceLine>'Begin nieuwe rij</SourceLine>
   <SourceLine>strRTF = strRTF + "\trowd"</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iNewRow Then</SourceLine>
   <SourceLine>'Minimumbreedte toevoegen</SourceLine>
   <SourceLine>strRTF = strRTF + "\cellx"</SourceLine>
   <SourceLine>If m_tcArr(t).iMinWidth &lt;= 0 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "0"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRTF = strRTF + Format(m_tcArr(t).iMinWidth * 15, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'Maximumbreedte toevoegen</SourceLine>
   <SourceLine>If m_tcArr(t).iMaxWidth &gt;= m_tcArr(t).iMinWidth And m_tcArr(t).iMaxWidth &gt; 0 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\clwWidth" + Format(m_tcArr(t).iMaxWidth * 15, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'Backgroundcolor toevoegen</SourceLine>
   <SourceLine>If m_tcArr(t).iColorNr &gt;= 0 Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\clcbpat" + Format(m_tcArr(t).iColorNr + 1, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'Border toevoegen</SourceLine>
   <SourceLine>If m_tcArr(t).bBorder Then</SourceLine>
   <SourceLine>strRTF = strRTF + "\clbrdrl\brdrs\clbrdrr\brdrs\clbrdrt\brdrs\clbrdrb\brdrs"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'Begin nieuwe cell</SourceLine>
   <SourceLine>strRTF = strRTF + "\intbl"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCurrentCell = iNewCell</SourceLine>
   <SourceLine>iCurrentRow = iNewRow</SourceLine>
   <SourceLine>iCurrentCol = iNewCol</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRTF</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPar As Integer, ByRef iCurrentCell As Integer, ByRef iCurrentRow As Integer, ByRef iCurrentCol As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateFunctions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UpdateFunctions()</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = UpdateFunctions</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetTableCellTop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTableCellTop(iChar As Integer) As Integer</SourceLine>
   <SourceLine>If iChar &lt;= m_cpArr.Ubound And iChar &gt;= 0 And _</SourceLine>
   <SourceLine>m_cpArr(iChar).iParagraph &gt;= 0 And m_cpArr(iChar).iParagraph &lt;= m_rpArrParagraph.Ubound And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_tcArr(m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell).iTop</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iChar As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>GetTableCellLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTableCellLeft(iChar As Integer) As Integer</SourceLine>
   <SourceLine>If iChar &lt;= m_cpArr.Ubound And iChar &gt;= 0 And _</SourceLine>
   <SourceLine>m_cpArr(iChar).iParagraph &gt;= 0 And m_cpArr(iChar).iParagraph &lt;= m_rpArrParagraph.Ubound And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell &gt;= 0 And m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_tcArr(m_rpArrParagraph(m_cpArr(iChar).iParagraph).TableCell).iLeft</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iChar As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>ExportMemoryMap</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ExportMemoryMap(strName As String)</SourceLine>
   <SourceLine>Dim fi As FolderItem</SourceLine>
   <SourceLine>Dim tos As TextOutputStream</SourceLine>
   <SourceLine>Dim strLine As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim ch As String</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>fi = App.ExecutableFile.Parent</SourceLine>
   <SourceLine>#if TargetMacOS </SourceLine>
   <SourceLine>fi = fi.Parent.Parent.Parent</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>If strName = "" Then</SourceLine>
   <SourceLine>fi = fi.Child("dump.csv")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If strName.Right(4) &lt;&gt; ".csv" Then</SourceLine>
   <SourceLine>strName = strName + ".csv"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>fi = fi.Child(strName)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If fi.Exists Then</SourceLine>
   <SourceLine>fi.Delete</SourceLine>
   <SourceLine>App.SleepCurrentThread(500)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>tos = TextOutputStream.Create(fi)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strLine = "Position;Character;Left;Width;Bottom;Height;;ScreenX;ScreenY;;Function;;Paragraph;Indent;FirstIndent;TableCell;Row;Column"</SourceLine>
   <SourceLine>tos.WriteLine(strLine)</SourceLine>
   <SourceLine>For t = 0 To m_chArr.Ubound</SourceLine>
   <SourceLine>If m_chArr(t) = ";" Then</SourceLine>
   <SourceLine>ch = ","</SourceLine>
   <SourceLine>ElseIf Asc(m_chArr(t)) &lt;= 32 Then</SourceLine>
   <SourceLine>ch = "Chr(" + Format(Asc(m_chArr(t)), "0") + ")"</SourceLine>
   <SourceLine>ElseIf Asc(m_chArr(t)) &lt;= 57 And Asc(m_chArr(t)) &gt;= 48 Then</SourceLine>
   <SourceLine>ch = "Dec(" + Format(Asc(m_chArr(t)) - 48, "0") + ")" </SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>ch = m_chArr(t)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLine = Format(t, "0") + ";" + ch + ";" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iLeft, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iWidth, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iBottom, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iHeight, "0") + ";;" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iScreenX, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_cpArr(t).iScreenY, "0") + ";;"</SourceLine>
   <SourceLine>If m_cpArr(t).iFunctie &lt;= 0 Then</SourceLine>
   <SourceLine>strLine = strLine + ";;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strLine = strLine + Format(m_cpArr(t).iFunctie, "0") + ";;"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLine = strLine + Format(m_cpArr(t).iParagraph, "0") + ";"</SourceLine>
   <SourceLine>strLine = strLine + Format(m_rpArrParagraph(m_cpArr(t).iParagraph).Indent, "-0") + ";"</SourceLine>
   <SourceLine>strLine = strLine + Format(m_rpArrParagraph(m_cpArr(t).iParagraph).FirstIndent, "-0") + ";"</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &lt; 0 Then</SourceLine>
   <SourceLine>strLine = strLine + ";;"</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strLine = strLine + Format(iCell, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(iCell).iRow, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(iCell).iCol, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tos.WriteLine(strLine)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strLine = ""</SourceLine>
   <SourceLine>tos.WriteLine(strLine)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strLine = "Position;Row;Col;Width;Height;Left;Top;;Border;MetenNodig;;MinWidth;MaxWidth"</SourceLine>
   <SourceLine>tos.WriteLine(strLine)</SourceLine>
   <SourceLine>For t = 0 To m_tcArr.Ubound</SourceLine>
   <SourceLine>strLine = Format(t, "0") + ";" + Format(m_tcArr(t).iRow, "0") + ";" + Format(m_tcArr(t).iCol, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(t).iWidth, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(t).iHeight, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(t).iLeft, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(t).iTop, "0") + ";;" </SourceLine>
   <SourceLine>If m_tcArr(t).bBorder Then</SourceLine>
   <SourceLine>strLine = strLine + "X"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLine = strLine + ";" </SourceLine>
   <SourceLine>If m_tcArr(t).bMetenNodig Then</SourceLine>
   <SourceLine>strLine = strLine + "X"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strLine = strLine + ";;" + _ </SourceLine>
   <SourceLine>Format(m_tcArr(t).iMinWidth, "0") + ";" + _</SourceLine>
   <SourceLine>Format(m_tcArr(t).iMaxWidth, "0") </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tos.WriteLine(strLine)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tos.Close</SourceLine>
   <SourceLine>Catch err As IOException</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strName As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Table_AddCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Table_AddCell(iInsertAfter As Integer) As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iNewCell As Integer</SourceLine>
   <SourceLine>Dim tc As TableCell</SourceLine>
   <SourceLine>Dim iNewParagraph As Integer</SourceLine>
   <SourceLine>Dim iInsertOnPosition As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iInsertAfter &gt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iInsertAfter = m_cpArr.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(iInsertAfter).iParagraph).TableCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tc.iColorNr = m_tcArr(iCell).iColorNr</SourceLine>
   <SourceLine>tc.bBorder = m_tcArr(iCell).bBorder</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(iCell).iRow</SourceLine>
   <SourceLine>tc.bMetenNodig = True</SourceLine>
   <SourceLine>For t = 0 To m_tcArr.Ubound</SourceLine>
   <SourceLine>If m_tcArr(iCell).iRow = m_tcArr(t).iRow And _</SourceLine>
   <SourceLine>m_tcArr(iCell).iCol &lt; m_tcArr(t).iCol Then</SourceLine>
   <SourceLine>m_tcArr(t).iCol = m_tcArr(t).iCol + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>tc.iCol = m_tcArr(iCell).iCol + 1</SourceLine>
   <SourceLine>m_tcArr.Insert(iCell + 1, tc)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewCell = iCell + 1</SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt; iCell Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewParagraph = -1</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iInsertOnPosition = -1</SourceLine>
   <SourceLine>For t = iInsertAfter + 1 To iLast</SourceLine>
   <SourceLine>If iInsertOnPosition &gt;= 0 Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>ElseIf m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt;&gt; iCell Then</SourceLine>
   <SourceLine>iInsertOnPosition = t</SourceLine>
   <SourceLine>iNewParagraph = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph, New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(iNewParagraph).TableCell = iNewCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iInsertOnPosition &lt; 0 Then</SourceLine>
   <SourceLine>iInsertOnPosition = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, IsBold(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, IsItalic(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, IsStrikeThrough(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, IsShadow(iInsertAfter, False))</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, GetUnderlineStyle(iInsertAfter, False))</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(iInsertAfter).dFontSize</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(iInsertAfter).iColorNr</SourceLine>
   <SourceLine>cp.iParagraph = iNewParagraph</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(iInsertAfter).iFontNr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(cp.iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iLeft = 2</SourceLine>
   <SourceLine>cp.iScreenY = m_cpArr(iInsertOnPosition - 1).iScreenY</SourceLine>
   <SourceLine>cp.iBottom = cp.iHeight + 2</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition, Chr(10))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>cp.iLeft = cp.iLeft + cp.iWidth</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition + 1, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition + 1, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = iInsertOnPosition + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iInsertAfter As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_AddRow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Table_AddRow(iInsertAfter As Integer) As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iNewCell As Integer</SourceLine>
   <SourceLine>Dim tc As TableCell</SourceLine>
   <SourceLine>Dim iNewParagraph As Integer</SourceLine>
   <SourceLine>Dim iInsertOnPosition As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iMaxCol As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim bFindFirstPositionOutsideCell As Boolean</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim rp As clsRTFBox_Paragraph</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine>Dim bCopyAlignments As Boolean</SourceLine>
   <SourceLine>Dim iThisRow As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetStyle(cp, STYLE_BOLD, IsBold(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_ITALIC, IsItalic(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_STRIKETHROUGH, IsStrikeThrough(iInsertAfter, False))</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_SHADOW, IsShadow(iInsertAfter, False))</SourceLine>
   <SourceLine>SetUnderlineStyle(cp, GetUnderlineStyle(iInsertAfter, False))</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(iInsertAfter).dFontSize</SourceLine>
   <SourceLine>cp.iColorNr = m_cpArr(iInsertAfter).iColorNr</SourceLine>
   <SourceLine>cp.iParagraph = iNewParagraph</SourceLine>
   <SourceLine>cp.iFontNr = m_cpArr(iInsertAfter).iFontNr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = New Picture(1, 1)</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(m_strArrFonts(cp.iFontNr))</SourceLine>
   <SourceLine>g.TextSize = ChRTFOriginalToScale(cp.dFontSize)</SourceLine>
   <SourceLine>bCopyAlignments = False</SourceLine>
   <SourceLine>tc.iColorNr = -1</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(iInsertAfter).iParagraph).TableCell</SourceLine>
   <SourceLine>iMaxCol = 0</SourceLine>
   <SourceLine>iInsertOnPosition = -1</SourceLine>
   <SourceLine>tc.bMetenNodig = True</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>bCopyAlignments = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While iInsertAfter &gt; 0 And m_rpArrParagraph(m_cpArr(iInsertAfter - 1).iParagraph).TableCell = iCell</SourceLine>
   <SourceLine>iInsertAfter = iInsertAfter - 1 </SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tc.bBorder = m_tcArr(iCell).bBorder</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(iCell).iRow</SourceLine>
   <SourceLine>iNewCell = -1</SourceLine>
   <SourceLine>For t = 0 To m_tcArr.Ubound</SourceLine>
   <SourceLine>If m_tcArr(iCell).iRow = m_tcArr(t).iRow Then</SourceLine>
   <SourceLine>iMaxCol = m_tcArr(t).iCol</SourceLine>
   <SourceLine>ElseIf m_tcArr(iCell).iRow &lt; m_tcArr(t).iRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t).iRow + 1</SourceLine>
   <SourceLine>If iNewCell &lt; 0 Then</SourceLine>
   <SourceLine>iNewCell = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(iCell).iRow + 1</SourceLine>
   <SourceLine>tc.iCol = 0</SourceLine>
   <SourceLine>If iNewCell &lt; 0 Then</SourceLine>
   <SourceLine>m_tcArr.Append(tc)</SourceLine>
   <SourceLine>iNewCell = m_tcArr.Ubound</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr.Insert(iNewCell, tc)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCell = iNewCell - 1</SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt; iCell Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewParagraph = -1</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iInsertOnPosition = -1</SourceLine>
   <SourceLine>bFindFirstPositionOutsideCell = False</SourceLine>
   <SourceLine>For t = iInsertAfter + 1 To iLast</SourceLine>
   <SourceLine>If bFindFirstPositionOutsideCell Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt;&gt; iCell Then</SourceLine>
   <SourceLine>bFindFirstPositionOutsideCell = False </SourceLine>
   <SourceLine>iInsertOnPosition = t</SourceLine>
   <SourceLine>iNewParagraph = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph, New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(iNewParagraph).TableCell = iNewCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iInsertOnPosition &gt;= 0 Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 1</SourceLine>
   <SourceLine>ElseIf m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell = iCell Then</SourceLine>
   <SourceLine>bFindFirstPositionOutsideCell = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNewParagraph = -1 Then</SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>iNewParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>m_rpArrParagraph(iNewParagraph).TableCell = iNewCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iInsertOnPosition &lt; 0 Then</SourceLine>
   <SourceLine>iInsertOnPosition = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tc.bBorder = True</SourceLine>
   <SourceLine>tc.iCol = 0</SourceLine>
   <SourceLine>tc.iRow = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewCell = -1</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iInsertAfter To iLast </SourceLine>
   <SourceLine>If iInsertOnPosition &lt; 0 And m_chArr(t) = Chr(10) Then</SourceLine>
   <SourceLine>iInsertOnPosition = t</SourceLine>
   <SourceLine>If m_tcArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>t = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iInsertOnPosition &gt;= 0 And m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>iNewCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If m_tcArr.Ubound &lt; 0 Then</SourceLine>
   <SourceLine>'tc.iRow = 0</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'tc.iRow = m_tcArr(m_tcArr.Ubound).iRow + 1</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNewCell &lt; 0 Then</SourceLine>
   <SourceLine>If m_tcArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(m_tcArr.Ubound).iRow + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_tcArr.Append(tc)</SourceLine>
   <SourceLine>iNewCell = m_tcArr.Ubound</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>tc.iRow = m_tcArr(iNewCell).iRow</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iRow &gt;= tc.iRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t).iRow + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt;= iNewCell Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>m_tcArr.Insert(iNewCell, tc)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iInsertOnPosition &lt; 0 Then</SourceLine>
   <SourceLine>iInsertOnPosition = m_cpArr.Ubound + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>iNewParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>m_rpArrParagraph(iNewParagraph).TableCell = iNewCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpArrParagraph.Append(New clsRTFBox_Paragraph)</SourceLine>
   <SourceLine>m_rpArrParagraph(m_rpArrParagraph.Ubound).TableCell = -1</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iLeft = 2</SourceLine>
   <SourceLine>cp.iScreenX = 2</SourceLine>
   <SourceLine>cp.iScreenY = 0</SourceLine>
   <SourceLine>cp.iBottom = 0</SourceLine>
   <SourceLine>cp.iParagraph = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(10))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>cp.iLeft = cp.iLeft + cp.iWidth</SourceLine>
   <SourceLine>m_cpArr.Append(cp)</SourceLine>
   <SourceLine>m_chArr.Append(Chr(13))</SourceLine>
   <SourceLine>ElseIf m_rpArrParagraph(m_cpArr(iInsertOnPosition).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>'Volgende positie is een table =&gt; lege regel tussenrammen</SourceLine>
   <SourceLine>iNewParagraph = m_cpArr(iInsertOnPosition).iParagraph</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iInsertOnPosition To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt;= iNewParagraph Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rp = New clsRTFBox_Paragraph(m_rpArrParagraph(iNewParagraph))</SourceLine>
   <SourceLine>rp.TableCell = -1</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph, rp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rp = New clsRTFBox_Paragraph(m_rpArrParagraph(iNewParagraph))</SourceLine>
   <SourceLine>rp.TableCell = iNewCell</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph, rp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iLeft = 2</SourceLine>
   <SourceLine>cp.iScreenX = 2</SourceLine>
   <SourceLine>cp.iScreenY = 0</SourceLine>
   <SourceLine>cp.iBottom = 0</SourceLine>
   <SourceLine>cp.iParagraph = iNewParagraph + 1</SourceLine>
   <SourceLine>cp.iPicture = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>cp.iLeft = cp.iLeft + cp.iWidth</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition, Chr(10))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewParagraph = m_cpArr(iInsertOnPosition).iParagraph</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iInsertOnPosition To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt;= iNewParagraph Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>rp = New clsRTFBox_Paragraph(m_rpArrParagraph(iNewParagraph))</SourceLine>
   <SourceLine>rp.TableCell = -1</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph + 1, rp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rp = New clsRTFBox_Paragraph(m_rpArrParagraph(iNewParagraph))</SourceLine>
   <SourceLine>rp.TableCell = iNewCell</SourceLine>
   <SourceLine>m_rpArrParagraph.Insert(iNewParagraph + 1, rp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iNewParagraph = iNewParagraph + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iParagraph = iNewParagraph</SourceLine>
   <SourceLine>cp.iHeight = g.StringHeight("A", 500) + 2</SourceLine>
   <SourceLine>cp.iWidth = 0</SourceLine>
   <SourceLine>cp.iLeft = 2</SourceLine>
   <SourceLine>cp.iScreenY = m_cpArr(iInsertOnPosition - 1).iScreenY</SourceLine>
   <SourceLine>cp.iBottom = cp.iHeight + 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 10</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition, Chr(10))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.btAscSpecial = 13</SourceLine>
   <SourceLine>cp.iLeft = cp.iLeft + cp.iWidth</SourceLine>
   <SourceLine>m_cpArr.Insert(iInsertOnPosition + 1, cp)</SourceLine>
   <SourceLine>m_chArr.Insert(iInsertOnPosition + 1, Chr(13))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 1 To iMaxCol</SourceLine>
   <SourceLine>iRtVal = Table_AddCell(iInsertOnPosition + 1)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bCopyAlignments Then</SourceLine>
   <SourceLine>iThisRow = m_tcArr(m_rpArrParagraph(m_cpArr(iInsertOnPosition + 1).iParagraph).TableCell).iRow</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To iMaxCol</SourceLine>
   <SourceLine>Table_AddRow_CopyAlignmentAndColors(iThisRow - 1, iThisRow, t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = iInsertOnPosition + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iInsertAfter As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_DelCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Table_DelCell(iPos As Integer, bEntireRow As Boolean)</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iRow As Integer</SourceLine>
   <SourceLine>Dim iCol As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iFirstPar As Integer</SourceLine>
   <SourceLine>Dim iLastPar As Integer</SourceLine>
   <SourceLine>Dim iDiffPar As Integer</SourceLine>
   <SourceLine>Dim iFirstCell As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine>Dim iDiffCell As Integer</SourceLine>
   <SourceLine>Dim iReplaceRow As Integer</SourceLine>
   <SourceLine>Dim iByRow As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iRow = m_tcArr(iCell).iRow</SourceLine>
   <SourceLine>iCol = m_tcArr(iCell).iCol</SourceLine>
   <SourceLine>iFirstCell = -1</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>iFirstPar = -1</SourceLine>
   <SourceLine>iLastPar = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>If bEntireRow Then</SourceLine>
   <SourceLine>For t = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iRow &gt; iRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iRow = m_tcArr(t).iRow - 1</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iRow = iRow Then</SourceLine>
   <SourceLine>If iLastCell &lt; 0 Then</SourceLine>
   <SourceLine>iLastCell = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iFirstCell = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFirstCell = iCell</SourceLine>
   <SourceLine>iLastCell = iCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iCell To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow &gt; iRow Then</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iRow = iRow And m_tcArr(t).iCol &gt; iCol Then</SourceLine>
   <SourceLine>m_tcArr(t).iCol = m_tcArr(t).iCol - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iLastCell &gt;= 0 Then</SourceLine>
   <SourceLine>iDiffCell = iLastCell - iFirstCell + 1</SourceLine>
   <SourceLine>For t = iLastCell To iFirstCell Step -1</SourceLine>
   <SourceLine>m_tcArr.Remove(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If Not bEntireRow Then</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>iReplaceRow = -1</SourceLine>
   <SourceLine>iByRow = -1 </SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iReplaceRow Then</SourceLine>
   <SourceLine>If m_tcArr(t).iRow &lt;&gt; iByRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iRow = iByRow</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_tcArr(t).iRow &gt; iReplaceRow Then</SourceLine>
   <SourceLine>iByRow = iByRow + 1</SourceLine>
   <SourceLine>iReplaceRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>If m_tcArr(t).iRow &lt;&gt; iByRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iRow = iByRow</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt; iLastCell Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = m_rpArrParagraph(t).TableCell - iDiffCell</SourceLine>
   <SourceLine>ElseIf m_rpArrParagraph(t).TableCell &gt;= iFirstCell Then</SourceLine>
   <SourceLine>If iLastPar = -1 Then</SourceLine>
   <SourceLine>iLastPar = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iFirstPar = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iLastPar &gt;= 0 Then</SourceLine>
   <SourceLine>iDiffPar = (iLastPar - iFirstPar + 1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iLastPar To iFirstPar Step -1</SourceLine>
   <SourceLine>m_rpArrParagraph.Remove(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph &gt; iLastPar Then</SourceLine>
   <SourceLine>m_cpArr(t).iParagraph = m_cpArr(t).iParagraph - iDiffPar</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iParagraph &gt;= iFirstPar Then</SourceLine>
   <SourceLine>m_cpArr.Remove(t)</SourceLine>
   <SourceLine>m_chArr.Remove(t)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bEntireRow As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawRTF_GetArray</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DrawRTF_GetArray(iWidth As Integer, iHeightFirstPage As Integer, iHeightOtherPages As Integer, bTransparent As Boolean, gPrinter As Graphics, iPageNr As Integer) As Picture()</SourceLine>
   <SourceLine>Dim picArr() As Picture</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim tPage As Integer</SourceLine>
   <SourceLine>Dim iFrom As Integer</SourceLine>
   <SourceLine>Dim iTo As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iFirstCharacter As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iScrollValue As Integer</SourceLine>
   <SourceLine>Dim iHeight As Integer</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim iNewScrollValue As Integer</SourceLine>
   <SourceLine>Dim iNextScrollStart As Integer</SourceLine>
   <SourceLine>Dim iLastPageBreak As Integer</SourceLine>
   <SourceLine>Dim bResizedPictures As Boolean</SourceLine>
   <SourceLine>Dim bScaled As Boolean</SourceLine>
   <SourceLine>Dim iGrace As Integer</SourceLine>
   <SourceLine>Dim bGraced As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim dScaleForPrinting_Resolution As Double</SourceLine>
   <SourceLine>Dim dScaleForPrinting_Multiplicator As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim dOldScale As Double</SourceLine>
   <SourceLine>Dim bJumpout As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dOldScale = m_dScale</SourceLine>
   <SourceLine>#if TargetWindows</SourceLine>
   <SourceLine>If IsNull(gPrinter) Then</SourceLine>
   <SourceLine>dScaleForPrinting_Multiplicator = GetScaleFactorPrinting_Intern(False)</SourceLine>
   <SourceLine>dScaleForPrinting_Resolution = GetScaleFactorPrinting_Intern(True)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>dScaleForPrinting_Multiplicator = m_dScale</SourceLine>
   <SourceLine>dScaleForPrinting_Resolution = m_dScale</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>dScaleForPrinting_Multiplicator = GetScaleFactorPrinting_Intern(False)</SourceLine>
   <SourceLine>dScaleForPrinting_Resolution = GetScaleFactorPrinting_Intern(True)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>bScaled = SetScale(dScaleForPrinting_Multiplicator)</SourceLine>
   <SourceLine>iHeightFirstPage = iHeightFirstPage * dScaleForPrinting_Resolution</SourceLine>
   <SourceLine>iHeightOtherPages = iHeightOtherPages * dScaleForPrinting_Resolution</SourceLine>
   <SourceLine>iWidth = iWidth * dScaleForPrinting_Resolution</SourceLine>
   <SourceLine>iGrace = (3 * dScaleForPrinting_Resolution)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iFrom = 0</SourceLine>
   <SourceLine>iTo = iLast</SourceLine>
   <SourceLine>CheckEnMeetRTF(iWidth, iFrom, iTo, True)</SourceLine>
   <SourceLine>If m_rpicArr.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>'ExportMemoryMap("print_pre_testflight.csv")</SourceLine>
   <SourceLine>iHeight = m_cpArr(iLast).iBottom + 5</SourceLine>
   <SourceLine>pic = New Picture(iWidth, m_cpArr(iLast).iBottom + 5)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>If IsNull(gPrinter) Then</SourceLine>
   <SourceLine>g.DrawPicture(DrawRTF(iWidth, iHeight, _</SourceLine>
   <SourceLine>iFrom, iTo, iScrollValue, 0, 0, _</SourceLine>
   <SourceLine>True, bTransparent, bResizedPictures, Nil, Nil), 0, 0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.DrawPicture(DrawRTF(iWidth, iHeight, _</SourceLine>
   <SourceLine>iFrom, iTo, iScrollValue, 0, 0, _</SourceLine>
   <SourceLine>True, bTransparent, bResizedPictures, Nil, g), 0, 0)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'ExportMemoryMap("print_during_testflight.csv")</SourceLine>
   <SourceLine>If bResizedPictures Then</SourceLine>
   <SourceLine>iFrom = 0</SourceLine>
   <SourceLine>iTo = iLast</SourceLine>
   <SourceLine>For t = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_chArr(t) = " " Or m_chArr(t) = Chr(10) Or m_chArr(t) = Chr(9) Then</SourceLine>
   <SourceLine>m_cpArr(t).iHeight = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'m_cpArr(t).iBottom = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>CheckEnMeetRTF(iWidth, iFrom, iTo, True)</SourceLine>
   <SourceLine>'ExportMemoryMap("print_post_testflight.csv")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>bResizedPictures = False</SourceLine>
   <SourceLine>ReDim picArr(-1)</SourceLine>
   <SourceLine>iFrom = 0</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>iTo = iLast</SourceLine>
   <SourceLine>iScrollValue = 0</SourceLine>
   <SourceLine>iLastPageBreak = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'CheckEnMeetRTF(iWidth, iFrom, iTo, True)</SourceLine>
   <SourceLine>tPage = 0</SourceLine>
   <SourceLine>Do </SourceLine>
   <SourceLine>If tPage = 0 Then</SourceLine>
   <SourceLine>iHeight = iHeightFirstPage</SourceLine>
   <SourceLine>If iHeight = 0 Then </SourceLine>
   <SourceLine>picArr.Append(New Picture(1, 1))</SourceLine>
   <SourceLine>tPage = tPage + 1</SourceLine>
   <SourceLine>iHeight = iHeightOtherPages</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iHeight = iHeightOtherPages</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iHeight &gt; iGrace Then</SourceLine>
   <SourceLine>iHeight = iHeight - iGrace</SourceLine>
   <SourceLine>bGraced = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bGraced = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iHeight = 0 Then</SourceLine>
   <SourceLine>bJumpOut = True</SourceLine>
   <SourceLine>picArr.Append(Nil)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFrom = -1</SourceLine>
   <SourceLine>iTo = iLast</SourceLine>
   <SourceLine>iFirstCharacter = -1</SourceLine>
   <SourceLine>iNextScrollStart = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To iLast </SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>If iFirstCharacter &lt; 0 Then</SourceLine>
   <SourceLine>iFirstCharacter = t - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iFrom = -1 And _</SourceLine>
   <SourceLine>(tPage &gt; 0 Or iHeightFirstPage = iHeightOtherPages) And _</SourceLine>
   <SourceLine>m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight &gt; iScrollValue + iHeight Then</SourceLine>
   <SourceLine>'This page hasn't started yet, and this line doesn't fit on it anymore, make it heigher so it fits anyway</SourceLine>
   <SourceLine>iFrom = t</SourceLine>
   <SourceLine>iHeight = (m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight) - iScrollValue</SourceLine>
   <SourceLine>ElseIf m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight &gt; iScrollValue + iHeight Then</SourceLine>
   <SourceLine>iNewScrollValue = m_tcArr(iCell).iTop</SourceLine>
   <SourceLine>iHeight = iNewScrollValue - iScrollValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iTo = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>ElseIf iFrom = -1 And m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight &gt;= iScrollValue Then</SourceLine>
   <SourceLine>iFrom = iFirstCharacter</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iBottom &gt; iScrollValue And _</SourceLine>
   <SourceLine>m_cpArr(t).iFunctie &gt; 0 And m_cpArr(t).iFunctie &lt;&gt; iLastPageBreak And _</SourceLine>
   <SourceLine>m_strArrFieldFunctie(m_cpArr(t).iFunctie - 1) = "page" Then</SourceLine>
   <SourceLine>iNewScrollValue = m_cpArr(t).iBottom</SourceLine>
   <SourceLine>iHeight = iNewScrollValue - iScrollValue</SourceLine>
   <SourceLine>iLastPageBreak = m_cpArr(t).iFunctie</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iTo = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While t &lt;= iLast And m_cpArr(t).iFunctie = m_cpArr(iTo).iFunctie</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; iLast Then</SourceLine>
   <SourceLine>iNextScrollStart = -2</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iNextScrollStart = (m_cpArr(t).iBottom - m_cpArr(t).iHeight) + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iFirstCharacter = -1</SourceLine>
   <SourceLine>If iFrom = -1 And _</SourceLine>
   <SourceLine>(tPage &gt; 0 Or iHeightFirstPage = iHeightOtherPages) And _</SourceLine>
   <SourceLine>m_cpArr(t).iBottom &gt; iScrollValue + iHeight Then</SourceLine>
   <SourceLine>'This page hasn't started yet, and this line doesn't fit on it anymore, make it heigher so it fits anyway</SourceLine>
   <SourceLine>iFrom = t</SourceLine>
   <SourceLine>iHeight = m_cpArr(t).iBottom - iScrollValue</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iBottom &gt; iScrollValue + iHeight Then</SourceLine>
   <SourceLine>iNewScrollValue = (m_cpArr(t).iBottom - m_cpArr(t).iHeight)</SourceLine>
   <SourceLine>iHeight = iNewScrollValue - iScrollValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iTo = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>ElseIf iFrom = -1 And m_cpArr(t).iBottom &gt;= iScrollValue Then</SourceLine>
   <SourceLine>iFrom = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iFrom &gt;= 0 And iTo &gt;= 0 Then</SourceLine>
   <SourceLine>If iTo &gt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>t = m_cpArr.Ubound</SourceLine>
   <SourceLine>iNewScrollValue = m_cpArr(t).iBottom</SourceLine>
   <SourceLine>iHeight = iNewScrollValue - iScrollValue</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iWidth &gt; 0 And iHeight &gt; 0 Then</SourceLine>
   <SourceLine>If IsNull(gPrinter) Then</SourceLine>
   <SourceLine>If bGraced Then</SourceLine>
   <SourceLine>iHeight = iHeight + iGrace</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bTransparent Then</SourceLine>
   <SourceLine>pic = New Picture(iWidth, iHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>pic = New Picture(iWidth, iHeight, 32)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawPicture(DrawRTF(iWidth, iHeight, _</SourceLine>
   <SourceLine>iFrom, iTo, iScrollValue, 0, 0, _</SourceLine>
   <SourceLine>True, bTransparent, bResizedPictures, Nil, Nil), 0, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>picArr.Append(pic)</SourceLine>
   <SourceLine>ElseIf tPage + 1 = iPageNr Then</SourceLine>
   <SourceLine>pic = DrawRTF(iWidth, iHeight, _</SourceLine>
   <SourceLine>iFrom, iTo, iScrollValue, 0, 0, _</SourceLine>
   <SourceLine>True, bTransparent, bResizedPictures, Nil, gPrinter)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iNextScrollStart &gt; 0 Then</SourceLine>
   <SourceLine>iScrollValue = iNextScrollStart</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iScrollValue = iNewScrollValue + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'iScrollValue = iScrollValue + iHeight</SourceLine>
   <SourceLine>tPage = tPage + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bJumpOut Or iTo &gt;= m_cpArr.Ubound Or iNextScrollStart = -2 'Document eindigde met paginaeinde</SourceLine>
   <SourceLine>Loop Until Not bResizedPictures</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bScaled = SetScale(dOldScale)</SourceLine>
   <SourceLine>m_bNextRedrawFull = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return picArr</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iWidth As Integer, iHeightFirstPage As Integer, iHeightOtherPages As Integer, bTransparent As Boolean, gPrinter As Graphics, iPageNr As Integer</ItemParams>
  <ItemResult>Picture()</ItemResult>
 </Method>
 <Method>
  <ItemName>CheckEnMeetRTF_Tables_MeetCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CheckEnMeetRTF_Tables_MeetCell(iStartChar As Integer, iStopChar As Integer, iTableCell As Integer, iCharTo As Integer, bPrint As Boolean)</SourceLine>
   <SourceLine>Dim strTekst As String</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iEffectieveStartChar As Integer</SourceLine>
   <SourceLine>Dim iBottom As Integer</SourceLine>
   <SourceLine>Dim iDeltaY As Integer</SourceLine>
   <SourceLine>Dim iFirstCharThisLine As Integer</SourceLine>
   <SourceLine>Dim iLastCharThisLine As Integer</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine>Dim iMaxHeight As Integer</SourceLine>
   <SourceLine>Dim iLastBreakable As Integer</SourceLine>
   <SourceLine>Dim iMaxWidth As Integer</SourceLine>
   <SourceLine>Dim iLeft As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strTekst = ""</SourceLine>
   <SourceLine>If iStartChar &lt; 0 Then iStartChar = 0</SourceLine>
   <SourceLine>If iStopChar &gt; m_cpArr.Ubound Then iStopChar = m_cpArr.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iStartChar &lt;= iStopChar Then</SourceLine>
   <SourceLine>If iStartChar &lt; iStopChar And _</SourceLine>
   <SourceLine>m_cpArr(iStartChar).btAscSpecial = 13 And m_cpArr(iStartChar + 1).btAscSpecial = 10 Then</SourceLine>
   <SourceLine>iEffectieveStartChar = iStartChar + 1 '+ 2</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iEffectieveStartChar = iStartChar</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iEffectieveStartChar &lt;= iStopChar Then</SourceLine>
   <SourceLine>For t = iEffectieveStartChar To iStopChar</SourceLine>
   <SourceLine>strTekst = strTekst + m_chArr(t)</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iMaxWidth = m_tcArr(iTableCell).iWidth</SourceLine>
   <SourceLine>iBottom = 2</SourceLine>
   <SourceLine>t = iEffectieveStartChar</SourceLine>
   <SourceLine>iDeltaY = 0</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iFirstCharThisLine = t</SourceLine>
   <SourceLine>iLastCharThisLine = t</SourceLine>
   <SourceLine>iWidth = ChRTFOriginalToScale(GetIndent(t)) '0</SourceLine>
   <SourceLine>iMaxHeight = 0</SourceLine>
   <SourceLine>iLastBreakable = t</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>If m_cpArr(t).btAscSpecial = 9 Then</SourceLine>
   <SourceLine>Dim iScaledWidth As Integer </SourceLine>
   <SourceLine>Dim iOriginalWidth As Integer</SourceLine>
   <SourceLine>Dim iOriginalNextTabstop As Integer</SourceLine>
   <SourceLine>Dim iScaledNextTabstop As Integer</SourceLine>
   <SourceLine>Dim iAddScaledWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iScaledWidth = iWidth</SourceLine>
   <SourceLine>iOriginalWidth = ChRTFScaleToOriginal(iScaledWidth)</SourceLine>
   <SourceLine>iOriginalNextTabstop = GetNextTabstop(t, iOriginalWidth)</SourceLine>
   <SourceLine>iScaledNextTabstop = ChRTFOriginalToScale(iOriginalNextTabstop)</SourceLine>
   <SourceLine>iAddScaledWidth = iScaledNextTabstop - iScaledWidth</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr(t).iWidth = iAddScaledWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iWidth = iWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iWidth &lt;= iMaxWidth Then</SourceLine>
   <SourceLine>If m_cpArr(t).btAscSpecial = 32 Or _ 'Space</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 46 Or _ 'Point</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 45 Or _ 'Hyphen</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 44 Or _ 'Comma</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 9 Then 'Tab</SourceLine>
   <SourceLine>iLastBreakable = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Loop Until t &gt; iStopChar Or _</SourceLine>
   <SourceLine>(m_cpArr(t).btAscSpecial = 13 And (Not bPrint Or Not IsInvisible(t, False))) Or _</SourceLine>
   <SourceLine>iWidth &gt; iMaxWidth</SourceLine>
   <SourceLine>If t &gt; iStopChar Then</SourceLine>
   <SourceLine>t = iStopChar</SourceLine>
   <SourceLine>ElseIf iWidth &gt; iMaxWidth Then</SourceLine>
   <SourceLine>If iLastBreakable &gt; iFirstCharThisLine Then</SourceLine>
   <SourceLine>t = iLastBreakable</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLastCharThisLine = t</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine>For t = iFirstCharThisLine To iLastCharThisLine</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iWidth = iWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If m_cpArr(t).iHeight &gt; iMaxHeight Then</SourceLine>
   <SourceLine>iMaxHeight = m_cpArr(t).iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iBottom = iBottom + iMaxHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iFirstCharThisLine</SourceLine>
   <SourceLine>If GetAlignment(t) = ALIGNRIGHT Then</SourceLine>
   <SourceLine>iLeft = iMaxWidth - (iWidth + ChRTFOriginalToScale(GetIndent(t)))</SourceLine>
   <SourceLine>ElseIf GetAlignment(t) = ALIGNCENTER Then</SourceLine>
   <SourceLine>iLeft = ((iMaxWidth - iWidth) / 2)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLeft = 2 + ChRTFOriginalToScale(GetIndent(t))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iFirstCharThisLine To iLastCharThisLine</SourceLine>
   <SourceLine>If m_cpArr(t).iBottom &gt; 0 And m_cpArr(t).iBottom &lt;&gt; iBottom Then</SourceLine>
   <SourceLine>SetNextRedrawWithMask</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If t &gt; iCharTo And m_cpArr(t).iLeft = iLeft Then</SourceLine>
   <SourceLine>iDeltaY = iBottom - m_cpArr(t).iBottom</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = iBottom</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = iBottom</SourceLine>
   <SourceLine>m_cpArr(t).iLeft = iLeft</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iLeft = iLeft + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>Loop Until t &gt; iStopChar Or iDeltaY &lt;&gt; 0</SourceLine>
   <SourceLine>While t &lt;= iStopChar</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = m_cpArr(t).iBottom + iDeltaY</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_tcArr(iTableCell).iHeight = m_cpArr(iStopChar).iBottom + 6</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr(iTableCell).iHeight = m_cpArr(iStartChar).iHeight + 8</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iStartChar As Integer, iStopChar As Integer, iTableCell As Integer, iCharTo As Integer, bPrint As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CheckEnMeetRTF_Tables</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CheckEnMeetRTF_Tables(iParentCell As Integer, iMaxWidth As Integer, iCharTo As Integer, bPrint As Boolean)</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iCol As Integer</SourceLine>
   <SourceLine>Dim iRow As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iTableCell As Integer</SourceLine>
   <SourceLine>Dim iLastPar As Integer</SourceLine>
   <SourceLine>Dim bMeasureThisOne As Boolean</SourceLine>
   <SourceLine>Dim iStartCellCharPos As Integer</SourceLine>
   <SourceLine>Dim iStopCellCharPos As Integer</SourceLine>
   <SourceLine>Dim iMaxHeight As Integer</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim iTotalWidth As Integer</SourceLine>
   <SourceLine>Dim iTotalMinWidth As Integer</SourceLine>
   <SourceLine>Dim iTotalColsLeft As Integer</SourceLine>
   <SourceLine>Dim iDivide As Integer</SourceLine>
   <SourceLine>Dim iRest As Integer</SourceLine>
   <SourceLine>Dim iAddThis As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCol = -1</SourceLine>
   <SourceLine>iRow = -1</SourceLine>
   <SourceLine>iTableCell = -1</SourceLine>
   <SourceLine>bMeasureThisOne = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iParentCell = -1 Then</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>If iLast &gt;= 0 Then</SourceLine>
   <SourceLine>iRow = -1 </SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iLeft = m_tcArr(t - 1).iLeft + m_tcArr(t - 1).iWidth</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>iTotalColsLeft = 0</SourceLine>
   <SourceLine>iTotalWidth = 0</SourceLine>
   <SourceLine>iTotalMinWidth = 0</SourceLine>
   <SourceLine>For tB = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(tB).iRow = iRow Then</SourceLine>
   <SourceLine>iTotalColsLeft = iTotalColsLeft + 1</SourceLine>
   <SourceLine>iTotalMinWidth = iTotalMinWidth + m_tcArr(tB).iMinWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>iDivide = (iMaxWidth - iTotalMinWidth)</SourceLine>
   <SourceLine>If iDivide &gt; 0 Then</SourceLine>
   <SourceLine>iDivide = Floor(iDivide / iTotalColsLeft)</SourceLine>
   <SourceLine>iRest = iMaxWidth - (iTotalMinWidth + (iDivide * iTotalColsLeft))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iDivide = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_tcArr(t).iLeft = 2</SourceLine>
   <SourceLine>iTotalWidth = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_tcArr(t).iWidth = (m_tcArr(t).iMinWidth + iDivide + iRest)</SourceLine>
   <SourceLine>iRest = 0</SourceLine>
   <SourceLine>If m_tcArr(t).iMaxWidth &gt; 0 And m_tcArr(t).iMaxWidth &lt; m_tcArr(t).iWidth Then</SourceLine>
   <SourceLine>iRest = m_tcArr(t).iWidth - m_tcArr(t).iMaxWidth</SourceLine>
   <SourceLine>m_tcArr(t).iWidth = m_tcArr(t).iMaxWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iTotalColsLeft = iTotalColsLeft - 1</SourceLine>
   <SourceLine>If iTotalColsLeft &gt; 0 And iRest &gt; 0 Then</SourceLine>
   <SourceLine>iAddThis = Floor(iRest / iTotalColsLeft)</SourceLine>
   <SourceLine>iRest = (iRest - (iAddThis * iTotalColsLeft))</SourceLine>
   <SourceLine>iDivide = iDivide + iAddThis</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iTotalWidth = iTotalWidth + m_tcArr(t).iWidth</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_chArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>iPar = m_cpArr(t).iParagraph</SourceLine>
   <SourceLine>If iPar &lt;&gt; iLastPar Then</SourceLine>
   <SourceLine>iLastPar = iPar</SourceLine>
   <SourceLine>If m_rpArrParagraph(iPar).TableCell &gt; m_tcArr.Ubound Then</SourceLine>
   <SourceLine>m_rpArrParagraph(iPar).TableCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iTableCell &lt;&gt; m_rpArrParagraph(iPar).TableCell Then</SourceLine>
   <SourceLine>If bMeasureThisOne Then</SourceLine>
   <SourceLine>iStopCellCharPos = t - 1</SourceLine>
   <SourceLine>CheckEnMeetRTF_Tables_MeetCell(iStartCellCharPos, iStopCellCharPos, iTableCell, iCharTo, bPrint)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iTableCell = m_rpArrParagraph(iPar).TableCell</SourceLine>
   <SourceLine>bMeasureThisOne = (iTableCell &gt;= 0 And m_tcArr(iTableCell).iWidth &gt; 0 And _</SourceLine>
   <SourceLine>m_tcArr(iTableCell).bMetenNodig)</SourceLine>
   <SourceLine>If bMeasureThisOne Then</SourceLine>
   <SourceLine>'Nieuwe tablecell die toevallig moet gemeten worden</SourceLine>
   <SourceLine>iStartCellCharPos = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bMeasureThisOne Then</SourceLine>
   <SourceLine>iStopCellCharPos = (t - 1)</SourceLine>
   <SourceLine>CheckEnMeetRTF_Tables_MeetCell(iStartCellCharPos, iStopCellCharPos, iTableCell, iCharTo, bPrint)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iParentCell = -1 Then</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound</SourceLine>
   <SourceLine>If iLast &gt;= 0 Then</SourceLine>
   <SourceLine>iRow = -1 </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iRow Then</SourceLine>
   <SourceLine>m_tcArr(t).iHeight = iMaxHeight</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRow = m_tcArr(t).iRow</SourceLine>
   <SourceLine>iMaxHeight = 0</SourceLine>
   <SourceLine>For tB = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(tB).iRow = iRow Then</SourceLine>
   <SourceLine>If iMaxHeight &lt; m_tcArr(tB).iHeight Then</SourceLine>
   <SourceLine>iMaxHeight = m_tcArr(tB).iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>m_tcArr(t).iHeight = iMaxHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iParentCell As Integer, iMaxWidth As Integer, iCharTo As Integer, bPrint As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CheckEnMeetRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CheckEnMeetRTF(iMaxWidth As Integer, ByRef iCharFrom As Integer, ByRef iCharTo As Integer, bPrint As Boolean)</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iOriginalRedrawFromPos As Integer</SourceLine>
   <SourceLine>Dim iRedrawFromPos As Integer</SourceLine>
   <SourceLine>Dim dMSTussenStop As Double</SourceLine>
   <SourceLine>Dim iBottom As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iDeltaY As Integer</SourceLine>
   <SourceLine>Dim iRow As Integer</SourceLine>
   <SourceLine>Dim iFirstCharThisLine As Integer</SourceLine>
   <SourceLine>Dim iLastCharThisLine As Integer</SourceLine>
   <SourceLine>Dim tCell As Integer</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine>Dim iMaxHeight As Integer</SourceLine>
   <SourceLine>Dim iLastBreakable As Integer</SourceLine>
   <SourceLine>Dim iScaledWidth As Integer</SourceLine>
   <SourceLine>Dim iOriginalWidth As Integer</SourceLine>
   <SourceLine>Dim iOriginalNextTabstop As Integer</SourceLine>
   <SourceLine>Dim iScaledNextTabstop As Integer</SourceLine>
   <SourceLine>Dim iAddScaledWidth As Integer</SourceLine>
   <SourceLine>Dim iLeft As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine>Dim iCompareCellTop As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>If iCharFrom &gt; iLast Then</SourceLine>
   <SourceLine>iCharFrom = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iCharTo &gt; iLast Then</SourceLine>
   <SourceLine>iCharTo = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCharFrom = iLast And iCharTo = iLast Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLastCell = m_tcArr.Ubound</SourceLine>
   <SourceLine>For t = m_rpArrParagraph.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt; iLastCell Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).TableCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>CheckEnMeetRTF_Tables(-1, iMaxWidth - 2, iCharTo, bPrint)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iOriginalRedrawFromPos = iCharFrom</SourceLine>
   <SourceLine>If iOriginalRedrawFromPos &gt; 0 Then</SourceLine>
   <SourceLine>t = iOriginalRedrawFromPos</SourceLine>
   <SourceLine>'We mogen niet beginnen in een tablecell</SourceLine>
   <SourceLine>While t &gt; 0 And m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>'Keer terug tot op het begin van de regel zolang dit geen tablecell is</SourceLine>
   <SourceLine>While t &gt; 0 And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell &lt; 0 And _</SourceLine>
   <SourceLine>m_cpArr(t - 1).btAscSpecial &lt;&gt; 13</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>iRedrawFromPos = t</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iRedrawFromPos = iOriginalRedrawFromPos</SourceLine>
   <SourceLine>iOriginalRedrawFromPos = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Beetje meten</SourceLine>
   <SourceLine>dMSTussenStop = Microseconds</SourceLine>
   <SourceLine>If iRedrawFromPos &gt;= 0 And iLast &gt;= 0 Then</SourceLine>
   <SourceLine>If iOriginalRedrawFromPos &lt; iLast Then</SourceLine>
   <SourceLine>If iOriginalRedrawFromPos + 1 &lt; iCharTo Then</SourceLine>
   <SourceLine>iOriginalRedrawFromPos = iCharTo</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iOriginalRedrawFromPos = iOriginalRedrawFromPos + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iOriginalRedrawFromPos &gt; iLast Then</SourceLine>
   <SourceLine>iOriginalRedrawFromPos = iLast</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = iRedrawFromPos To iOriginalRedrawFromPos</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt; 0 Then</SourceLine>
   <SourceLine>m_cpArr(t).iLeft = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iRedrawFromPos &gt; 0 Then</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(iRedrawFromPos - 1).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iBottom = m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iBottom = m_cpArr(iRedrawFromPos - 1).iBottom</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iBottom = 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iRedrawFromPos</SourceLine>
   <SourceLine>iDeltaY = 0</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>'Met tabelcellen goochelen</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>iRow = m_tcArr(iCell).iRow</SourceLine>
   <SourceLine>While t &gt; 0 And m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell = iCell </SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>If t &gt; 0 And m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>If m_tcArr(m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell).iRow = iRow Then</SourceLine>
   <SourceLine>m_tcArr(iCell).iTop = m_tcArr(m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell).iTop</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr(iCell).iTop = m_tcArr(m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell).iTop + _</SourceLine>
   <SourceLine>m_tcArr(m_rpArrParagraph(m_cpArr(t - 1).iParagraph).TableCell).iHeight - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_tcArr(iCell).iTop = iBottom + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iBottom = m_tcArr(iCell).iTop + m_tcArr(iCell).iHeight + 2</SourceLine>
   <SourceLine>While t &lt; iLast And m_rpArrParagraph(m_cpArr(t + 1).iParagraph).TableCell = iCell </SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Text outside tabelcellen</SourceLine>
   <SourceLine>iFirstCharThisLine = t</SourceLine>
   <SourceLine>iLastCharThisLine = t</SourceLine>
   <SourceLine>iWidth = ChRTFOriginalToScale(GetIndent(t)) '0</SourceLine>
   <SourceLine>iMaxHeight = 0</SourceLine>
   <SourceLine>iLastBreakable = t</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>If m_cpArr(t).btAscSpecial = 9 Then</SourceLine>
   <SourceLine>iScaledWidth = iWidth</SourceLine>
   <SourceLine>iOriginalWidth = ChRTFScaleToOriginal(iScaledWidth)</SourceLine>
   <SourceLine>iOriginalNextTabstop = GetNextTabstop(t, iOriginalWidth)</SourceLine>
   <SourceLine>iScaledNextTabstop = ChRTFOriginalToScale(iOriginalNextTabstop)</SourceLine>
   <SourceLine>iAddScaledWidth = iScaledNextTabstop - iScaledWidth</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr(t).iWidth = iAddScaledWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iWidth = iWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iWidth &lt;= iMaxWidth Then</SourceLine>
   <SourceLine>If m_cpArr(t).btAscSpecial = 32 Or _ 'Space</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 46 Or _ 'Point</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 45 Or _ 'Hyphen</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 44 Or _ 'Comma</SourceLine>
   <SourceLine>m_cpArr(t).btAscSpecial = 9 Then 'Tab</SourceLine>
   <SourceLine>iLastBreakable = t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Loop Until t &gt; iLast Or m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 Or _</SourceLine>
   <SourceLine>(m_cpArr(t).btAscSpecial = 13 And (Not bPrint Or Not IsInvisible(t, False))) Or iWidth &gt; iMaxWidth</SourceLine>
   <SourceLine>If t &gt; iLast Then</SourceLine>
   <SourceLine>t = iLast</SourceLine>
   <SourceLine>ElseIf iWidth &gt; iMaxWidth Then</SourceLine>
   <SourceLine>If iLastBreakable &gt; iFirstCharThisLine Then</SourceLine>
   <SourceLine>t = iLastBreakable</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iLastCharThisLine = t</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine>For t = iFirstCharThisLine To iLastCharThisLine</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iWidth = iWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If m_cpArr(t).iHeight &gt; iMaxHeight Then</SourceLine>
   <SourceLine>iMaxHeight = m_cpArr(t).iHeight</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>iBottom = iBottom + iMaxHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = iFirstCharThisLine</SourceLine>
   <SourceLine>If GetAlignment(t) = ALIGNRIGHT Then</SourceLine>
   <SourceLine>iLeft = iMaxWidth - (iWidth + ChRTFOriginalToScale(GetIndent(t)))</SourceLine>
   <SourceLine>ElseIf GetAlignment(t) = ALIGNCENTER Then</SourceLine>
   <SourceLine>iLeft = ((iMaxWidth - iWidth) / 2)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iLeft = 2 + ChRTFOriginalToScale(GetIndent(t))</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iFirstCharThisLine To iLastCharThisLine</SourceLine>
   <SourceLine>If t &gt; iOriginalRedrawFromPos And m_cpArr(t).iBottom = iBottom And m_cpArr(t).iLeft = iLeft Then</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If m_cpArr(t).iBottom &gt; 0 And m_cpArr(t).iBottom &lt;&gt; iBottom Then</SourceLine>
   <SourceLine>SetNextRedrawWithMask</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If t &gt; iCharTo And m_cpArr(t).iLeft = iLeft Then</SourceLine>
   <SourceLine>iDeltaY = iBottom - m_cpArr(t).iBottom</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = iBottom</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = iBottom</SourceLine>
   <SourceLine>m_cpArr(t).iLeft = iLeft</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not bPrint Or Not IsInvisible(t, False) Then</SourceLine>
   <SourceLine>iLeft = iLeft + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until t &gt; iLast Or iDeltaY &lt;&gt; 0</SourceLine>
   <SourceLine>If t &lt;= iLast And iDeltaY &lt;&gt; 0 Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>iCompareCellTop = m_tcArr(m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell).iTop</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCompareCellTop = m_cpArr(t).iBottom</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tCell = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(tCell).iTop &gt;= iCompareCellTop Then</SourceLine>
   <SourceLine>m_tcArr(tCell).iTop = m_tcArr(tCell).iTop + iDeltaY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>While t &lt;= iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt; 0 Then</SourceLine>
   <SourceLine>m_cpArr(t).iBottom = m_cpArr(t).iBottom + iDeltaY</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>t = t + 1</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>System.DebugLog "GetImage.Meten uitgevoerd in " + Format(Round(((Microseconds - dMSTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iMaxWidth As Integer, ByRef iCharFrom As Integer, ByRef iCharTo As Integer, bPrint As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawRTF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function DrawRTF(iWidth As Integer, iHeight As Integer, iFrom As Integer, iTo As Integer, iScrollValue As Integer, iSelFrom As Integer, iSelTo As Integer, bPrint As Boolean, bTransparent As Boolean, ByRef bResizedPictures As Boolean, wnd As Window, gPrint As Graphics) As Picture</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim tLine As Integer</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim strFont As String</SourceLine>
   <SourceLine>Dim strOldFont As String</SourceLine>
   <SourceLine>Dim dOldSize As Double</SourceLine>
   <SourceLine>Dim iOldStyle As Integer</SourceLine>
   <SourceLine>Dim clOldColor As Color</SourceLine>
   <SourceLine>Dim clColor As Color</SourceLine>
   <SourceLine>Dim iUnderline As Integer</SourceLine>
   <SourceLine>Dim iMod As Integer</SourceLine>
   <SourceLine>Dim iX As Integer</SourceLine>
   <SourceLine>Dim iY As Integer</SourceLine>
   <SourceLine>Dim iRX As Integer</SourceLine>
   <SourceLine>Dim iRY As Integer</SourceLine>
   <SourceLine>Dim iRWidth As Integer</SourceLine>
   <SourceLine>Dim iRHeight As Integer</SourceLine>
   <SourceLine>Dim bShadow As Boolean</SourceLine>
   <SourceLine>Dim bInvisible As Boolean</SourceLine>
   <SourceLine>Dim bStrikeThrough As Boolean</SourceLine>
   <SourceLine>Dim picMask As Picture</SourceLine>
   <SourceLine>Dim gMask As Graphics</SourceLine>
   <SourceLine>Dim iMX As Integer</SourceLine>
   <SourceLine>Dim iMY As Integer</SourceLine>
   <SourceLine>Dim iMWidth As Integer</SourceLine>
   <SourceLine>Dim iMHeight As Integer</SourceLine>
   <SourceLine>Dim dMsTussenStop As Double</SourceLine>
   <SourceLine>Dim bRedrawWithMask As Boolean</SourceLine>
   <SourceLine>Dim iArrCells() As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iCellTop As Integer</SourceLine>
   <SourceLine>Dim iCellHeight As Integer</SourceLine>
   <SourceLine>Dim clBackColor As Color</SourceLine>
   <SourceLine>Dim iMaxWidth As Integer</SourceLine>
   <SourceLine>Dim bResized As Boolean</SourceLine>
   <SourceLine>Dim iScale As Integer</SourceLine>
   <SourceLine>Dim bSpatie As Boolean</SourceLine>
   <SourceLine>Dim bTab As Boolean</SourceLine>
   <SourceLine>Dim iShadowOffset As Integer</SourceLine>
   <SourceLine>Dim bArrWrong() As Boolean</SourceLine>
   <SourceLine>Dim iAsc As Integer</SourceLine>
   <SourceLine>Dim tB As Integer</SourceLine>
   <SourceLine>Dim strWord As String</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim dMsDrawingTime As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMsTussenStop = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>iScale = wnd.ScaleFactor</SourceLine>
   <SourceLine>If iScale &lt; 1 Then </SourceLine>
   <SourceLine>iScale = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iScale = 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>bRedrawWithMask = (Not bPrint And NextRedrawWithMask)</SourceLine>
   <SourceLine>For t = 0 To iFrom - 1</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>For t = m_cpArr.Ubound To iTo + 1 Step -1</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If Not IsNull(gPrint) Then</SourceLine>
   <SourceLine>picMask = Nil</SourceLine>
   <SourceLine>gMask = Nil</SourceLine>
   <SourceLine>m_picRTFBuffer = Nil</SourceLine>
   <SourceLine>For t = iFrom To iTo </SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>ElseIf IsNull(m_picRTFBuffer) Or m_picRTFBuffer.Width &lt;&gt; iWidth Or m_picRTFBuffer.Height &lt;&gt; iHeight Or _</SourceLine>
   <SourceLine>(TargetWin32 And bRedrawWithMask) Or bPrint Or m_tcArr.Ubound &gt;= 0 Or m_rpicArr.UBound &gt;= 0 Then </SourceLine>
   <SourceLine>#if TargetConsole</SourceLine>
   <SourceLine>If iWidth &lt; 1 Or iHeight &lt; 1 Then</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(1, 1)</SourceLine>
   <SourceLine>ElseIf TargetWindows And (bPrint Or m_dLargestDrawingTime &lt; DRAWINGTIMETHRESHOLD) Then</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(iWidth, iHeight, 32)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(iWidth, iHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>If iWidth &lt; 1 Or iHeight &lt; 1 Then</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(1, 1)</SourceLine>
   <SourceLine>ElseIf App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>m_picRTFBuffer = wnd.BitmapForCaching(iWidth, iHeight)</SourceLine>
   <SourceLine>ElseIf TargetWindows And (bPrint Or m_dLargestDrawingTime &lt; DRAWINGTIMETHRESHOLD) Then</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(iWidth, iHeight, 32)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_picRTFBuffer = New Picture(iWidth, iHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>For t = iFrom To iTo </SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>picMask = Nil</SourceLine>
   <SourceLine>ElseIf bRedrawWithMask Then</SourceLine>
   <SourceLine>#if TargetConsole</SourceLine>
   <SourceLine>picMask = New Picture(m_picRTFBuffer.Width, m_picRTFBuffer.Height, 32)</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>If App.SupportsHiDPI And Not IsNull(wnd) Then</SourceLine>
   <SourceLine>picMask = wnd.BitmapForCaching(m_picRTFBuffer.Width, m_picRTFBuffer.Height)</SourceLine>
   <SourceLine>ElseIf TargetWindows And (bPrint Or m_dLargestDrawingTime &lt; DRAWINGTIMETHRESHOLD) Then</SourceLine>
   <SourceLine>picMask = New Picture(m_picRTFBuffer.Width, m_picRTFBuffer.Height, 32)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>picMask = New Picture(m_picRTFBuffer.Width, m_picRTFBuffer.Height)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>gMask = picMask.Graphics</SourceLine>
   <SourceLine>gMask.ForeColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>gMask.FillRect(0, 0, picMask.Width, picMask.Height)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRTF_Internal_GetImage uitgevoerd in " + Format(Round(((Microseconds - dMsTussenStop) / 1000.0)), "0") + " ms " + _</SourceLine>
   <SourceLine>"(Print = " + CStr(bPrint) + ", Mask = " + CStr(bRedrawWithMask) + ", " + _</SourceLine>
   <SourceLine>"Transparent = " + CStr(bTransparent) + ", " + _</SourceLine>
   <SourceLine>"From = " + Format(iFrom, "0") + ", To = " + Format(iTo, "0") + ")"</SourceLine>
   <SourceLine>dMsTussenStop = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(gPrint) Then</SourceLine>
   <SourceLine>g = gPrint</SourceLine>
   <SourceLine>ElseIf bPrint Then</SourceLine>
   <SourceLine>If bTransparent Or Not TargetWindows Then</SourceLine>
   <SourceLine>pic = New Picture(iWidth, iHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>pic = New Picture(iWidth, iHeight, 32)</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>pic = m_picRTFBuffer</SourceLine>
   <SourceLine>g = pic.Graphics</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strOldFont = g.TextFont</SourceLine>
   <SourceLine>dOldSize = 0</SourceLine>
   <SourceLine>iOldStyle = -1</SourceLine>
   <SourceLine>clOldColor = g.ForeColor</SourceLine>
   <SourceLine>For t = iFrom To iTo</SourceLine>
   <SourceLine>If (t &gt;= iSelFrom And t &lt; iSelTo And m_cpArr(t).iWidth &gt; 0) &lt;&gt; m_cpArr(t).bScreenSelected Then</SourceLine>
   <SourceLine>m_cpArr(t).bScreenSelected = Not m_cpArr(t).bScreenSelected</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iY =m_cpArr(t).iBottom - (2 + iScrollValue)</SourceLine>
   <SourceLine>If m_cpArr(t).iScreenX &lt;&gt; m_cpArr(t).iLeft - 1 Or m_cpArr(t).iScreenY &lt;&gt; iY Then</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = 0</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRX = 0</SourceLine>
   <SourceLine>iRY = 0</SourceLine>
   <SourceLine>iRWidth = 0</SourceLine>
   <SourceLine>iRHeight = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iMX = 0</SourceLine>
   <SourceLine>iMY = 0</SourceLine>
   <SourceLine>iMWidth = 0</SourceLine>
   <SourceLine>iMHeight = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bPrint Then</SourceLine>
   <SourceLine>ReDim bArrWrong(iTo - iFrom)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strWord = ""</SourceLine>
   <SourceLine>For t = iFrom To iTo</SourceLine>
   <SourceLine>iAsc = Asc(m_chArr(t))</SourceLine>
   <SourceLine>If (iAsc &gt;= 65 And iAsc &lt;= 90) Or (iAsc &gt;= 97 And iAsc &lt;= 122) Or iAsc &gt;= 128 Then</SourceLine>
   <SourceLine>strWord = strWord + m_chArr(t)</SourceLine>
   <SourceLine>ElseIf strWord.Len &gt; 0 Then</SourceLine>
   <SourceLine>iPos = m_strArrSCWords.IndexOf(strWord)</SourceLine>
   <SourceLine>If iPos &gt;= 0 And Not m_bArrSCWordsIgnore(iPos) Then</SourceLine>
   <SourceLine>For tB = strWord.Len To 1 Step -1</SourceLine>
   <SourceLine>bArrWrong((t - iFrom) - tB) = True</SourceLine>
   <SourceLine>Next tB</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strWord = ""</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iFrom To iTo</SourceLine>
   <SourceLine>If Not IsNull(picMask) Then</SourceLine>
   <SourceLine>If iMY = GetTableCellTop(t) + (m_cpArr(t).iBottom - iScrollValue) - (m_cpArr(t).iHeight) And _</SourceLine>
   <SourceLine>iMHeight = m_cpArr(t).iHeight + 2 Then</SourceLine>
   <SourceLine>iMWidth = iMWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If iMWidth &gt; 0 And iMWidth &gt; 0 Then</SourceLine>
   <SourceLine>gMask.ClearRect(iMX, iMY, iMWidth, iMHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iMX = GetTableCellLeft(t) + m_cpArr(t).iLeft - 1</SourceLine>
   <SourceLine>iMY = GetTableCellTop(t) + (m_cpArr(t).iBottom - iScrollValue) - (m_cpArr(t).iHeight)</SourceLine>
   <SourceLine>iMWidth = m_cpArr(t).iWidth</SourceLine>
   <SourceLine>iMHeight = m_cpArr(t).iHeight + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_cpArr(t).iScreenX = 0 And m_cpArr(t).iScreenY = 0 Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iArrCells.IndexOf(iCell) &lt; 0 Then</SourceLine>
   <SourceLine>iArrCells.Append(iCell)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCellTop = m_tcArr(iCell).iTop - (2 + iScrollValue)</SourceLine>
   <SourceLine>iCellHeight = m_tcArr(iCell).iHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_tcArr(iCell).iColorNr &gt;= 0 Then</SourceLine>
   <SourceLine>clBackColor = m_clColors(m_tcArr(iCell).iColorNr)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If clBackColor &lt;&gt; clOldColor Then</SourceLine>
   <SourceLine>g.ForeColor = clBackColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bPrint Or Not bTransparent Or clBackColor &lt;&gt; &amp;cFFFFFF Then</SourceLine>
   <SourceLine>g.FillRect(m_tcArr(iCell).iLeft - 1, iCellTop, _</SourceLine>
   <SourceLine>m_tcArr(iCell).iWidth + 1, iCellHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If clBackColor &lt;&gt; clOldColor Then</SourceLine>
   <SourceLine>g.ForeColor = clOldColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clBackColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clBackColor = &amp;cFFFFFF</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>clColor = clBackColor</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iFunctie &gt; 0 Or IsInvisible(t, False) Then</SourceLine>
   <SourceLine>If m_cpArr(t).bScreenSelected Then</SourceLine>
   <SourceLine>clColor = &amp;c4444DD</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>clColor = &amp;cDDDDDD</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clColor = &amp;cCCCCFF</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).bScreenSelected Then</SourceLine>
   <SourceLine>clColor = &amp;c6666FF</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clColor = clBackColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iRY = GetTableCellTop(t) + (m_cpArr(t).iBottom - iScrollValue) - (m_cpArr(t).iHeight) And _</SourceLine>
   <SourceLine>iRHeight = m_cpArr(t).iHeight + 2 And _</SourceLine>
   <SourceLine>iRX + iRWidth = GetTableCellLeft(t) + m_cpArr(t).iLeft - 1 And _</SourceLine>
   <SourceLine>clColor = clOldColor Then</SourceLine>
   <SourceLine>iRWidth = iRWidth + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Not bPrint Or Not bTransparent Or clOldColor &lt;&gt; &amp;cFFFFFF Then</SourceLine>
   <SourceLine>g.FillRect(iRX, iRY, iRWidth, iRHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If clColor &lt;&gt; clOldColor Then</SourceLine>
   <SourceLine>g.ForeColor = clColor</SourceLine>
   <SourceLine>clOldColor = clColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iRX = GetTableCellLeft(t) + m_cpArr(t).iLeft - 1</SourceLine>
   <SourceLine>iRY = GetTableCellTop(t) + (m_cpArr(t).iBottom - iScrollValue) - (m_cpArr(t).iHeight)</SourceLine>
   <SourceLine>iRWidth = m_cpArr(t).iWidth</SourceLine>
   <SourceLine>iRHeight = m_cpArr(t).iHeight + 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(picMask) And iMX &gt; 0 And iMWidth &gt; 0 And iMHeight &gt; 0 Then</SourceLine>
   <SourceLine>gMask.ClearRect(iMX, iMY, iMWidth, iMHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iRX &gt; 0 And iRWidth &gt; 0 And iRHeight &gt; 0 Then</SourceLine>
   <SourceLine>If Not bPrint Or Not bTransparent Or clColor &lt;&gt; &amp;cFFFFFF Then</SourceLine>
   <SourceLine>g.FillRect(iRX, iRY, iRWidth, iRHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRTF_Internal_DrawBackgrounds uitgevoerd in " + Format(Round(((Microseconds - dMsTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMsTussenStop = Microseconds</SourceLine>
   <SourceLine>dMsDrawingTime = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = iFrom To iTo</SourceLine>
   <SourceLine>If m_cpArr(t).iScreenX = 0 And m_cpArr(t).iScreenY = 0 Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>iY = m_cpArr(t).iBottom + m_tcArr(iCell).iTop</SourceLine>
   <SourceLine>iX = m_cpArr(t).iLeft - 1 + m_tcArr(iCell).iLeft</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCell = -1 </SourceLine>
   <SourceLine>iY = m_cpArr(t).iBottom</SourceLine>
   <SourceLine>iX = m_cpArr(t).iLeft - 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iY = iY - (2 + iScrollValue)</SourceLine>
   <SourceLine>m_cpArr(t).iScreenX = iX</SourceLine>
   <SourceLine>m_cpArr(t).iScreenY = iY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bSpatie = (m_cpArr(t).btAscSpecial = 32)</SourceLine>
   <SourceLine>bTab = (m_cpArr(t).btAscSpecial = 9)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_cpArr(t).iPicture &gt; 0 Then </SourceLine>
   <SourceLine>'Draw picture</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(m_cpArr(t).iParagraph).Alignment = ALIGNRIGHT Then</SourceLine>
   <SourceLine>iMaxWidth = iX - (m_tcArr(iCell).iLeft + 2)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iMaxWidth = m_tcArr(iCell).iWidth + m_tcArr(iCell).iLeft - (iX + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iMaxWidth = iWidth - (iX + 2) </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iMaxWidth &lt;= 0 Then</SourceLine>
   <SourceLine>bResized = (m_cpArr(t).iWidth &gt; 0)</SourceLine>
   <SourceLine>If m_rpicArr(m_cpArr(t).iPicture - 1).m_bCheckPosition Then</SourceLine>
   <SourceLine>'Kill it with fire</SourceLine>
   <SourceLine>m_cpArr.Remove(t)</SourceLine>
   <SourceLine>m_chArr.Remove(t)</SourceLine>
   <SourceLine>t = t - 1</SourceLine>
   <SourceLine>iTo = iTo - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(App.CurrentThread) Then</SourceLine>
   <SourceLine>MsgBox "There's no space to fit this picture in"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_cpArr(t).iHeight = 0</SourceLine>
   <SourceLine>m_cpArr(t).iWidth = 0</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'Op windows factor van scaling terugdraaien voor images igv printen</SourceLine>
   <SourceLine>#if TargetWin32</SourceLine>
   <SourceLine>If IsNull(gPrint) Then</SourceLine>
   <SourceLine>bResized = m_rpicArr(m_cpArr(t).iPicture - 1).ResizePicture(iMaxWidth, bPrint)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bResized = m_rpicArr(m_cpArr(t).iPicture - 1).ResizePicture(iMaxWidth / 4, bPrint)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>bResized = m_rpicArr(m_cpArr(t).iPicture - 1).ResizePicture(iMaxWidth, bPrint)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>If IsNull(gPrint) Then</SourceLine>
   <SourceLine>g.DrawPicture(m_rpicArr(m_cpArr(t).iPicture - 1).m_picResized, iX, iY - m_cpArr(t).iHeight + 2)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.DrawPicture(m_rpicArr(m_cpArr(t).iPicture - 1).m_pic, _</SourceLine>
   <SourceLine>iX, iY - m_cpArr(t).iHeight + 2, _</SourceLine>
   <SourceLine>m_rpicArr(m_cpArr(t).iPicture - 1).m_picResized.Width, m_rpicArr(m_cpArr(t).iPicture - 1).m_picResized.Height, _</SourceLine>
   <SourceLine>0, 0, _</SourceLine>
   <SourceLine>m_rpicArr(m_cpArr(t).iPicture - 1).m_pic.Width, m_rpicArr(m_cpArr(t).iPicture - 1).m_pic.Height)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bResized Then</SourceLine>
   <SourceLine>bResizedPictures = True</SourceLine>
   <SourceLine>m_cpArr(t).iHeight = m_rpicArr(m_cpArr(t).iPicture - 1).m_picResized.Height</SourceLine>
   <SourceLine>m_cpArr(t).iWidth = m_rpicArr(m_cpArr(t).iPicture - 1).m_picResized.Width</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ElseIf bPrint And IsInvisible(t, False) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf (bSpatie Or bTab) And _</SourceLine>
   <SourceLine>(t &lt; 1 Or t &gt;= m_chArr.Ubound Or _</SourceLine>
   <SourceLine>(m_cpArr(t - 1).btAscSpecial &gt; 0 And m_cpArr(t - 1).btAscSpecial &lt;= 32) Or _</SourceLine>
   <SourceLine>(m_cpArr(t + 1).btAscSpecial &gt; 0 And m_cpArr(t + 1).btAscSpecial &lt;= 32)) Then</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>ElseIf m_cpArr(t).btAscSpecial &lt;&gt; 13 And m_cpArr(t).btAscSpecial &lt;&gt; 10 Then</SourceLine>
   <SourceLine>strFont = GetFont(t, False)</SourceLine>
   <SourceLine>If strFont &lt;&gt; strOldFont Then</SourceLine>
   <SourceLine>g.TextFont = GetRTFFont(strFont)</SourceLine>
   <SourceLine>strOldFont = strFont</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_cpArr(t).dFontSize &lt;&gt; dOldSize Then</SourceLine>
   <SourceLine>dOldSize = ChRTFOriginalToScale(m_cpArr(t).dFontSize)</SourceLine>
   <SourceLine>g.TextSize = dOldSize</SourceLine>
   <SourceLine>iShadowOffset = Floor(dOldSize / 10)</SourceLine>
   <SourceLine>If iShadowOffset &lt; 2 Then</SourceLine>
   <SourceLine>iShadowOffset = 2</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iOldStyle &lt;&gt; m_cpArr(t).btStyle Then</SourceLine>
   <SourceLine>iOldStyle = m_cpArr(t).btStyle</SourceLine>
   <SourceLine>g.Bold = IsBold(t, False)</SourceLine>
   <SourceLine>g.Italic = IsItalic(t, False)</SourceLine>
   <SourceLine>iUnderline = GetUnderlineStyle(t, False)</SourceLine>
   <SourceLine>bShadow = IsShadow(t, False)</SourceLine>
   <SourceLine>bStrikeThrough = IsStrikeThrough(t, False)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bShadow And Not bSpatie And Not bTab Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c999999</SourceLine>
   <SourceLine>g.DrawString(m_chArr(t) + " ", iX + Floor(iShadowOffset / 2), iY + iShadowOffset)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>clColor = GetColor(t, False)</SourceLine>
   <SourceLine>g.ForeColor = clColor</SourceLine>
   <SourceLine>clOldColor = clColor</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clColor = GetColor(t, False)</SourceLine>
   <SourceLine>If clColor &lt;&gt; clOldColor Then</SourceLine>
   <SourceLine>g.ForeColor = clColor</SourceLine>
   <SourceLine>clOldColor = clColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bTab Then</SourceLine>
   <SourceLine>g.DrawString(m_chArr(t) + " ", iX, iY)' + m_iTopText)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bStrikeThrough Then</SourceLine>
   <SourceLine>If (Not bSpatie And Not bTab) Or _</SourceLine>
   <SourceLine>(IsStrikeThrough(t - 1, False) And IsStrikeThrough(t + 1, False))Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY - Floor(m_cpArr(t).iHeight / 4), _</SourceLine>
   <SourceLine>iX + 1 + m_cpArr(t).iWidth, iY - Floor(m_cpArr(t).iHeight / 4))</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 1 - Floor(m_cpArr(t).iHeight / 4), _</SourceLine>
   <SourceLine>iX + 1 + m_cpArr(t).iWidth, iY + 1 - Floor(m_cpArr(t).iHeight / 4))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iUnderLine &gt; 0 Then</SourceLine>
   <SourceLine>If (Not bSpatie And Not bTab) Or _</SourceLine>
   <SourceLine>(IsUnderline(t - 1, False) And IsUnderline(t + 1, False) And iUnderline &lt;&gt; clsRTFBox_Data.STYLE_UNDERLINE_WORD)Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iUnderline = clsRTFBox_Data.STYLE_UNDERLINE_DOT Then</SourceLine>
   <SourceLine>For tLine = iX To iX + 1 + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>If tLine Mod 4 &lt; 2 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 2, tLine, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If tLine Mod 2 = 0 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tLine</SourceLine>
   <SourceLine>ElseIf iUnderline = clsRTFBox_Data.STYLE_UNDERLINE_DASH Then</SourceLine>
   <SourceLine>For tLine = iX To iX + 1 + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>If tLine Mod 12 &lt; 6 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 2, tLine, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If tLine Mod 6 &lt; 3 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tLine</SourceLine>
   <SourceLine>ElseIf iUnderline = clsRTFBox_Data.STYLE_UNDERLINE_DOUBLE Then</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY, iX + 1 + m_cpArr(t).iWidth, iY)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 1, iX + 1 + m_cpArr(t).iWidth, iY + 1)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 4, iX + 1 + m_cpArr(t).iWidth, iY + 4)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 5, iX + 1 + m_cpArr(t).iWidth, iY + 5)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.DrawLine(iX, iY, iX + 1 + m_cpArr(t).iWidth, iY)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 2, iX + 1 + m_cpArr(t).iWidth, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iUnderline = clsRTFBox_Data.STYLE_UNDERLINE_THICK Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 1, iX + 1 + m_cpArr(t).iWidth, iY + 1)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 2, iX + 1 + m_cpArr(t).iWidth, iY + 2)</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 3, iX + 1 + m_cpArr(t).iWidth, iY + 3)</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 4, iX + 1 + m_cpArr(t).iWidth, iY + 4)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>ElseIf iUnderline = clsRTFBox_Data.STYLE_UNDERLINE_WAVE Then</SourceLine>
   <SourceLine>For tLine = iX To iX + 1 + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>iMod = (tLine Mod 12)</SourceLine>
   <SourceLine>If iMod = 0 Or iMod = 6 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 2, tLine, iY + 3)</SourceLine>
   <SourceLine>ElseIf iMod = 1 Or iMod = 5 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 2)</SourceLine>
   <SourceLine>ElseIf iMod &gt;= 2 And iMod &lt;= 4 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 0, tLine, iY + 1)</SourceLine>
   <SourceLine>ElseIf iMod = 7 Or iMod = 11 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 3, tLine, iY + 4)</SourceLine>
   <SourceLine>ElseIf iMod &gt;= 8 And iMod &lt;= 10 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 4, tLine, iY + 5)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iMod = (tLine Mod 6)</SourceLine>
   <SourceLine>If iMod = 0 Or iMod = 3 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>ElseIf iMod &lt; 3 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY, tLine, iY)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 2, tLine, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tLine</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 1, iX + 1 + m_cpArr(t).iWidth, iY + 1)</SourceLine>
   <SourceLine>If bPrint Then</SourceLine>
   <SourceLine>g.DrawLine(iX, iY + 2, iX + 2 + m_cpArr(t).iWidth, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bPrint And bArrWrong(t - iFrom) Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cFF0000</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For tLine = iX To iX + 1 + m_cpArr(t).iWidth</SourceLine>
   <SourceLine>If tLine Mod 6 &lt; 3 Then</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 1, tLine, iY + 1)</SourceLine>
   <SourceLine>g.DrawLine(tLine, iY + 2, tLine, iY + 2)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next tLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.ForeColor = clColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMsDrawingTime = Round(((Microseconds - dMsDrawingTime) / 1000.0))</SourceLine>
   <SourceLine>If dMSDrawingTime &gt; m_dLargestDrawingTime Then</SourceLine>
   <SourceLine>m_dLargestDrawingTime = dMsDrawingTime</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRTF_Internal_EffectiveDraw uitgevoerd in " + Format(Round(((Microseconds - dMsTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMsTussenStop = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iArrCells.Ubound &gt;= 0 Then</SourceLine>
   <SourceLine>If Not bPrint Then</SourceLine>
   <SourceLine>If IsNull(picMask) Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>gMask.ForeColor = &amp;cCCCCCC</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = iArrCells.Ubound To 0 Step -1</SourceLine>
   <SourceLine>iCell = iArrCells(t)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCellTop = m_tcArr(iCell).iTop - (2 + iScrollValue)</SourceLine>
   <SourceLine>iCellHeight = m_tcArr(iCell).iHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsNull(picMask) Then</SourceLine>
   <SourceLine>g.DrawRect(m_tcArr(iCell).iLeft - 1, iCellTop, _</SourceLine>
   <SourceLine>m_tcArr(iCell).iWidth + 1, iCellHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>gMask.DrawRect(m_tcArr(iCell).iLeft - 1, iCellTop, _</SourceLine>
   <SourceLine>m_tcArr(iCell).iWidth + 1, iCellHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If IsNull(picMask) Then</SourceLine>
   <SourceLine>g.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>gMask.ForeColor = &amp;c000000</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>For t = iArrCells.Ubound To 0 Step -1</SourceLine>
   <SourceLine>iCell = iArrCells(t)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCellTop = m_tcArr(iCell).iTop - (2 + iScrollValue)</SourceLine>
   <SourceLine>iCellHeight = m_tcArr(iCell).iHeight</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_tcArr(iCell).bBorder Then</SourceLine>
   <SourceLine>If IsNull(picMask) Then</SourceLine>
   <SourceLine>g.DrawRect(m_tcArr(iCell).iLeft - 1, iCellTop, _</SourceLine>
   <SourceLine>m_tcArr(iCell).iWidth + 1, iCellHeight)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>gMask.DrawRect(m_tcArr(iCell).iLeft - 1, iCellTop, _</SourceLine>
   <SourceLine>m_tcArr(iCell).iWidth + 1, iCellHeight)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRTF_Internal_TableCells uitgevoerd in " + Format(Round(((Microseconds - dMsTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>dMsTussenStop = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(picMask) Then</SourceLine>
   <SourceLine>g.DrawPicture(picMask, 0, 0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "GetImage.DrawRTF_Internal_ApplyMask uitgevoerd in " + Format(Round(((Microseconds - dMsTussenStop) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return pic</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iWidth As Integer, iHeight As Integer, iFrom As Integer, iTo As Integer, iScrollValue As Integer, iSelFrom As Integer, iSelTo As Integer, bPrint As Boolean, bTransparent As Boolean, ByRef bResizedPictures As Boolean, wnd As Window, gPrint As Graphics</ItemParams>
  <ItemResult>Picture</ItemResult>
 </Method>
 <Method>
  <ItemName>ClearRTFBuffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearRTFBuffer()</SourceLine>
   <SourceLine>m_picRTFBuffer = Nil</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Table_AddRow_CopyAlignmentAndColors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Table_AddRow_CopyAlignmentAndColors(iFromRow As Integer, iToRow As Integer, iCol As Integer)</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iAlign As Integer</SourceLine>
   <SourceLine>Dim iColor As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iAlign = -1</SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_tcArr(m_rpArrParagraph(t).TableCell).iRow = iFromRow And _</SourceLine>
   <SourceLine>m_tcArr(m_rpArrParagraph(t).TableCell).iCol = iCol Then</SourceLine>
   <SourceLine>iAlign = m_rpArrParagraph(t).Alignment</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iAlign &gt;= 0 Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell &gt;= 0 And _</SourceLine>
   <SourceLine>m_tcArr(m_rpArrParagraph(t).TableCell).iRow = iToRow And _</SourceLine>
   <SourceLine>m_tcArr(m_rpArrParagraph(t).TableCell).iCol = iCol Then</SourceLine>
   <SourceLine>m_rpArrParagraph(t).Alignment = iAlign</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iColor = -1</SourceLine>
   <SourceLine>iLast = m_tcArr.Ubound </SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iFromRow And m_tcArr(t).iCol = iCol Then</SourceLine>
   <SourceLine>iColor = m_tcArr(t).iColorNr</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iColor &gt;= 0 Then</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_tcArr(t).iRow = iToRow And m_tcArr(t).iCol = iCol Then</SourceLine>
   <SourceLine>m_tcArr(t).iColorNr = iColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iFromRow As Integer, iToRow As Integer, iCol As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Table_GetCellColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Table_GetCellColor(iCell As Integer) As Color</SourceLine>
   <SourceLine>Dim clRtVal As Color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound And m_tcArr(iCell).iColorNr &gt;= 0 Then</SourceLine>
   <SourceLine>clRtVal = m_clColors(m_tcArr(iCell).iColorNr)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>clRtVal = &amp;cFFFFFF</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return clRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCell As Integer</ItemParams>
  <ItemResult>Color</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_SetCellColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Table_SetCellColor(iCell As Integer, clColor As Color)</SourceLine>
   <SourceLine>Dim iColor As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>If clColor = &amp;cFFFFFF Then</SourceLine>
   <SourceLine>m_tcArr(iCell).iColorNr = -1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iColor = m_clColors.IndexOf(clColor)</SourceLine>
   <SourceLine>If iColor &lt; 0 Then</SourceLine>
   <SourceLine>m_clColors.Append(clColor)</SourceLine>
   <SourceLine>iColor = m_clColors.Ubound</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_tcArr(iCell).iColorNr = iColor</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCell As Integer, clColor As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ParseRTF_LoadPictures</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ParseRTF_LoadPictures(ByRef strValue As String)</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim iPosSearchFrom As Integer</SourceLine>
   <SourceLine>Dim iPosOpen As Integer</SourceLine>
   <SourceLine>Dim iPosClose As Integer</SourceLine>
   <SourceLine>Dim iCountOpen As Integer</SourceLine>
   <SourceLine>Dim bPictureFound As Boolean</SourceLine>
   <SourceLine>Dim strPicture As String</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine>Dim iHeight As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim iPosCompare As Integer</SourceLine>
   <SourceLine>Dim strPar As String </SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim picResized As Picture</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim strPicString As String</SourceLine>
   <SourceLine>Dim mb As MemoryBlock</SourceLine>
   <SourceLine>Dim bPng As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>ReDim m_rpicArr(-1) </SourceLine>
   <SourceLine>iPosSearchFrom = 0</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>bPictureFound = False</SourceLine>
   <SourceLine>iPos = strValue.InStr(iPosSearchFrom, "{\pict\")</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iCountOpen = 1</SourceLine>
   <SourceLine>iPosSearchFrom = iPos + 1</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosOpen = strValue.InStr(iPosSearchFrom, "{")</SourceLine>
   <SourceLine>iPosClose = strValue.InStr(iPosSearchFrom, "}")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPosOpen &gt; 0 And iPosOpen &lt; iPosClose Then</SourceLine>
   <SourceLine>iCountOpen = iCountOpen + 1</SourceLine>
   <SourceLine>iPosSearchFrom = iPosOpen + 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iCountOpen = iCountOpen - 1</SourceLine>
   <SourceLine>iPosSearchFrom = iPosClose + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until iCountOpen = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPosClose &gt; 0 Then</SourceLine>
   <SourceLine>strPicture = strValue.Mid(iPos, (iPosClose - iPos + 1))</SourceLine>
   <SourceLine>iWidth = 0</SourceLine>
   <SourceLine>iHeight = 0</SourceLine>
   <SourceLine>'picwidth</SourceLine>
   <SourceLine>iPosStart = strPicture.Instr("\picw")</SourceLine>
   <SourceLine>If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>iPosStop = strPicture.Instr(iPosStart + 1, "\")</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>strPar = strPicture.Mid(iPosStart, iPosStop - iPosStart + 1)</SourceLine>
   <SourceLine>If strPar = "\picw" + NumbersOnly(strPar) + "\" Then</SourceLine>
   <SourceLine>iWidth = Val(NumbersOnly(strPar))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'picheight</SourceLine>
   <SourceLine>iPosStart = strPicture.Instr("\pich")</SourceLine>
   <SourceLine>If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>iPosStop = strPicture.Instr(iPosStart + 1, "\")</SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>strPar = strPicture.Mid(iPosStart, iPosStop - iPosStart + 1)</SourceLine>
   <SourceLine>If strPar = "\pich" + NumbersOnly(strPar) + "\" Then</SourceLine>
   <SourceLine>iHeight = Val(NumbersOnly(strPar))</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'jpegblip</SourceLine>
   <SourceLine>iPosStart = strPicture.InStr("\jpegblip ")</SourceLine>
   <SourceLine>bPng = False</SourceLine>
   <SourceLine>If iPosStart &lt;= 0 Then</SourceLine>
   <SourceLine>'pngblip</SourceLine>
   <SourceLine>iPosStart = strPicture.InStr("\pngblip ")</SourceLine>
   <SourceLine>bPng = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPosStart &gt; 0 Then</SourceLine>
   <SourceLine>iPosStop = strPicture.InStr(iPosStart + 11, " ")</SourceLine>
   <SourceLine>iPosCompare = strPicture.InStr(iPosStart + 11, "}")</SourceLine>
   <SourceLine>If iPosStop &lt; 1 Or (iPosCompare &gt; 0 And iPosCompare &lt; iPosStop) Then</SourceLine>
   <SourceLine>iPosStop = iPosCompare</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosCompare = strPicture.InStr(iPosStart + 11, "\")</SourceLine>
   <SourceLine>If iPosStop &lt; 1 Or (iPosCompare &gt; 0 And iPosCompare &lt; iPosStop) Then</SourceLine>
   <SourceLine>iPosStop = iPosCompare</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosCompare = strPicture.InStr(iPosStart + 11, Chr(13))</SourceLine>
   <SourceLine>If iPosStop &lt; 1 Or (iPosCompare &gt; 0 And iPosCompare &lt; iPosStop) Then</SourceLine>
   <SourceLine>iPosStop = iPosCompare</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iPosCompare = strPicture.InStr(iPosStart + 11, Chr(10))</SourceLine>
   <SourceLine>If iPosStop &lt; 1 Or (iPosCompare &gt; 0 And iPosCompare &lt; iPosStop) Then</SourceLine>
   <SourceLine>iPosStop = iPosCompare</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPosStop &gt; 0 Then</SourceLine>
   <SourceLine>If bPng Then</SourceLine>
   <SourceLine>iPosStart = iPosStart + 9</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPosStart = iPosStart + 10</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strPicString = strPicture.Mid(iPosStart, iPosStop - iPosStart)</SourceLine>
   <SourceLine>strPar = DecodeHex(strPicString)</SourceLine>
   <SourceLine>iLen = strPar.LenB</SourceLine>
   <SourceLine>mb = New MemoryBlock(iLen)</SourceLine>
   <SourceLine>mb.StringValue(0, iLen - 1) = strPar</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>pic = Picture.FromData(mb)</SourceLine>
   <SourceLine>If Not IsNull(pic) Then</SourceLine>
   <SourceLine>If iWidth &lt;= 0 Or iHeight &lt;= 0 Then</SourceLine>
   <SourceLine>picResized = New Picture(pic.Width, pic.Height)</SourceLine>
   <SourceLine>picResized.Graphics.DrawPicture(pic, 0, 0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>picResized = New Picture(iWidth, iHeight)</SourceLine>
   <SourceLine>picResized.Graphics.DrawPicture(pic, 0, 0, iWidth, iHeight, 0, 0, pic.Width, pic.Height)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bPictureFound = True</SourceLine>
   <SourceLine>iPosSearchFrom = iPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If IsNull(picResized) Then</SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + strValue.Mid(iPosClose + 1)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_rpicArr.Append(New clsRTFBox_Picture)</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_pic = pic</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_bPng = bPng</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_strPicString = strPicString</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_picResized = picResized</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_iMaxWidth = picResized.Width</SourceLine>
   <SourceLine>m_rpicArr(m_rpicArr.Ubound).m_iMaxHeight = picResized.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strValue = strValue.Left(iPos - 1) + "\picinternal" + Format(m_rpicArr.Ubound + 1, "0") + " " + strValue.Mid(iPosClose + 1)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until Not bPictureFound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strValue As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetRTF_AddPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetRTF_AddPicture(iPos As Integer) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRtVal = "{\pict"</SourceLine>
   <SourceLine>If m_rpicArr(m_cpArr(iPos).iPicture - 1).m_iMaxWidth &lt;&gt; m_rpicArr(m_cpArr(iPos).iPicture - 1).m_pic.Width Then</SourceLine>
   <SourceLine>strRtVal = strRtVal + "\picw" + Format(m_rpicArr(m_cpArr(iPos).iPicture - 1).m_iMaxWidth, "0")</SourceLine>
   <SourceLine>strRtVal = strRtVal + "\pich" + Format(m_rpicArr(m_cpArr(iPos).iPicture - 1).m_iMaxHeight, "0")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If m_rpicArr(m_cpArr(iPos).iPicture - 1).m_bPng Then</SourceLine>
   <SourceLine>strRtVal = strRtVal + "\pngblip "</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strRtVal = strRtVal + "\jpegblip "</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strRtVal = strRtVal + m_rpicArr(m_cpArr(iPos).iPicture - 1).m_strPicString</SourceLine>
   <SourceLine>strRtVal = strRtVal + "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>GetHtml_Image</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetHtml_Image(iPicturePos As Integer) As String</SourceLine>
   <SourceLine>Dim strRtVal As String</SourceLine>
   <SourceLine>Dim strPicture As String</SourceLine>
   <SourceLine>Dim strB64 As String</SourceLine>
   <SourceLine>Dim iHeight As Integer</SourceLine>
   <SourceLine>Dim iWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strPicture = m_rpicArr(iPicturePos).m_strPicString</SourceLine>
   <SourceLine>strPicture = DecodeHex(strPicture)</SourceLine>
   <SourceLine>'strPicture = m_rpicArr(iPicturePos).m_picResized.GetData(Picture.FormatJPEG, Picture.QualityHigh)</SourceLine>
   <SourceLine>strB64 = EncodeBase64(strPicture)</SourceLine>
   <SourceLine>iHeight = m_rpicArr(iPicturePos).m_picResized.Height</SourceLine>
   <SourceLine>iWidth = m_rpicArr(iPicturePos).m_picResized.Width</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>strRtVal = "&lt;img alt="""" " + _</SourceLine>
   <SourceLine>"src=""data:image/jpeg;base64," + strB64 + """ " + _</SourceLine>
   <SourceLine>"height=""" + Format(iHeight, "0") + """ " + _</SourceLine>
   <SourceLine>"width=""" + Format(iWidth, "0") + """ " + _</SourceLine>
   <SourceLine>"&gt;"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return strRtVal</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPicturePos As Integer</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertPicture(ByRef iPos As Integer, pic As Picture, iPictureFormat As Integer = 0)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim bResized As Boolean</SourceLine>
   <SourceLine>Dim iPosCopy As Integer</SourceLine>
   <SourceLine>Dim strPicStringPng As String</SourceLine>
   <SourceLine>Dim strPicStringJpg As String</SourceLine>
   <SourceLine>Dim strPicString As String</SourceLine>
   <SourceLine>Dim bPng As Boolean</SourceLine>
   <SourceLine>Dim iX As Integer</SourceLine>
   <SourceLine>Dim iY As Integer</SourceLine>
   <SourceLine>Dim iLastX As Integer</SourceLine>
   <SourceLine>Dim iLastY As Integer</SourceLine>
   <SourceLine>Dim rgbPic As RGBSurface</SourceLine>
   <SourceLine>Dim cl As Color</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpicArr.Append(New clsRTFBox_Picture)</SourceLine>
   <SourceLine>iLast = m_rpicArr.Ubound</SourceLine>
   <SourceLine>m_rpicArr(iLast).m_pic = pic</SourceLine>
   <SourceLine>iLastX = pic.Width - 1</SourceLine>
   <SourceLine>iLastY = pic.Height - 1</SourceLine>
   <SourceLine>rgbPic = pic.RGBSurface</SourceLine>
   <SourceLine>If iPictureFormat = PICFORMAT_JPG Then</SourceLine>
   <SourceLine>bPng = False</SourceLine>
   <SourceLine>ElseIf iPictureFormat = PICFORMAT_PNG Then</SourceLine>
   <SourceLine>bPng = True</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bPng = False</SourceLine>
   <SourceLine>For iX = 0 To iLastX</SourceLine>
   <SourceLine>For iY = 0 To iLastY</SourceLine>
   <SourceLine>If rgbPic.Pixel(iX, iY).Alpha &gt; 0 Then</SourceLine>
   <SourceLine>iX = iLastX</SourceLine>
   <SourceLine>iY = iLastY</SourceLine>
   <SourceLine>bPng = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next iY</SourceLine>
   <SourceLine>Next iX</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If bPng Then</SourceLine>
   <SourceLine>strPicString = pic.GetData(Picture.FormatPNG)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>strPicString = pic.GetData(Picture.FormatJPEG, 90)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>strPicString = EncodeHex(strPicString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_rpicArr(iLast).m_strPicString = strPicString</SourceLine>
   <SourceLine>m_rpicArr(iLast).m_bPng = bPng</SourceLine>
   <SourceLine>bResized = m_rpicArr(iLast).ResizePicture(pic.Width, False)</SourceLine>
   <SourceLine>m_rpicArr(iLast).m_bCheckPosition = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>cp.iPicture = iLast + 1 </SourceLine>
   <SourceLine>cp.iWidth = m_rpicArr(iLast).m_picResized.Width</SourceLine>
   <SourceLine>cp.iHeight = m_rpicArr(iLast).m_picResized.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &lt; 0 Then iPos = 0</SourceLine>
   <SourceLine>If iPos &gt; m_cpArr.Ubound Then iPos = m_cpArr.Ubound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If m_chArr(iPos) = Chr(10) Then</SourceLine>
   <SourceLine>iPos = iPos + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iPos &gt; 0 Then</SourceLine>
   <SourceLine>iPosCopy = iPos - 1</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPosCopy = iPos</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>cp.iLeft = m_cpArr(iPosCopy).iLeft + m_cpArr(iPosCopy).iWidth</SourceLine>
   <SourceLine>cp.iBottom = m_cpArr(iPosCopy).iBottom </SourceLine>
   <SourceLine>cp.btAscSpecial = 0</SourceLine>
   <SourceLine>cp.btStyle = m_cpArr(iPosCopy).btStyle</SourceLine>
   <SourceLine>cp.dFontSize = m_cpArr(iPosCopy).dFontSize</SourceLine>
   <SourceLine>cp.iParagraph = m_cpArr(iPosCopy).iParagraph</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_chArr.Insert(iPos, Chr(0))</SourceLine>
   <SourceLine>m_cpArr.Insert(iPos, cp)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef iPos As Integer, pic As Picture, iPictureFormat As Integer = 0</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClickOnFunction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ClickOnFunction(iPos As Integer) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim strNewValue As String</SourceLine>
   <SourceLine>Dim iFunctie As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound And _</SourceLine>
   <SourceLine>m_cpArr(iPos).iFunctie &gt; 0 Then</SourceLine>
   <SourceLine>If m_cpArr(iPos).iFunctie - 1 &lt;= m_strArrFieldFunctie.Ubound Then</SourceLine>
   <SourceLine>If m_strArrFieldFunctie(m_cpArr(iPos).iFunctie - 1) = "checkbox" Then</SourceLine>
   <SourceLine>If (m_chArr(iPos - 1) = CHECKBOX_CHECKED And (m_chArr(iPos) = Chr(9) Or m_chArr(iPos) = " ")) Then</SourceLine>
   <SourceLine>strNewValue = CHECKBOX_UNCHECKED</SourceLine>
   <SourceLine>iPos = iPos -1</SourceLine>
   <SourceLine>ElseIf (m_chArr(iPos) = CHECKBOX_CHECKED And (m_chArr(iPos + 1) = Chr(9) Or m_chArr(iPos + 1) = " ")) Then</SourceLine>
   <SourceLine>strNewValue = CHECKBOX_UNCHECKED</SourceLine>
   <SourceLine>ElseIf (m_chArr(iPos - 1) = CHECKBOX_UNCHECKED And (m_chArr(iPos) = Chr(9) Or m_chArr(iPos) = " ")) Then</SourceLine>
   <SourceLine>strNewValue = CHECKBOX_CHECKED</SourceLine>
   <SourceLine>iPos = iPos -1</SourceLine>
   <SourceLine>ElseIf (m_chArr(iPos) = CHECKBOX_UNCHECKED And (m_chArr(iPos + 1) = Chr(9) Or m_chArr(iPos + 1) = " ")) Then</SourceLine>
   <SourceLine>strNewValue = CHECKBOX_CHECKED</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>iPos = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 Then</SourceLine>
   <SourceLine>iFunctie = m_cpArr(iPos).iFunctie</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Add new checkbox AFTER old checkbox (to keep the layout of the old checkbox)</SourceLine>
   <SourceLine>iPos = iPos + 2</SourceLine>
   <SourceLine>InsertChar(iPos, Chr(9))</SourceLine>
   <SourceLine>m_cpArr(iPos).iFunctie = iFunctie</SourceLine>
   <SourceLine>InsertChar(iPos, strNewValue)</SourceLine>
   <SourceLine>m_cpArr(iPos).iFunctie = iFunctie</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Delete old checkbox</SourceLine>
   <SourceLine>iPos = iPos - 2</SourceLine>
   <SourceLine>m_cpArr.Remove(iPos)</SourceLine>
   <SourceLine>m_chArr.Remove(iPos)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_cpArr.Remove(iPos)</SourceLine>
   <SourceLine>m_chArr.Remove(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal </SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetScaleFactorPrinting</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function GetScaleFactorPrinting() As Double</SourceLine>
   <SourceLine>Return GetScaleFactorPrinting_Intern(True)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>GetScaleFactorPrinting_Intern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Function GetScaleFactorPrinting_Intern(bResolutionScale As Boolean) As Double</SourceLine>
   <SourceLine>If bResolutionScale Then</SourceLine>
   <SourceLine>Return 4</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return 4</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>bResolutionScale As Boolean</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>GetTableCellOnXY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetTableCellOnXY(iX As Integer, iY As Integer) As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCell = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For t = m_tcArr.Ubound To 0 Step -1</SourceLine>
   <SourceLine>If m_tcArr(t).iTop &lt;= iY And m_tcArr(t).iTop + m_tcArr(t).iHeight &gt;= iY And _</SourceLine>
   <SourceLine>m_tcArr(t).iLeft &lt;= iX And m_tcArr(t).iLeft + m_tcArr(t).iWidth &gt;= iX Then</SourceLine>
   <SourceLine>iCell = t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>'If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>'System.DebugLog("(" + Format(iX, "0") + " - " + Format(iY, "0") + ") = Cell " + Format(iCell, "0"))</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'System.DebugLog("(" + Format(iX, "0") + " - " + Format(iY, "0") + ") = No Cell")</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iCell</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iX As Integer, iY As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_GetFirstCharacterInThisTableCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Table_GetFirstCharacterInThisTableCell(iCell As Integer) As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = -1</SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iPar = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell = iCell Then</SourceLine>
   <SourceLine>iPar = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPar &gt;= 0 Then</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>iRtVal = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCell As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_GetLastCharacterInThisTableCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Table_GetLastCharacterInThisTableCell(iCell As Integer) As Integer</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iRtVal As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iRtVal = -1</SourceLine>
   <SourceLine>If iCell &gt;= 0 And iCell &lt;= m_tcArr.Ubound Then</SourceLine>
   <SourceLine>iPar = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLast = m_rpArrParagraph.Ubound</SourceLine>
   <SourceLine>For t = 0 To iLast</SourceLine>
   <SourceLine>If m_rpArrParagraph(t).TableCell = iCell Then</SourceLine>
   <SourceLine>iPar = t</SourceLine>
   <SourceLine>t = iLast + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPar &gt;= 0 Then</SourceLine>
   <SourceLine>iLast = m_cpArr.Ubound</SourceLine>
   <SourceLine>For t = iLast To 0 Step -1</SourceLine>
   <SourceLine>If m_cpArr(t).iParagraph = iPar Then</SourceLine>
   <SourceLine>iRtVal = t</SourceLine>
   <SourceLine>t = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return iRtVal</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iCell As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Table_DelTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Table_DelTable(iPos As Integer)</SourceLine>
   <SourceLine>Dim iPosStop As Integer</SourceLine>
   <SourceLine>Dim iPosStart As Integer</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iCell As Integer</SourceLine>
   <SourceLine>Dim iLastCell As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(iPos).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &gt;= 0 Then</SourceLine>
   <SourceLine>iPosStart = iPos</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosStart = iPosStart - 1</SourceLine>
   <SourceLine>Loop Until iPosStart &lt; 0 Or (m_rpArrParagraph(m_cpArr(iPosStart).iParagraph).TableCell &lt; 0)</SourceLine>
   <SourceLine>iPosStart = iPosStart + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPosStop = iPos</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>iPosStop = iPosStop + 1</SourceLine>
   <SourceLine>Loop Until iPosStop &gt; m_cpArr.Ubound Or (m_rpArrParagraph(m_cpArr(iPosStop).iParagraph).TableCell &lt; 0)</SourceLine>
   <SourceLine>iPosStop = iPosStop - 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iLastCell = m_rpArrParagraph(m_cpArr(iPosStop).iParagraph).TableCell</SourceLine>
   <SourceLine>For t = iPosStop - 1 To iPosStart Step -1</SourceLine>
   <SourceLine>iCell = m_rpArrParagraph(m_cpArr(t).iParagraph).TableCell</SourceLine>
   <SourceLine>If iCell &lt;&gt; iLastCell Then</SourceLine>
   <SourceLine>Table_DelCell(t + 1, False)</SourceLine>
   <SourceLine>iLastCell = iCell</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>If iLastCell &gt;= 0 Then</SourceLine>
   <SourceLine>Table_DelCell(t + 1, False)</SourceLine>
   <SourceLine>iLastCell = -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsInvisible(iPos As Integer, bVolgendTeTypenCharacter As Boolean) As Boolean</SourceLine>
   <SourceLine>Return IsStyle(iPos, bVolgendTeTypenCharacter, STYLE_INVISIBLE)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bVolgendTeTypenCharacter As Boolean</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetInvisible(iPos As Integer, Assigns bValue As Boolean)</SourceLine>
   <SourceLine>Dim cp As CharPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If iPos &gt;= 0 And iPos &lt;= m_cpArr.Ubound Then</SourceLine>
   <SourceLine>cp = m_cpArr(iPos)</SourceLine>
   <SourceLine>m_bNextRedrawWithMask = True</SourceLine>
   <SourceLine>SetStyle(cp, STYLE_INVISIBLE, bValue)</SourceLine>
   <SourceLine>m_cpArr(iPos) = cp</SourceLine>
   <SourceLine>MeetCP(iPos)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, Assigns bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetNextInvisible</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetNextInvisible(iPos As Integer, bValue As Boolean)</SourceLine>
   <SourceLine>ActivateNIS iPos</SourceLine>
   <SourceLine>If bValue &lt;&gt; ((m_nis.btStyle And STYLE_INVISIBLE) &gt; 0) Then</SourceLine>
   <SourceLine>If bValue Then</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle + STYLE_INVISIBLE</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>m_nis.btStyle = m_nis.btStyle - STYLE_INVISIBLE</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer, bValue As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NextRedrawFull</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function NextRedrawFull() As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = m_bNextRedrawFull</SourceLine>
   <SourceLine>m_bNextRedrawFull = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SpellCheck</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SpellCheck(strLanguage As String)</SourceLine>
   <SourceLine>#if ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>If IsNull(m_csSpellCheck) Then</SourceLine>
   <SourceLine>m_csSpellCheck = New CriticalSection</SourceLine>
   <SourceLine>m_thrSpellCheck = New Thread</SourceLine>
   <SourceLine>m_thrSpellCheck.Priority = 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>AddHandler m_thrSpellCheck.Run, AddressOf Event_SpellCheckRun</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_csSpellCheck.Enter</SourceLine>
   <SourceLine>If Not m_bSpellCheckRunning And Not IsNull(GetSpellChecker(strLanguage)) Then</SourceLine>
   <SourceLine>m_strSpellCheckText = GetText</SourceLine>
   <SourceLine>m_bSpellCheckRunning = True</SourceLine>
   <SourceLine>m_strSpellCheckLanguageThread = strLanguage</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_thrSpellCheck.Run</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>m_csSpellCheck.Leave</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strLanguage As String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetSpellChecker</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function GetSpellChecker(strLanguage As String) As Object</SourceLine>
   <SourceLine>#if ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>Dim fiAff As FolderItem</SourceLine>
   <SourceLine>Dim fiDic As FolderItem</SourceLine>
   <SourceLine>Dim fi As FolderItem</SourceLine>
   <SourceLine>Dim bAbort As Boolean</SourceLine>
   <SourceLine>Dim bFound As Boolean</SourceLine>
   <SourceLine>Dim strName As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strLanguage &lt;&gt; m_strSpellCheckLanguage Then</SourceLine>
   <SourceLine>m_bSpellCheckLaunched = False</SourceLine>
   <SourceLine>m_strSpellCheckLanguage = strLanguage</SourceLine>
   <SourceLine>m_scSpellCheck = Nil</SourceLine>
   <SourceLine>Redim m_strArrSCWords(-1)</SourceLine>
   <SourceLine>ReDim m_bArrSCWordsIgnore(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bSpellCheckLaunched And IsNull(m_scSpellCheck) Then</SourceLine>
   <SourceLine>fi = App.ExecutableFile</SourceLine>
   <SourceLine>bAbort = False</SourceLine>
   <SourceLine>bFound = False</SourceLine>
   <SourceLine>strName = ""</SourceLine>
   <SourceLine>If strLanguage.Len = 2 And Not IsNull(fi.Parent) And fi.Parent.Exists And fi.Parent.Directory Then</SourceLine>
   <SourceLine>strLanguage = strLanguage.Lowercase</SourceLine>
   <SourceLine>fi = fi.Parent</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>If fi.Child("SpellCheck").Exists Then</SourceLine>
   <SourceLine>bFound = True</SourceLine>
   <SourceLine>ElseIf Not IsNull(fi.Parent) And fi.Parent.Exists And fi.Directory Then</SourceLine>
   <SourceLine>fi = fi.Parent</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bAbort = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until bFound Or bAbort</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bFound Then</SourceLine>
   <SourceLine>fi = fi.Child("SpellCheck")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(fi.Child(strLanguage)) And _</SourceLine>
   <SourceLine>fi.Child(strLanguage).Exists And _</SourceLine>
   <SourceLine>fi.Child(strLanguage).Directory And _</SourceLine>
   <SourceLine>Not IsNull(fi.Child(strLanguage).Child(strLanguage + ".aff")) And _</SourceLine>
   <SourceLine>fi.Child(strLanguage).Child(strLanguage + ".aff").Exists And _</SourceLine>
   <SourceLine>Not fi.Child(strLanguage).Child(strLanguage + ".aff").Directory And _</SourceLine>
   <SourceLine>Not IsNull(fi.Child(strLanguage).Child(strLanguage + ".dic")) And _</SourceLine>
   <SourceLine>fi.Child(strLanguage).Child(strLanguage + ".dic").Exists And _</SourceLine>
   <SourceLine>Not fi.Child(strLanguage).Child(strLanguage + ".dic").Directory Then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fiAff = fi.Child(strLanguage).Child(strLanguage + ".aff")</SourceLine>
   <SourceLine>fiDic = fi.Child(strLanguage).Child(strLanguage + ".dic")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>m_scSpellCheck = BKSSpellChecker.CreateHunspellChecker(fiDic, fiAff)</SourceLine>
   <SourceLine>m_bSpellCheckLaunched = True</SourceLine>
   <SourceLine>Catch ex As RuntimeException</SourceLine>
   <SourceLine>'Do Nothing</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not m_bSpellCheckLaunched Then</SourceLine>
   <SourceLine>Try</SourceLine>
   <SourceLine>m_scSpellCheck = BKSSpellChecker.CreateSystemChecker</SourceLine>
   <SourceLine>Catch ex As PlatformNotSupportedException</SourceLine>
   <SourceLine>m_scSpellCheck = Nil</SourceLine>
   <SourceLine>End Try</SourceLine>
   <SourceLine>m_bSpellCheckLaunched = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return m_scSpellCheck</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>strLanguage As String</ItemParams>
  <ItemResult>Object</ItemResult>
 </Method>
 <Method>
  <ItemName>Event_SpellCheckRun</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Event_SpellCheckRun(thr As Thread)</SourceLine>
   <SourceLine>#if ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>Dim strText As String</SourceLine>
   <SourceLine>Dim strWord As String</SourceLine>
   <SourceLine>Dim oRange As BKSSpellCheckerRange</SourceLine>
   <SourceLine>Dim iStart As Integer</SourceLine>
   <SourceLine>Dim iCount As Integer</SourceLine>
   <SourceLine>Dim iLen As Integer</SourceLine>
   <SourceLine>Dim iPos As Integer</SourceLine>
   <SourceLine>Dim bFoundMistakes As Boolean</SourceLine>
   <SourceLine>Dim oBks As Object</SourceLine>
   <SourceLine>Dim bks As BKSSpellChecker</SourceLine>
   <SourceLine>Dim dMs As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_csSpellCheck.Enter</SourceLine>
   <SourceLine>oBks = GetSpellChecker(m_strSpellCheckLanguageThread)</SourceLine>
   <SourceLine>strText = m_strSpellCheckText</SourceLine>
   <SourceLine>m_csSpellCheck.Leave</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dMs = Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCount = 0</SourceLine>
   <SourceLine>bFoundMistakes = False</SourceLine>
   <SourceLine>If Not IsNull(oBks) And oBks IsA BKSSpellChecker Then</SourceLine>
   <SourceLine>bks = BKSSpellChecker(oBks)</SourceLine>
   <SourceLine>iLen = strText.Len</SourceLine>
   <SourceLine>If iLen &gt; 0 Then</SourceLine>
   <SourceLine>iStart = 1</SourceLine>
   <SourceLine>Do</SourceLine>
   <SourceLine>If iStart &gt; iLen Then</SourceLine>
   <SourceLine>oRange = Nil</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>oRange = bks.CheckSpelling(strText, iStart)</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If Not IsNull(oRange) Then</SourceLine>
   <SourceLine>bFoundMistakes = True</SourceLine>
   <SourceLine>strWord = strText.Mid(oRange.Start, oRange.Length)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iPos = m_strArrSCWords.IndexOf(strWord)</SourceLine>
   <SourceLine>If iPos &lt; 0 Then</SourceLine>
   <SourceLine>m_strArrSCWords.Append(strWord)</SourceLine>
   <SourceLine>m_bArrSCWordsIgnore.Append(False)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>iCount = iCount + 1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>iStart = oRange.Start + oRange.Length</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Loop Until IsNull(oRange) Or iCount = 100</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog "RTF.Event_SpellCheckRun executed in " + Format(Round(((Microseconds - dMs) / 1000.0)), "0") + " ms"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_csSpellCheck.Enter</SourceLine>
   <SourceLine>m_bSpellCheckFoundMistakes = bFoundMistakes</SourceLine>
   <SourceLine>m_bSpellCheckRunning = False</SourceLine>
   <SourceLine>m_strSpellCheckText = ""</SourceLine>
   <SourceLine>m_strSpellCheckLanguageThread = ""</SourceLine>
   <SourceLine>m_csSpellCheck.Leave</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>thr As Thread</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Destructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Destructor()</SourceLine>
   <SourceLine>#if ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>If Not IsNull(m_csSpellCheck) Then</SourceLine>
   <SourceLine>RemoveHandler m_thrSpellCheck.Run, AddressOf Event_SpellCheckRun</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_csSpellCheck = Nil</SourceLine>
   <SourceLine>m_thrSpellCheck = Nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>GetSpellCheckStatus</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetSpellCheckStatus(ByRef bRunning As Boolean, ByRef bErrors As Boolean)</SourceLine>
   <SourceLine>#if ALLOW_SPELLCHECKER</SourceLine>
   <SourceLine>If Not IsNull(m_csSpellCheck) Then</SourceLine>
   <SourceLine>If m_csSpellCheck.TryEnter Then</SourceLine>
   <SourceLine>bRunning = m_bSpellCheckRunning</SourceLine>
   <SourceLine>bErrors = m_bSpellCheckFoundMistakes</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not bRunning And bErrors Then</SourceLine>
   <SourceLine>m_bSpellCheckFoundMistakes = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>m_csSpellCheck.Leave</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRunning = True</SourceLine>
   <SourceLine>bErrors = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>bRunning = False</SourceLine>
   <SourceLine>bErrors = False</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef bRunning As Boolean, ByRef bErrors As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsInTableCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsInTableCell(iPos As Integer) As Boolean</SourceLine>
   <SourceLine>Dim bRtVal As Boolean</SourceLine>
   <SourceLine>Dim iPar As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>bRtVal = False</SourceLine>
   <SourceLine>If iPos &gt; 0 And iPos &lt; m_cpArr.Ubound Then</SourceLine>
   <SourceLine>iPar = m_cpArr(iPos).iParagraph</SourceLine>
   <SourceLine>If iPar &gt;= 0 And iPar &lt;= m_rpArrParagraph.Ubound Then</SourceLine>
   <SourceLine>If m_rpArrParagraph(iPar).TableCell &gt;= 0 Then</SourceLine>
   <SourceLine>bRtVal = True</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return bRtVal</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>iPos As Integer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>GetDefaultStyle_Intern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub GetDefaultStyle_Intern(ByRef strFont As String, ByRef iSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean)</SourceLine>
   <SourceLine>GetDefaultStyle(strFont, iSize, bBold, bItalic, bUnderline)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If strFont.Len = 0 Then</SourceLine>
   <SourceLine>'strFont = Opties.GetOptieValue_String(Opties.OPTRTFFONT)</SourceLine>
   <SourceLine>'iSize = Opties.GetOptieValue_Long(Opties.OPTRTFSIZE)</SourceLine>
   <SourceLine>'bBold = Opties.GetOptieValue_Bool(Opties.OPTRTFBOLD)</SourceLine>
   <SourceLine>'bItalic = Opties.GetOptieValue_Bool(Opties.OPTRTFITALIC)</SourceLine>
   <SourceLine>'bUnderline = Opties.GetOptieValue_Bool(Opties.OPTRTFUNDERLINED)</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If strFont.Len = 0 Then</SourceLine>
   <SourceLine>strFont = "Times New Roman"</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>If iSize &lt;= 3 Then</SourceLine>
   <SourceLine>iSize = 12</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ByRef strFont As String, ByRef iSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Print</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Print()</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim p As PrinterSetup</SourceLine>
   <SourceLine>Dim pic As Picture</SourceLine>
   <SourceLine>Dim iPageWidth As Integer</SourceLine>
   <SourceLine>Dim iPageHeight As Integer</SourceLine>
   <SourceLine>Dim picArr() As Picture</SourceLine>
   <SourceLine>Dim t As Integer</SourceLine>
   <SourceLine>Dim iLast As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>p = new PrinterSetup</SourceLine>
   <SourceLine>p.MaxHorizontalResolution = -1</SourceLine>
   <SourceLine>p.MaxVerticalResolution = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If p.PageSetupDialog Then</SourceLine>
   <SourceLine>g = OpenPrinterDialog(p)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not IsNull(g) Then</SourceLine>
   <SourceLine>#if TargetWindows</SourceLine>
   <SourceLine>iPageWidth = Floor(p.Width / 96 * 72)</SourceLine>
   <SourceLine>iPageHeight = Floor(p.Height / 96 * 72)</SourceLine>
   <SourceLine>#else</SourceLine>
   <SourceLine>iPageWidth = Floor(p.Width / p.HorizontalResolution * 72)</SourceLine>
   <SourceLine>iPageHeight = Floor(p.Height / p.VerticalResolution * 72)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>picArr() = DrawRTF_GetArray(iPageWidth, iPageHeight, iPageHeight, True, Nil, 0)</SourceLine>
   <SourceLine>iLast = picArr.Ubound + 1</SourceLine>
   <SourceLine>For t = 1 To iLast</SourceLine>
   <SourceLine>picArr = DrawRTF_GetArray(iPageWidth, iPageHeight, iPageHeight, True, g, t)</SourceLine>
   <SourceLine>If t &lt; iLast Then</SourceLine>
   <SourceLine>g.NextPage</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>Next t</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>'End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>FillFunctionValue</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>strFunction As String, ByRef strValue As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Hook>
 <Hook>
  <ItemName>GetDefaultStyle</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>ByRef strFont As String, ByRef iFontSize As Integer, ByRef bBold As Boolean, ByRef bItalic As Boolean, ByRef bUnderline As Boolean</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Note>
  <ItemName>License</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>License</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Eclipse Public License - v 1.0</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>1. DEFINITIONS</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>"Contribution" means:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>a) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and</NoteLine>
   <NoteLine>b) in the case of each subsequent Contributor:</NoteLine>
   <NoteLine>i) changes to the Program, and</NoteLine>
   <NoteLine>ii) additions to the Program;</NoteLine>
   <NoteLine>where such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.</NoteLine>
   <NoteLine>"Contributor" means any person or entity that distributes the Program.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>"Licensed Patents" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>"Program" means the Contributions distributed in accordance with this Agreement.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>"Recipient" means anyone who receives the Program under this Agreement, including all Contributors.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>2. GRANT OF RIGHTS</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>a) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.</NoteLine>
   <NoteLine>b) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.</NoteLine>
   <NoteLine>c) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.</NoteLine>
   <NoteLine>d) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.</NoteLine>
   <NoteLine>3. REQUIREMENTS</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>A Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>a) it complies with the terms and conditions of this Agreement; and</NoteLine>
   <NoteLine>b) its license agreement:</NoteLine>
   <NoteLine>i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;</NoteLine>
   <NoteLine>ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;</NoteLine>
   <NoteLine>iii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and</NoteLine>
   <NoteLine>iv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</NoteLine>
   <NoteLine>When the Program is made available in source code form:</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>a) it must be made available under this Agreement; and</NoteLine>
   <NoteLine>b) a copy of this Agreement must be included with each copy of the Program.</NoteLine>
   <NoteLine>Contributors may not remove or alter any copyright notices contained within the Program.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Each Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>4. COMMERCIAL DISTRIBUTION</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Commercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor ("Commercial Contributor") hereby agrees to defend and indemnify every other Contributor ("Indemnified Contributor") against any losses, damages and costs (collectively "Losses") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>For example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>5. NO WARRANTY</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>6. DISCLAIMER OF LIABILITY</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>7. GENERAL</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>If any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>If Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>All Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Everyone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>This Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>m_strArrFonts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strArrFonts() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrFonts() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_clColors()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_clColors() As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_clColors() As Color</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_cpArr()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_cpArr() As CharPos</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_cpArr() As CharPos</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_rpArrParagraph()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_rpArrParagraph() As clsRTFBox_Paragraph</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_rpArrParagraph() As clsRTFBox_Paragraph</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_chArr()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_chArr() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_chArr() As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_nis</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_nis As NextInputStyle</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_nis As NextInputStyle</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrFieldFunctie()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strArrFieldFunctie() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrFieldFunctie() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bNextRedrawWithMask</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bNextRedrawWithMask As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bNextRedrawWithMask As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrPossibleFonts()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_strArrPossibleFonts() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrPossibleFonts() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <Property>
  <ItemName>m_dScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_dScale As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_dScale As Double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_tcArr()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_tcArr() As TableCell</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_tcArr() As TableCell</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_picRTFBuffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_picRTFBuffer As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_picRTFBuffer As Picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_rpicArr()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_rpicArr() As clsRTFBox_Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_rpicArr() As clsRTFBox_Picture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bNextRedrawFull</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bNextRedrawFull As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bNextRedrawFull As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_scSpellCheck</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_scSpellCheck As Object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_scSpellCheck As Object</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bSpellCheckLaunched</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bSpellCheckLaunched As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bSpellCheckLaunched As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strArrSCWords()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strArrSCWords() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strArrSCWords() As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bArrSCWordsIgnore()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bArrSCWordsIgnore() As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bArrSCWordsIgnore() As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strSpellCheckLanguageThread</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strSpellCheckLanguageThread As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strSpellCheckLanguageThread As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bSpellCheckFoundMistakes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bSpellCheckFoundMistakes As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bSpellCheckFoundMistakes As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_bSpellCheckRunning</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_bSpellCheckRunning As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_bSpellCheckRunning As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_csSpellCheck</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_csSpellCheck As CriticalSection</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_csSpellCheck As CriticalSection</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strSpellCheckText</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strSpellCheckText As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strSpellCheckText As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_thrSpellCheck</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_thrSpellCheck As Thread</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_thrSpellCheck As Thread</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_strSpellCheckLanguage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>m_strSpellCheckLanguage As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_strSpellCheckLanguage As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>m_dLargestDrawingTime</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared m_dLargestDrawingTime As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>m_dLargestDrawingTime As Double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>1</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>ALIGNRIGHT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALIGNCENTER</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALIGNLEFT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>0</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_BOLD</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>8</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_ITALIC</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>16</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_DOT</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_DASH</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>3</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_DOUBLE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>4</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_THICK</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>5</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_WORD</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>6</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_UNDERLINE_WAVE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>7</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_STRIKETHROUGH</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>32</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_SHADOW</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>64</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_PAGEBREAK</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_EXTRALINESTYLES</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_TABLES</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_PICTURES</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CHECKBOX_UNCHECKED</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>0</ItemType>
  <ItemDef>☐</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>CHECKBOX_CHECKED</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>0</ItemType>
  <ItemDef>☒</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_CHECKBOX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>PICFORMAT_PNG</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>PICFORMAT_JPG</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>1</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>STYLE_INVISIBLE</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>128</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>DRAWINGTIMETHRESHOLD</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>2</ItemType>
  <ItemDef>150</ItemDef>
  <ItemFlags>33</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_SPELLCHECKER</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>False</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Constant>
  <ItemName>ALLOW_NSTOUCHBAR</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>3</ItemType>
  <ItemDef>False</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
 <Structure>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>CharPos</ItemName>
  <ItemFlags>33</ItemFlags>
  <ItemName>CharPos</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>iLeft As Integer</SourceLine>
   <SourceLine>iBottom As Integer</SourceLine>
   <SourceLine>iHeight As Int16</SourceLine>
   <SourceLine>iWidth As Int16</SourceLine>
   <SourceLine>iFontNr As Byte</SourceLine>
   <SourceLine>dFontSize As Single</SourceLine>
   <SourceLine>iColorNr As Byte</SourceLine>
   <SourceLine>iParagraph As Int16</SourceLine>
   <SourceLine>btStyle As Byte</SourceLine>
   <SourceLine>iFunctie As Int16</SourceLine>
   <SourceLine>iScreenX As Int16</SourceLine>
   <SourceLine>iScreenY As Int16</SourceLine>
   <SourceLine>bScreenSelected As Boolean</SourceLine>
   <SourceLine>btAscSpecial As Byte</SourceLine>
   <SourceLine>iPicture As Int16</SourceLine>
  </ItemSource>
 </Structure>
 <Structure>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>NextInputStyle</ItemName>
  <ItemFlags>33</ItemFlags>
  <ItemName>NextInputStyle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>btStyle As Byte</SourceLine>
   <SourceLine>iColorNr As Byte</SourceLine>
   <SourceLine>dFontSize As Single</SourceLine>
   <SourceLine>iFontNr As Byte</SourceLine>
   <SourceLine>iPos As Integer</SourceLine>
  </ItemSource>
 </Structure>
 <Structure>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>TableCell</ItemName>
  <ItemFlags>33</ItemFlags>
  <ItemName>TableCell</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>iRow As Int16</SourceLine>
   <SourceLine>iCol As Byte</SourceLine>
   <SourceLine>iWidth As Int16</SourceLine>
   <SourceLine>iHeight As Int16</SourceLine>
   <SourceLine>iTop As Int16</SourceLine>
   <SourceLine>iLeft As Int16</SourceLine>
   <SourceLine>bMetenNodig As Boolean</SourceLine>
   <SourceLine>iMinWidth As Int16</SourceLine>
   <SourceLine>iMaxWidth As Int16</SourceLine>
   <SourceLine>bBorder As Boolean</SourceLine>
   <SourceLine>iColorNr As Int16</SourceLine>
  </ItemSource>
 </Structure>
</block>
</RBProject>
